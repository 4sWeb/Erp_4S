using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace DAL.Models
{
    public partial class ModelContext : DbContext
    {
        public ModelContext()
        {
        }

        public ModelContext(DbContextOptions<ModelContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AcceptInFinancetrn> AcceptInFinancetrns { get; set; }
        public virtual DbSet<AcceptInTrn> AcceptInTrns { get; set; }
        public virtual DbSet<AcceptInTrnsTemp> AcceptInTrnsTemps { get; set; }
        public virtual DbSet<AcceptInsaleform> AcceptInsaleforms { get; set; }
        public virtual DbSet<Acceptancesaleformview> Acceptancesaleformviews { get; set; }
        public virtual DbSet<Acclevel> Acclevels { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Account1234> Account1234s { get; set; }
        public virtual DbSet<AccountBalance> AccountBalances { get; set; }
        public virtual DbSet<AccountOwnValue> AccountOwnValues { get; set; }
        public virtual DbSet<Accountingentry> Accountingentries { get; set; }
        public virtual DbSet<Accountingentrydetail> Accountingentrydetails { get; set; }
        public virtual DbSet<Accountnature> Accountnatures { get; set; }
        public virtual DbSet<Accountstree> Accountstrees { get; set; }
        public virtual DbSet<Accsy> Accsys { get; set; }
        public virtual DbSet<ActionTaken> ActionTakens { get; set; }
        public virtual DbSet<ActiveStore> ActiveStores { get; set; }
        public virtual DbSet<Activereservedunitsdatum> Activereservedunitsdata { get; set; }
        public virtual DbSet<ActualcostofagricultureView> ActualcostofagricultureViews { get; set; }
        public virtual DbSet<Affectsaleprice> Affectsaleprices { get; set; }
        public virtual DbSet<Agriage> Agriages { get; set; }
        public virtual DbSet<Agridatum> Agridata { get; set; }
        public virtual DbSet<Agrifarm> Agrifarms { get; set; }
        public virtual DbSet<Agriprocess> Agriprocesses { get; set; }
        public virtual DbSet<Allcompanysale> Allcompanysales { get; set; }
        public virtual DbSet<Allsaleformsstatementview> Allsaleformsstatementviews { get; set; }
        public virtual DbSet<Alterinstalmentsetting> Alterinstalmentsettings { get; set; }
        public virtual DbSet<Analyticalnumber> Analyticalnumbers { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<Asset> Assets { get; set; }
        public virtual DbSet<Assetdatum> Assetdata { get; set; }
        public virtual DbSet<Assetsgroup> Assetsgroups { get; set; }
        public virtual DbSet<Assetslevel> Assetslevels { get; set; }
        public virtual DbSet<Assetstranscation> Assetstranscations { get; set; }
        public virtual DbSet<Assetstrnstype> Assetstrnstypes { get; set; }
        public virtual DbSet<Assettransationssum> Assettransationssums { get; set; }
        public virtual DbSet<Attachmentfeature> Attachmentfeatures { get; set; }
        public virtual DbSet<Attachmentservice> Attachmentservices { get; set; }
        public virtual DbSet<Attachmenttype> Attachmenttypes { get; set; }
        public virtual DbSet<Auditlog> Auditlogs { get; set; }
        public virtual DbSet<Bankingfacility> Bankingfacilities { get; set; }
        public virtual DbSet<Banksystemsspec> Banksystemsspecs { get; set; }
        public virtual DbSet<Barcodeseed> Barcodeseeds { get; set; }
        public virtual DbSet<Boatport> Boatports { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Branch1> Branches1 { get; set; }
        public virtual DbSet<Branchdirector> Branchdirectors { get; set; }
        public virtual DbSet<BusinesstypeSpec> BusinesstypeSpecs { get; set; }
        public virtual DbSet<Calcfinstalmentwithreschedual> Calcfinstalmentwithrescheduals { get; set; }
        public virtual DbSet<Cancellationorwaivertrn> Cancellationorwaivertrns { get; set; }
        public virtual DbSet<Ccc> Cccs { get; set; }
        public virtual DbSet<Check> Checks { get; set; }
        public virtual DbSet<CheckHistoryEffect> CheckHistoryEffects { get; set; }
        public virtual DbSet<CheckHistoryEffect2> CheckHistoryEffect2s { get; set; }
        public virtual DbSet<Checkbook> Checkbooks { get; set; }
        public virtual DbSet<Checkbookdetail> Checkbookdetails { get; set; }
        public virtual DbSet<Checkhistory> Checkhistories { get; set; }
        public virtual DbSet<Checkidstamp> Checkidstamps { get; set; }
        public virtual DbSet<Checkplacehistory> Checkplacehistories { get; set; }
        public virtual DbSet<Checkrecieved> Checkrecieveds { get; set; }
        public virtual DbSet<Checkrecievedview> Checkrecievedviews { get; set; }
        public virtual DbSet<ChecksNotCollected> ChecksNotCollecteds { get; set; }
        public virtual DbSet<ChecksNotCollectedmod> ChecksNotCollectedmods { get; set; }
        public virtual DbSet<Checksmod> Checksmods { get; set; }
        public virtual DbSet<Checksnotconfirmed> Checksnotconfirmeds { get; set; }
        public virtual DbSet<Checkstatus> Checkstatuses { get; set; }
        public virtual DbSet<Checkstransactionhistory> Checkstransactionhistories { get; set; }
        public virtual DbSet<Checktype> Checktypes { get; set; }
        public virtual DbSet<Clientinstitem> Clientinstitems { get; set; }
        public virtual DbSet<Cminstitemattatchment> Cminstitemattatchments { get; set; }
        public virtual DbSet<Cminstitemattatchmentfeature> Cminstitemattatchmentfeatures { get; set; }
        public virtual DbSet<Cminstitemattatchmentservice> Cminstitemattatchmentservices { get; set; }
        public virtual DbSet<Cminstitembuildinglayer> Cminstitembuildinglayers { get; set; }
        public virtual DbSet<Cminstitemfeature> Cminstitemfeatures { get; set; }
        public virtual DbSet<Cminstitemlayoutdetail> Cminstitemlayoutdetails { get; set; }
        public virtual DbSet<Cminstitemlayoutlayer> Cminstitemlayoutlayers { get; set; }
        public virtual DbSet<Cminstitemproperty> Cminstitemproperties { get; set; }
        public virtual DbSet<Cminstitemservice> Cminstitemservices { get; set; }
        public virtual DbSet<Cminstitemtemplete> Cminstitemtempletes { get; set; }
        public virtual DbSet<Cminstitemtempletedesign> Cminstitemtempletedesigns { get; set; }
        public virtual DbSet<Codechange> Codechanges { get; set; }
        public virtual DbSet<Codelinkpartdetail> Codelinkpartdetails { get; set; }
        public virtual DbSet<Codelinkservacc> Codelinkservaccs { get; set; }
        public virtual DbSet<Codepart1> Codepart1s { get; set; }
        public virtual DbSet<Codepart10> Codepart10s { get; set; }
        public virtual DbSet<Codepart22> Codepart22s { get; set; }
        public virtual DbSet<Codepart3> Codepart3s { get; set; }
        public virtual DbSet<Codepart4> Codepart4s { get; set; }
        public virtual DbSet<Codepart5> Codepart5s { get; set; }
        public virtual DbSet<Codepart6> Codepart6s { get; set; }
        public virtual DbSet<Codepart7> Codepart7s { get; set; }
        public virtual DbSet<Codepart8> Codepart8s { get; set; }
        public virtual DbSet<Codepart9> Codepart9s { get; set; }
        public virtual DbSet<Codeslink> Codeslinks { get; set; }
        public virtual DbSet<Codeslinkdetail> Codeslinkdetails { get; set; }
        public virtual DbSet<Codeslinkitemdetail> Codeslinkitemdetails { get; set; }
        public virtual DbSet<Commissionrule> Commissionrules { get; set; }
        public virtual DbSet<Committee> Committees { get; set; }
        public virtual DbSet<Committeedetail> Committeedetails { get; set; }
        public virtual DbSet<CommonCity> CommonCities { get; set; }
        public virtual DbSet<CommonCompany> CommonCompanies { get; set; }
        public virtual DbSet<CommonCountry> CommonCountries { get; set; }
        public virtual DbSet<CommonDate> CommonDates { get; set; }
        public virtual DbSet<CommonDepartment> CommonDepartments { get; set; }
        public virtual DbSet<CommonEmployee> CommonEmployees { get; set; }
        public virtual DbSet<CommonFlag> CommonFlags { get; set; }
        public virtual DbSet<CommonHijriDateAdjustment> CommonHijriDateAdjustments { get; set; }
        public virtual DbSet<CommonLastSequence> CommonLastSequences { get; set; }
        public virtual DbSet<CommonRegion> CommonRegions { get; set; }
        public virtual DbSet<CommonType> CommonTypes { get; set; }
        public virtual DbSet<CommonTypesdatum> CommonTypesdata { get; set; }
        public virtual DbSet<CompanyName> CompanyNames { get; set; }
        public virtual DbSet<Companyinfo> Companyinfos { get; set; }
        public virtual DbSet<Companyinformation> Companyinformations { get; set; }
        public virtual DbSet<Companyinfoview> Companyinfoviews { get; set; }
        public virtual DbSet<Companyresponsable> Companyresponsables { get; set; }
        public virtual DbSet<Companysale> Companysales { get; set; }
        public virtual DbSet<Compositeinstitem> Compositeinstitems { get; set; }
        public virtual DbSet<Conditionsbooklet> Conditionsbooklets { get; set; }
        public virtual DbSet<Contractcustomerinfo> Contractcustomerinfos { get; set; }
        public virtual DbSet<Convlegalaffair> Convlegalaffairs { get; set; }
        public virtual DbSet<CostDistributionM> CostDistributionMs { get; set; }
        public virtual DbSet<CostDistributionO> CostDistributionOs { get; set; }
        public virtual DbSet<Costcalculation> Costcalculations { get; set; }
        public virtual DbSet<Costcenter> Costcenters { get; set; }
        public virtual DbSet<CostcenterT> CostcenterTs { get; set; }
        public virtual DbSet<Criteria> Criterias { get; set; }
        public virtual DbSet<Ctransworkarround> Ctransworkarrounds { get; set; }
        public virtual DbSet<Ctransworkarround2> Ctransworkarround2s { get; set; }
        public virtual DbSet<Ctransworkarround3> Ctransworkarround3s { get; set; }
        public virtual DbSet<Currencydiff> Currencydiffs { get; set; }
        public virtual DbSet<Currencym> Currencyms { get; set; }
        public virtual DbSet<Currencyo> Currencyos { get; set; }
        public virtual DbSet<Cust11> Cust11s { get; set; }
        public virtual DbSet<CustSalformAcc> CustSalformAccs { get; set; }
        public virtual DbSet<CustSalformAccInsteadProc> CustSalformAccInsteadProcs { get; set; }
        public virtual DbSet<CustSalformAllpayment> CustSalformAllpayments { get; set; }
        public virtual DbSet<CustomerDimensionsdetail> CustomerDimensionsdetails { get; set; }
        public virtual DbSet<Customerinformation> Customerinformations { get; set; }
        public virtual DbSet<Customersalesanalysisbyitem> Customersalesanalysisbyitems { get; set; }
        public virtual DbSet<DateCheckIscanceled> DateCheckIscanceleds { get; set; }
        public virtual DbSet<DateCheckIscollected> DateCheckIscollecteds { get; set; }
        public virtual DbSet<DateCheckIscollectedNew> DateCheckIscollectedNews { get; set; }
        public virtual DbSet<Day> Days { get; set; }
        public virtual DbSet<DbUpdate> DbUpdates { get; set; }
        public virtual DbSet<Defaulttype> Defaulttypes { get; set; }
        public virtual DbSet<DefinePreference> DefinePreferences { get; set; }
        public virtual DbSet<DelayedInstalmentPayment> DelayedInstalmentPayments { get; set; }
        public virtual DbSet<Departmenttest> Departmenttests { get; set; }
        public virtual DbSet<Dependencytreereport> Dependencytreereports { get; set; }
        public virtual DbSet<Depreciation> Depreciations { get; set; }
        public virtual DbSet<Depreciationcalcm> Depreciationcalcms { get; set; }
        public virtual DbSet<Depreciationcalco> Depreciationcalcos { get; set; }
        public virtual DbSet<Depremainingtracking> Depremainingtrackings { get; set; }
        public virtual DbSet<Detailsdataname> Detailsdatanames { get; set; }
        public virtual DbSet<Dimension> Dimensions { get; set; }
        public virtual DbSet<DimensionBalance> DimensionBalances { get; set; }
        public virtual DbSet<DimensionOwnValue> DimensionOwnValues { get; set; }
        public virtual DbSet<Dimensionlevel> Dimensionlevels { get; set; }
        public virtual DbSet<Dimensionoption> Dimensionoptions { get; set; }
        public virtual DbSet<Dimensionsdetail> Dimensionsdetails { get; set; }
        public virtual DbSet<DimensionsdetailsT> DimensionsdetailsTs { get; set; }
        public virtual DbSet<DiscountItemM> DiscountItemMs { get; set; }
        public virtual DbSet<DiscountListCustomer> DiscountListCustomers { get; set; }
        public virtual DbSet<DiscountListType> DiscountListTypes { get; set; }
        public virtual DbSet<Dist> Dists { get; set; }
        public virtual DbSet<DistPart> DistParts { get; set; }
        public virtual DbSet<DistType> DistTypes { get; set; }
        public virtual DbSet<Documentsattachedtype> Documentsattachedtypes { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Entrytype> Entrytypes { get; set; }
        public virtual DbSet<Estimatedval> Estimatedvals { get; set; }
        public virtual DbSet<Estimatedvalsdet> Estimatedvalsdets { get; set; }
        public virtual DbSet<EvalPricePromoComm> EvalPricePromoComms { get; set; }
        public virtual DbSet<EvaluaPricePromationDetail> EvaluaPricePromationDetails { get; set; }
        public virtual DbSet<EvaluationPricePromation> EvaluationPricePromations { get; set; }
        public virtual DbSet<Evaluationview> Evaluationviews { get; set; }
        public virtual DbSet<ExpensessTrnsView> ExpensessTrnsViews { get; set; }
        public virtual DbSet<Exptype> Exptypes { get; set; }
        public virtual DbSet<Extra> Extras { get; set; }
        public virtual DbSet<Featuretype> Featuretypes { get; set; }
        public virtual DbSet<Finalmiagrationtype> Finalmiagrationtypes { get; set; }
        public virtual DbSet<FinanceAnlsCode> FinanceAnlsCodes { get; set; }
        public virtual DbSet<FinanceAnlsCodesFactor> FinanceAnlsCodesFactors { get; set; }
        public virtual DbSet<FinanceTrnsAccept> FinanceTrnsAccepts { get; set; }
        public virtual DbSet<Financeacceptenceview> Financeacceptenceviews { get; set; }
        public virtual DbSet<Financedep> Financedeps { get; set; }
        public virtual DbSet<Financedepspec> Financedepspecs { get; set; }
        public virtual DbSet<Financedepspecdetail> Financedepspecdetails { get; set; }
        public virtual DbSet<Financedisttype> Financedisttypes { get; set; }
        public virtual DbSet<Financeinstalment> Financeinstalments { get; set; }
        public virtual DbSet<Financeinstalmentsdd> Financeinstalmentsdds { get; set; }
        public virtual DbSet<Financeinvdist> Financeinvdists { get; set; }
        public virtual DbSet<Financeinvspec> Financeinvspecs { get; set; }
        public virtual DbSet<Financem> Financems { get; set; }
        public virtual DbSet<Financepupose> Financepuposes { get; set; }
        public virtual DbSet<Financespec> Financespecs { get; set; }
        public virtual DbSet<Financespecapp> Financespecapps { get; set; }
        public virtual DbSet<Financespecdetail> Financespecdetails { get; set; }
        public virtual DbSet<Financespecprotection> Financespecprotections { get; set; }
        public virtual DbSet<FinancetrnsUserAccept> FinancetrnsUserAccepts { get; set; }
        public virtual DbSet<Financetype> Financetypes { get; set; }
        public virtual DbSet<Financialcancellation> Financialcancellations { get; set; }
        public virtual DbSet<FormChecks1> FormChecks1s { get; set; }
        public virtual DbSet<FormChecks2> FormChecks2s { get; set; }
        public virtual DbSet<FormChecks2mod> FormChecks2mods { get; set; }
        public virtual DbSet<FormPayments1OneRow> FormPayments1OneRows { get; set; }
        public virtual DbSet<FormPayments1OneRowaddition> FormPayments1OneRowadditions { get; set; }
        public virtual DbSet<FormadditionsDeduction> FormadditionsDeductions { get; set; }
        public virtual DbSet<FormadditionsDeductions2> FormadditionsDeductions2s { get; set; }
        public virtual DbSet<FormadditionsDeductionsInst> FormadditionsDeductionsInsts { get; set; }
        public virtual DbSet<Formstaff> Formstaffs { get; set; }
        public virtual DbSet<FormstaffRep> FormstaffReps { get; set; }
        public virtual DbSet<Formtotaladddeduce> Formtotaladddeduces { get; set; }
        public virtual DbSet<Fromtodesc> Fromtodescs { get; set; }
        public virtual DbSet<Frunitdum> Frunitda { get; set; }
        public virtual DbSet<Furtunitsdatatwo> Furtunitsdatatwos { get; set; }
        public virtual DbSet<FutureInstalment> FutureInstalments { get; set; }
        public virtual DbSet<FutureInstalmentsMod> FutureInstalmentsMods { get; set; }
        public virtual DbSet<FutureInstalmentsYearsw> FutureInstalmentsYearsws { get; set; }
        public virtual DbSet<Generalspec> Generalspecs { get; set; }
        public virtual DbSet<Generalspecsdetail> Generalspecsdetails { get; set; }
        public virtual DbSet<GetCostbyitempreviousview> GetCostbyitempreviousviews { get; set; }
        public virtual DbSet<Getallpermission> Getallpermissions { get; set; }
        public virtual DbSet<Getcompositeinsitemview> Getcompositeinsitemviews { get; set; }
        public virtual DbSet<Getinstalmentgrossleftview> Getinstalmentgrossleftviews { get; set; }
        public virtual DbSet<Getitempercentagebytrnsview> Getitempercentagebytrnsviews { get; set; }
        public virtual DbSet<Getrentformdataview> Getrentformdataviews { get; set; }
        public virtual DbSet<GetrentformdataviewMod> GetrentformdataviewMods { get; set; }
        public virtual DbSet<Getsaleformdataview> Getsaleformdataviews { get; set; }
        public virtual DbSet<GlAccount> GlAccounts { get; set; }
        public virtual DbSet<GlAccountFySummary> GlAccountFySummaries { get; set; }
        public virtual DbSet<GlAccountLevel> GlAccountLevels { get; set; }
        public virtual DbSet<GlAccountType> GlAccountTypes { get; set; }
        public virtual DbSet<GlCompany> GlCompanies { get; set; }
        public virtual DbSet<GlCurrency> GlCurrencies { get; set; }
        public virtual DbSet<GlCurrencyHistory> GlCurrencyHistories { get; set; }
        public virtual DbSet<GlDetailedBudget> GlDetailedBudgets { get; set; }
        public virtual DbSet<GlDetailedTransAnalysis> GlDetailedTransAnalyses { get; set; }
        public virtual DbSet<GlDetailedTransaction> GlDetailedTransactions { get; set; }
        public virtual DbSet<GlDocumentType> GlDocumentTypes { get; set; }
        public virtual DbSet<GlDummy> GlDummies { get; set; }
        public virtual DbSet<GlEquation> GlEquations { get; set; }
        public virtual DbSet<GlExpectedBalance> GlExpectedBalances { get; set; }
        public virtual DbSet<GlFinancialPeriod> GlFinancialPeriods { get; set; }
        public virtual DbSet<GlFinancialYear> GlFinancialYears { get; set; }
        public virtual DbSet<GlMasterBudget> GlMasterBudgets { get; set; }
        public virtual DbSet<GlMasterTransaction> GlMasterTransactions { get; set; }
        public virtual DbSet<GlMonth> GlMonths { get; set; }
        public virtual DbSet<GlOracleSpec> GlOracleSpecs { get; set; }
        public virtual DbSet<GlSegment> GlSegments { get; set; }
        public virtual DbSet<GlSetting> GlSettings { get; set; }
        public virtual DbSet<GlSupportingDocument> GlSupportingDocuments { get; set; }
        public virtual DbSet<GlSuspensionDetail> GlSuspensionDetails { get; set; }
        public virtual DbSet<Glintegratorm> Glintegratorms { get; set; }
        public virtual DbSet<Glintegratoro> Glintegratoros { get; set; }
        public virtual DbSet<Glintergrationsetting> Glintergrationsettings { get; set; }
        public virtual DbSet<GroupBasicDatum> GroupBasicData { get; set; }
        public virtual DbSet<Groupf> Groupfs { get; set; }
        public virtual DbSet<GroupfDetail> GroupfDetails { get; set; }
        public virtual DbSet<Hafzadisttype> Hafzadisttypes { get; set; }
        public virtual DbSet<Hafzam> Hafzams { get; set; }
        public virtual DbSet<Hafzao> Hafzaos { get; set; }
        public virtual DbSet<Hafzaspec> Hafzaspecs { get; set; }
        public virtual DbSet<Hcbrowsableid> Hcbrowsableids { get; set; }
        public virtual DbSet<HelpCriterion> HelpCriteria { get; set; }
        public virtual DbSet<I18nKey> I18nKeys { get; set; }
        public virtual DbSet<I18nLocale> I18nLocales { get; set; }
        public virtual DbSet<I18nMessage> I18nMessages { get; set; }
        public virtual DbSet<InstAffectSalepriceCorrect> InstAffectSalepriceCorrects { get; set; }
        public virtual DbSet<InstAffetSaleprice> InstAffetSaleprices { get; set; }
        public virtual DbSet<InstAffetSalepriceCorrect> InstAffetSalepriceCorrects { get; set; }
        public virtual DbSet<InstChecksUnderCollection> InstChecksUnderCollections { get; set; }
        public virtual DbSet<InstHasFuturePayment> InstHasFuturePayments { get; set; }
        public virtual DbSet<InstPayments1> InstPayments1s { get; set; }
        public virtual DbSet<InstPayments1OneRow> InstPayments1OneRows { get; set; }
        public virtual DbSet<InstPayments1OneRowDetail> InstPayments1OneRowDetails { get; set; }
        public virtual DbSet<InstPayments1OneRowMod> InstPayments1OneRowMods { get; set; }
        public virtual DbSet<InstPayments1OneRowaddition> InstPayments1OneRowadditions { get; set; }
        public virtual DbSet<InstPayments2> InstPayments2s { get; set; }
        public virtual DbSet<InstSpecDetail> InstSpecDetails { get; set; }
        public virtual DbSet<InstSpecDetailsMod> InstSpecDetailsMods { get; set; }
        public virtual DbSet<InstStatus> InstStatuses { get; set; }
        public virtual DbSet<InstStatus1> InstStatus1s { get; set; }
        public virtual DbSet<InstTemp> InstTemps { get; set; }
        public virtual DbSet<InstallmentHelp> InstallmentHelps { get; set; }
        public virtual DbSet<Installmentitemsview> Installmentitemsviews { get; set; }
        public virtual DbSet<Installmentsdetail> Installmentsdetails { get; set; }
        public virtual DbSet<Instalmentpart> Instalmentparts { get; set; }
        public virtual DbSet<Instalmentrule> Instalmentrules { get; set; }
        public virtual DbSet<InstalmentsM> InstalmentsMs { get; set; }
        public virtual DbSet<InstalmentsNotFullyPaid> InstalmentsNotFullyPaids { get; set; }
        public virtual DbSet<InstalmentsNotpaidformfinance> InstalmentsNotpaidformfinances { get; set; }
        public virtual DbSet<InstappSetup> InstappSetups { get; set; }
        public virtual DbSet<Instcalcmethod> Instcalcmethods { get; set; }
        public virtual DbSet<Institem> Institems { get; set; }
        public virtual DbSet<Institem4crm> Institem4crms { get; set; }
        public virtual DbSet<Institem4crmReserved> Institem4crmReserveds { get; set; }
        public virtual DbSet<InstitemAllDay> InstitemAllDays { get; set; }
        public virtual DbSet<InstitemHelp> InstitemHelps { get; set; }
        public virtual DbSet<InstitemHelp1> InstitemHelp1s { get; set; }
        public virtual DbSet<InstitemHelpmod> InstitemHelpmods { get; set; }
        public virtual DbSet<InstitemHelpmod1> InstitemHelpmod1s { get; set; }
        public virtual DbSet<InstitemSaView> InstitemSaViews { get; set; }
        public virtual DbSet<InstitemSaView2> InstitemSaView2s { get; set; }
        public virtual DbSet<Institemattachmentsview> Institemattachmentsviews { get; set; }
        public virtual DbSet<Institemattatchment> Institemattatchments { get; set; }
        public virtual DbSet<Institemattatchmentfeature> Institemattatchmentfeatures { get; set; }
        public virtual DbSet<Institemattatchmentfeaturesu> Institemattatchmentfeaturesus { get; set; }
        public virtual DbSet<Institemattatchmentservice> Institemattatchmentservices { get; set; }
        public virtual DbSet<Institemattatchmentservicesu> Institemattatchmentservicesus { get; set; }
        public virtual DbSet<Institemattatchmentsu> Institemattatchmentsus { get; set; }
        public virtual DbSet<Institemcheck> Institemchecks { get; set; }
        public virtual DbSet<Institemcomp> Institemcomps { get; set; }
        public virtual DbSet<Institemcompdetail> Institemcompdetails { get; set; }
        public virtual DbSet<Institemcompinstpay> Institemcompinstpays { get; set; }
        public virtual DbSet<Institemdetailsview> Institemdetailsviews { get; set; }
        public virtual DbSet<Institemdocattachment> Institemdocattachments { get; set; }
        public virtual DbSet<Institemfeature> Institemfeatures { get; set; }
        public virtual DbSet<Institemfeaturesu> Institemfeaturesus { get; set; }
        public virtual DbSet<Institemfeatureview> Institemfeatureviews { get; set; }
        public virtual DbSet<Institemhelpview> Institemhelpviews { get; set; }
        public virtual DbSet<Institemmaintype> Institemmaintypes { get; set; }
        public virtual DbSet<Institemmaintypeattachment> Institemmaintypeattachments { get; set; }
        public virtual DbSet<Institemmaintypefeature> Institemmaintypefeatures { get; set; }
        public virtual DbSet<Institemmaintypeservice> Institemmaintypeservices { get; set; }
        public virtual DbSet<Institemmaintypesproperty> Institemmaintypesproperties { get; set; }
        public virtual DbSet<Institemproperty> Institemproperties { get; set; }
        public virtual DbSet<Institempropertyview> Institempropertyviews { get; set; }
        public virtual DbSet<Institemservice> Institemservices { get; set; }
        public virtual DbSet<Institemservicesu> Institemservicesus { get; set; }
        public virtual DbSet<Institemserviceview> Institemserviceviews { get; set; }
        public virtual DbSet<Institemsinstalmentrule> Institemsinstalmentrules { get; set; }
        public virtual DbSet<Institemspenaltyrule> Institemspenaltyrules { get; set; }
        public virtual DbSet<Institemstype> Institemstypes { get; set; }
        public virtual DbSet<Institemu> Institemus { get; set; }
        public virtual DbSet<Institemview> Institemviews { get; set; }
        public virtual DbSet<Institemviewmod> Institemviewmods { get; set; }
        public virtual DbSet<Instpenaltyrule> Instpenaltyrules { get; set; }
        public virtual DbSet<Instprogram> Instprograms { get; set; }
        public virtual DbSet<Instproramsview> Instproramsviews { get; set; }
        public virtual DbSet<Instsystemsspec> Instsystemsspecs { get; set; }
        public virtual DbSet<Integratorrelation> Integratorrelations { get; set; }
        public virtual DbSet<Integratortrnstype> Integratortrnstypes { get; set; }
        public virtual DbSet<IntgAcccodesDetail> IntgAcccodesDetails { get; set; }
        public virtual DbSet<IntgAcccodesMain> IntgAcccodesMains { get; set; }
        public virtual DbSet<IntgOrgVariable> IntgOrgVariables { get; set; }
        public virtual DbSet<Inttradespec> Inttradespecs { get; set; }
        public virtual DbSet<Irrigationemp> Irrigationemps { get; set; }
        public virtual DbSet<IssueStatus> IssueStatuses { get; set; }
        public virtual DbSet<Istransfer> Istransfers { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemChangePriceM> ItemChangePriceMs { get; set; }
        public virtual DbSet<ItemChangePriceO> ItemChangePriceOs { get; set; }
        public virtual DbSet<ItemDiscountO> ItemDiscountOs { get; set; }
        public virtual DbSet<Itembeforbyallstoreviewsum> Itembeforbyallstoreviewsums { get; set; }
        public virtual DbSet<ItemchangemStoreTrn> ItemchangemStoreTrns { get; set; }
        public virtual DbSet<Iteminbyallstoreview> Iteminbyallstoreviews { get; set; }
        public virtual DbSet<Iteminbyallstoreviewsum> Iteminbyallstoreviewsums { get; set; }
        public virtual DbSet<Iteminformation> Iteminformations { get; set; }
        public virtual DbSet<Iteminformationinit> Iteminformationinits { get; set; }
        public virtual DbSet<IteminformationinitMod> IteminformationinitMods { get; set; }
        public virtual DbSet<Itemoutbyallstoreview> Itemoutbyallstoreviews { get; set; }
        public virtual DbSet<Itemoutbyallstoreviewsum> Itemoutbyallstoreviewsums { get; set; }
        public virtual DbSet<Itempricedetail> Itempricedetails { get; set; }
        public virtual DbSet<Journalcode> Journalcodes { get; set; }
        public virtual DbSet<Journalcodesacc> Journalcodesaccs { get; set; }
        public virtual DbSet<Journalentriesdetail> Journalentriesdetails { get; set; }
        public virtual DbSet<Journalentriesdimension> Journalentriesdimensions { get; set; }
        public virtual DbSet<Journalentriesmain> Journalentriesmains { get; set; }
        public virtual DbSet<LgCategory> LgCategories { get; set; }
        public virtual DbSet<LgDescriptionsM> LgDescriptionsMs { get; set; }
        public virtual DbSet<LgDescriptionsO> LgDescriptionsOs { get; set; }
        public virtual DbSet<LgFinance> LgFinances { get; set; }
        public virtual DbSet<LgOpenCase> LgOpenCases { get; set; }
        public virtual DbSet<LgStatus> LgStatuses { get; set; }
        public virtual DbSet<LgTransaction> LgTransactions { get; set; }
        public virtual DbSet<LgTransactionEdit> LgTransactionEdits { get; set; }
        public virtual DbSet<LgType> LgTypes { get; set; }
        public virtual DbSet<MainCriterion> MainCriteria { get; set; }
        public virtual DbSet<MainType> MainTypes { get; set; }
        public virtual DbSet<MainTypeCodeSegmentation> MainTypeCodeSegmentations { get; set; }
        public virtual DbSet<MainTypeCodeSegmentation1> MainTypeCodeSegmentation1s { get; set; }
        public virtual DbSet<Maxcheckidhafza> Maxcheckidhafzas { get; set; }
        public virtual DbSet<Maxcheckidstamp> Maxcheckidstamps { get; set; }
        public virtual DbSet<Maxsaleformdocnum> Maxsaleformdocnums { get; set; }
        public virtual DbSet<Multydist> Multydists { get; set; }
        public virtual DbSet<MultydistDimension> MultydistDimensions { get; set; }
        public virtual DbSet<MultydistTemp> MultydistTemps { get; set; }
        public virtual DbSet<Multydistgrouptype> Multydistgrouptypes { get; set; }
        public virtual DbSet<Multydistspec> Multydistspecs { get; set; }
        public virtual DbSet<Multydistview> Multydistviews { get; set; }
        public virtual DbSet<Naturalaccount> Naturalaccounts { get; set; }
        public virtual DbSet<Nesmatestview> Nesmatestviews { get; set; }
        public virtual DbSet<Nesmatestview2> Nesmatestview2s { get; set; }
        public virtual DbSet<Page> Pages { get; set; }
        public virtual DbSet<PagesPermission> PagesPermissions { get; set; }
        public virtual DbSet<Paymenttype> Paymenttypes { get; set; }
        public virtual DbSet<Pbcatcol> Pbcatcols { get; set; }
        public virtual DbSet<Pbcatedt> Pbcatedts { get; set; }
        public virtual DbSet<Pbcatfmt> Pbcatfmts { get; set; }
        public virtual DbSet<Pbcattbl> Pbcattbls { get; set; }
        public virtual DbSet<Pbcatvld> Pbcatvlds { get; set; }
        public virtual DbSet<PenaltyCriticalDate> PenaltyCriticalDates { get; set; }
        public virtual DbSet<Perinstalmentgrossleftview> Perinstalmentgrossleftviews { get; set; }
        public virtual DbSet<Perinstalmentgrossleftview2> Perinstalmentgrossleftview2s { get; set; }
        public virtual DbSet<Perinstalmentgrossleftviewmod> Perinstalmentgrossleftviewmods { get; set; }
        public virtual DbSet<Period> Periods { get; set; }
        public virtual DbSet<Permissoin> Permissoins { get; set; }
        public virtual DbSet<Perrentinstalmentgrossleftview> Perrentinstalmentgrossleftviews { get; set; }
        public virtual DbSet<PortalCateg> PortalCategs { get; set; }
        public virtual DbSet<PortalParameterValue> PortalParameterValues { get; set; }
        public virtual DbSet<PortalReport> PortalReports { get; set; }
        public virtual DbSet<PortalReportparameter> PortalReportparameters { get; set; }
        public virtual DbSet<PortalUsercategory> PortalUsercategories { get; set; }
        public virtual DbSet<Postran> Postrans { get; set; }
        public virtual DbSet<Preference> Preferences { get; set; }
        public virtual DbSet<PreferencesValue> PreferencesValues { get; set; }
        public virtual DbSet<Preferenceview> Preferenceviews { get; set; }
        public virtual DbSet<PriceListCustomer> PriceListCustomers { get; set; }
        public virtual DbSet<PriceListCustomerO> PriceListCustomerOs { get; set; }
        public virtual DbSet<PriceListMaxQuantity> PriceListMaxQuantities { get; set; }
        public virtual DbSet<PriceListType> PriceListTypes { get; set; }
        public virtual DbSet<Printcheckscontrolsname> Printcheckscontrolsnames { get; set; }
        public virtual DbSet<Printcheckssetting> Printcheckssettings { get; set; }
        public virtual DbSet<Printcheckssettingdetail> Printcheckssettingdetails { get; set; }
        public virtual DbSet<Proceed> Proceeds { get; set; }
        public virtual DbSet<Producationformla> Producationformlas { get; set; }
        public virtual DbSet<Productformladetail> Productformladetails { get; set; }
        public virtual DbSet<Productstage> Productstages { get; set; }
        public virtual DbSet<Progprivilege> Progprivileges { get; set; }
        public virtual DbSet<Receiptpapersforinstalment> Receiptpapersforinstalments { get; set; }
        public virtual DbSet<Receiptpapersforinstalmentmod> Receiptpapersforinstalmentmods { get; set; }
        public virtual DbSet<Relayto> Relaytos { get; set; }
        public virtual DbSet<Rentadddeducreason> Rentadddeducreasons { get; set; }
        public virtual DbSet<Rentform> Rentforms { get; set; }
        public virtual DbSet<RentformFinance> RentformFinances { get; set; }
        public virtual DbSet<RentformFinanceView> RentformFinanceViews { get; set; }
        public virtual DbSet<RentformFinanceViewMod> RentformFinanceViewMods { get; set; }
        public virtual DbSet<RentformInstitemcomp> RentformInstitemcomps { get; set; }
        public virtual DbSet<RentformInstitemcompMod> RentformInstitemcompMods { get; set; }
        public virtual DbSet<RentformInstitemcompv> RentformInstitemcompvs { get; set; }
        public virtual DbSet<Rentformcompositeitem> Rentformcompositeitems { get; set; }
        public virtual DbSet<Rentformdocattachment> Rentformdocattachments { get; set; }
        public virtual DbSet<Rentformrenew> Rentformrenews { get; set; }
        public virtual DbSet<Rentformrenewdetail> Rentformrenewdetails { get; set; }
        public virtual DbSet<Rentinsatlementsadddeduc> Rentinsatlementsadddeducs { get; set; }
        public virtual DbSet<Rentinstalmentsm> Rentinstalmentsms { get; set; }
        public virtual DbSet<Rentinstalmentso> Rentinstalmentsos { get; set; }
        public virtual DbSet<Rentinstalmenttype> Rentinstalmenttypes { get; set; }
        public virtual DbSet<Rentperiod> Rentperiods { get; set; }
        public virtual DbSet<RepcatRepcolumn> RepcatRepcolumns { get; set; }
        public virtual DbSet<Reschedule> Reschedules { get; set; }
        public virtual DbSet<Reservationitem> Reservationitems { get; set; }
        public virtual DbSet<ReservedUnit> ReservedUnits { get; set; }
        public virtual DbSet<Reservedunitsview> Reservedunitsviews { get; set; }
        public virtual DbSet<Returnfordefaultitem> Returnfordefaultitems { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolesPage> RolesPages { get; set; }
        public virtual DbSet<Saleadddeducreason> Saleadddeducreasons { get; set; }
        public virtual DbSet<Saleform> Saleforms { get; set; }
        public virtual DbSet<SaleformAccept> SaleformAccepts { get; set; }
        public virtual DbSet<SaleformSumPaidIndate> SaleformSumPaidIndates { get; set; }
        public virtual DbSet<Saleformapplevel> Saleformapplevels { get; set; }
        public virtual DbSet<Saleformapproval> Saleformapprovals { get; set; }
        public virtual DbSet<Saleformattachmenttmp> Saleformattachmenttmps { get; set; }
        public virtual DbSet<Saleformattacnment> Saleformattacnments { get; set; }
        public virtual DbSet<SaleformattacnmentsMod> SaleformattacnmentsMods { get; set; }
        public virtual DbSet<Saleformdataview> Saleformdataviews { get; set; }
        public virtual DbSet<Saleformdeliverunit> Saleformdeliverunits { get; set; }
        public virtual DbSet<Saleformdocattachment> Saleformdocattachments { get; set; }
        public virtual DbSet<Saleformfeature> Saleformfeatures { get; set; }
        public virtual DbSet<Saleforminsprogram> Saleforminsprograms { get; set; }
        public virtual DbSet<Saleforminstalmentrule> Saleforminstalmentrules { get; set; }
        public virtual DbSet<Saleforminstalmentsm> Saleforminstalmentsms { get; set; }
        public virtual DbSet<Saleforminstpenaltyrule> Saleforminstpenaltyrules { get; set; }
        public virtual DbSet<Saleformreport> Saleformreports { get; set; }
        public virtual DbSet<Saleformservice> Saleformservices { get; set; }
        public virtual DbSet<Saleformsstatementview> Saleformsstatementviews { get; set; }
        public virtual DbSet<Saleformtype> Saleformtypes { get; set; }
        public virtual DbSet<Saleformview> Saleformviews { get; set; }
        public virtual DbSet<Saleformview1> Saleformviews1 { get; set; }
        public virtual DbSet<Saleformviewmod> Saleformviewmods { get; set; }
        public virtual DbSet<Saleformviewsmod> Saleformviewsmods { get; set; }
        public virtual DbSet<Saleinsatlementsadddeduc> Saleinsatlementsadddeducs { get; set; }
        public virtual DbSet<Saleinstalmentsm> Saleinstalmentsms { get; set; }
        public virtual DbSet<Saleinstalmentso> Saleinstalmentsos { get; set; }
        public virtual DbSet<Salerentcompositeitem> Salerentcompositeitems { get; set; }
        public virtual DbSet<Salerentinstattatchmentfeature> Salerentinstattatchmentfeatures { get; set; }
        public virtual DbSet<Salerentinstattatchmentservice> Salerentinstattatchmentservices { get; set; }
        public virtual DbSet<Salerentinstitem> Salerentinstitems { get; set; }
        public virtual DbSet<Salerentinstitemattatchment> Salerentinstitemattatchments { get; set; }
        public virtual DbSet<Salerentinstitemfeature> Salerentinstitemfeatures { get; set; }
        public virtual DbSet<Salerentinstitemproperty> Salerentinstitemproperties { get; set; }
        public virtual DbSet<Salerentinstitemservice> Salerentinstitemservices { get; set; }
        public virtual DbSet<SalesCommisionTemp> SalesCommisionTemps { get; set; }
        public virtual DbSet<SalesformviewTemp> SalesformviewTemps { get; set; }
        public virtual DbSet<Salesview> Salesviews { get; set; }
        public virtual DbSet<Salesview2> Salesview2s { get; set; }
        public virtual DbSet<SecControl> SecControls { get; set; }
        public virtual DbSet<SecPageDatum> SecPageData { get; set; }
        public virtual DbSet<SecPagesControl> SecPagesControls { get; set; }
        public virtual DbSet<SecRole> SecRoles { get; set; }
        public virtual DbSet<SecRolesOnPage> SecRolesOnPages { get; set; }
        public virtual DbSet<SecRolesOnPagesControl> SecRolesOnPagesControls { get; set; }
        public virtual DbSet<Security> Securities { get; set; }
        public virtual DbSet<SecurityApplication> SecurityApplications { get; set; }
        public virtual DbSet<SecurityField> SecurityFields { get; set; }
        public virtual DbSet<SecurityLevel> SecurityLevels { get; set; }
        public virtual DbSet<SecurityPermission> SecurityPermissions { get; set; }
        public virtual DbSet<SecurityRole> SecurityRoles { get; set; }
        public virtual DbSet<SecurityRolePermission> SecurityRolePermissions { get; set; }
        public virtual DbSet<SecurityUser> SecurityUsers { get; set; }
        public virtual DbSet<SecurityUserBranch> SecurityUserBranches { get; set; }
        public virtual DbSet<SecurityUserPrivilege> SecurityUserPrivileges { get; set; }
        public virtual DbSet<SecurityUserRole> SecurityUserRoles { get; set; }
        public virtual DbSet<SecurityUserTransType> SecurityUserTransTypes { get; set; }
        public virtual DbSet<Selectcheck> Selectchecks { get; set; }
        public virtual DbSet<SerialName> SerialNames { get; set; }
        public virtual DbSet<Services4initialRequest> Services4initialRequests { get; set; }
        public virtual DbSet<ServicesBenefit> ServicesBenefits { get; set; }
        public virtual DbSet<ServicesBillSummaryTemp> ServicesBillSummaryTemps { get; set; }
        public virtual DbSet<ServicesBillTemp> ServicesBillTemps { get; set; }
        public virtual DbSet<ServicesDeposit> ServicesDeposits { get; set; }
        public virtual DbSet<ServicesFinance> ServicesFinances { get; set; }
        public virtual DbSet<ServicesFine> ServicesFines { get; set; }
        public virtual DbSet<ServicesHold> ServicesHolds { get; set; }
        public virtual DbSet<ServicesInstitem> ServicesInstitems { get; set; }
        public virtual DbSet<ServicesInstitemServiceType> ServicesInstitemServiceTypes { get; set; }
        public virtual DbSet<ServicesInstitemView> ServicesInstitemViews { get; set; }
        public virtual DbSet<ServicesInstitemViewMod> ServicesInstitemViewMods { get; set; }
        public virtual DbSet<ServicesIntergrationsetting> ServicesIntergrationsettings { get; set; }
        public virtual DbSet<ServicesMeterRedingsTemp> ServicesMeterRedingsTemps { get; set; }
        public virtual DbSet<ServicesMetersReading> ServicesMetersReadings { get; set; }
        public virtual DbSet<ServicesPaymenRequest> ServicesPaymenRequests { get; set; }
        public virtual DbSet<ServicesPaymentRequest> ServicesPaymentRequests { get; set; }
        public virtual DbSet<ServicesPaymentRequestsm> ServicesPaymentRequestsms { get; set; }
        public virtual DbSet<ServicesPrice> ServicesPrices { get; set; }
        public virtual DbSet<ServicesRequestsView> ServicesRequestsViews { get; set; }
        public virtual DbSet<ServicesRequestsViewb> ServicesRequestsViewbs { get; set; }
        public virtual DbSet<ServicesRequestsmFine> ServicesRequestsmFines { get; set; }
        public virtual DbSet<ServicesRequestsmView> ServicesRequestsmViews { get; set; }
        public virtual DbSet<ServicesRequestsonunitsView> ServicesRequestsonunitsViews { get; set; }
        public virtual DbSet<ServicesType> ServicesTypes { get; set; }
        public virtual DbSet<Servicesdatesmonthlytmp> Servicesdatesmonthlytmps { get; set; }
        public virtual DbSet<Servicetrnstype> Servicetrnstypes { get; set; }
        public virtual DbSet<Servicetype> Servicetypes { get; set; }
        public virtual DbSet<Shipping> Shippings { get; set; }
        public virtual DbSet<ShippingSpec> ShippingSpecs { get; set; }
        public virtual DbSet<ShippingTemp> ShippingTemps { get; set; }
        public virtual DbSet<Shippingcotype> Shippingcotypes { get; set; }
        public virtual DbSet<Simaphore> Simaphores { get; set; }
        public virtual DbSet<Simplesaleformview> Simplesaleformviews { get; set; }
        public virtual DbSet<SlidesM> SlidesMs { get; set; }
        public virtual DbSet<SlidesO> SlidesOs { get; set; }
        public virtual DbSet<SlidesStaff> SlidesStaffs { get; set; }
        public virtual DbSet<Sperateinstalment> Sperateinstalments { get; set; }
        public virtual DbSet<Staffclass> Staffclasses { get; set; }
        public virtual DbSet<Staffcust> Staffcusts { get; set; }
        public virtual DbSet<Stafflevel> Stafflevels { get; set; }
        public virtual DbSet<Staffsalesview> Staffsalesviews { get; set; }
        public virtual DbSet<Staffsubclass> Staffsubclasses { get; set; }
        public virtual DbSet<Staffunit> Staffunits { get; set; }
        public virtual DbSet<Stage> Stages { get; set; }
        public virtual DbSet<StageCost> StageCosts { get; set; }
        public virtual DbSet<StageCostacc> StageCostaccs { get; set; }
        public virtual DbSet<StoreAllcode> StoreAllcodes { get; set; }
        public virtual DbSet<StoreAllcodesBegin> StoreAllcodesBegins { get; set; }
        public virtual DbSet<StoreAllsubcode> StoreAllsubcodes { get; set; }
        public virtual DbSet<StoreCustDeposit> StoreCustDeposits { get; set; }
        public virtual DbSet<StoreDepSpec> StoreDepSpecs { get; set; }
        public virtual DbSet<StoreDepSpecsDetail> StoreDepSpecsDetails { get; set; }
        public virtual DbSet<StoreInventoryM> StoreInventoryMs { get; set; }
        public virtual DbSet<StoreInventoryO> StoreInventoryOs { get; set; }
        public virtual DbSet<StoreInventoryView> StoreInventoryViews { get; set; }
        public virtual DbSet<StoreItem> StoreItems { get; set; }
        public virtual DbSet<StoreItemBranchPrice> StoreItemBranchPrices { get; set; }
        public virtual DbSet<StoreItemPrice> StoreItemPrices { get; set; }
        public virtual DbSet<StoreItemUnit> StoreItemUnits { get; set; }
        public virtual DbSet<StoreItemformUnit> StoreItemformUnits { get; set; }
        public virtual DbSet<StoreItemformsSpec> StoreItemformsSpecs { get; set; }
        public virtual DbSet<StoreItemsBal> StoreItemsBals { get; set; }
        public virtual DbSet<StoreItemsBalExp> StoreItemsBalExps { get; set; }
        public virtual DbSet<StoreItemsDocattachment> StoreItemsDocattachments { get; set; }
        public virtual DbSet<StoreItemsKind> StoreItemsKinds { get; set; }
        public virtual DbSet<StoreItemsSpec> StoreItemsSpecs { get; set; }
        public virtual DbSet<StoreItemsT> StoreItemsTs { get; set; }
        public virtual DbSet<StoreItemsingred> StoreItemsingreds { get; set; }
        public virtual DbSet<StoreSubCodeSpec> StoreSubCodeSpecs { get; set; }
        public virtual DbSet<StoreTrn> StoreTrns { get; set; }
        public virtual DbSet<StoreTrnsAccept> StoreTrnsAccepts { get; set; }
        public virtual DbSet<StoreTrnsCreation> StoreTrnsCreations { get; set; }
        public virtual DbSet<StoreTrnsCreationO> StoreTrnsCreationOs { get; set; }
        public virtual DbSet<StoreTrnsDep> StoreTrnsDeps { get; set; }
        public virtual DbSet<StoreTrnsDepDetail> StoreTrnsDepDetails { get; set; }
        public virtual DbSet<StoreTrnsDepDetailsTemp> StoreTrnsDepDetailsTemps { get; set; }
        public virtual DbSet<StoreTrnsDepTemp> StoreTrnsDepTemps { get; set; }
        public virtual DbSet<StoreTrnsExp> StoreTrnsExps { get; set; }
        public virtual DbSet<StoreTrnsExpTemp> StoreTrnsExpTemps { get; set; }
        public virtual DbSet<StoreTrnsKindDetail> StoreTrnsKindDetails { get; set; }
        public virtual DbSet<StoreTrnsKindSpec> StoreTrnsKindSpecs { get; set; }
        public virtual DbSet<StoreTrnsLc> StoreTrnsLcs { get; set; }
        public virtual DbSet<StoreTrnsLcDocument> StoreTrnsLcDocuments { get; set; }
        public virtual DbSet<StoreTrnsM> StoreTrnsMs { get; set; }
        public virtual DbSet<StoreTrnsMStage> StoreTrnsMStages { get; set; }
        public virtual DbSet<StoreTrnsMTemp> StoreTrnsMTemps { get; set; }
        public virtual DbSet<StoreTrnsO> StoreTrnsOs { get; set; }
        public virtual DbSet<StoreTrnsOStage> StoreTrnsOStages { get; set; }
        public virtual DbSet<StoreTrnsOTemp> StoreTrnsOTemps { get; set; }
        public virtual DbSet<StoreTrnsPrice> StoreTrnsPrices { get; set; }
        public virtual DbSet<StoreTrnsProducationformla> StoreTrnsProducationformlas { get; set; }
        public virtual DbSet<StoreTrnsfromtrn> StoreTrnsfromtrns { get; set; }
        public virtual DbSet<StoreTrnsoD> StoreTrnsoDs { get; set; }
        public virtual DbSet<StoreTrnsoDimendetailsTemp> StoreTrnsoDimendetailsTemps { get; set; }
        public virtual DbSet<StoreTrnsoDimensionsdetail> StoreTrnsoDimensionsdetails { get; set; }
        public virtual DbSet<StoreUnit> StoreUnits { get; set; }
        public virtual DbSet<Storeacceptenceview> Storeacceptenceviews { get; set; }
        public virtual DbSet<Storeallcodesattachment> Storeallcodesattachments { get; set; }
        public virtual DbSet<Storeallcodesview> Storeallcodesviews { get; set; }
        public virtual DbSet<Storecustdepositeview> Storecustdepositeviews { get; set; }
        public virtual DbSet<Storedsttype> Storedsttypes { get; set; }
        public virtual DbSet<Storefinancegrossview> Storefinancegrossviews { get; set; }
        public virtual DbSet<Storefinancegrossview2> Storefinancegrossview2s { get; set; }
        public virtual DbSet<Storeinvcreation> Storeinvcreations { get; set; }
        public virtual DbSet<Storeitemsallcode> Storeitemsallcodes { get; set; }
        public virtual DbSet<Storemextra> Storemextras { get; set; }
        public virtual DbSet<Storeminttrade> Storeminttrades { get; set; }
        public virtual DbSet<Storerectrnsdepdettemp> Storerectrnsdepdettemps { get; set; }
        public virtual DbSet<Storespecapp> Storespecapps { get; set; }
        public virtual DbSet<Storetrnsextcor> Storetrnsextcors { get; set; }
        public virtual DbSet<Storetrnsextexp> Storetrnsextexps { get; set; }
        public virtual DbSet<Storetrnsextra> Storetrnsextras { get; set; }
        public virtual DbSet<StoretrnsmInstalmento> StoretrnsmInstalmentos { get; set; }
        public virtual DbSet<StoretrnsmInstalmentsm> StoretrnsmInstalmentsms { get; set; }
        public virtual DbSet<Storetrnsmattachment> Storetrnsmattachments { get; set; }
        public virtual DbSet<Storetrnsmcommittee> Storetrnsmcommittees { get; set; }
        public virtual DbSet<Storetrnsmextexp> Storetrnsmextexps { get; set; }
        public virtual DbSet<Storetrnsmpayspec> Storetrnsmpayspecs { get; set; }
        public virtual DbSet<SubDist> SubDists { get; set; }
        public virtual DbSet<SumInstInstalment> SumInstInstalments { get; set; }
        public virtual DbSet<Sumadditiontoinstalment> Sumadditiontoinstalments { get; set; }
        public virtual DbSet<Sumdiscountstoinstalment> Sumdiscountstoinstalments { get; set; }
        public virtual DbSet<Sumfinstalmentswoutreschedual> Sumfinstalmentswoutrescheduals { get; set; }
        public virtual DbSet<Sumfinstalmentswreschedual> Sumfinstalmentswrescheduals { get; set; }
        public virtual DbSet<Sumitemoutbyallstoreview> Sumitemoutbyallstoreviews { get; set; }
        public virtual DbSet<Sumofcompanyproceed> Sumofcompanyproceeds { get; set; }
        public virtual DbSet<Sumofeachinst> Sumofeachinsts { get; set; }
        public virtual DbSet<Sumofinst> Sumofinsts { get; set; }
        public virtual DbSet<SuppliersaleanalbyitemMod> SuppliersaleanalbyitemMods { get; set; }
        public virtual DbSet<Suppliersalesanalysisbyitem> Suppliersalesanalysisbyitems { get; set; }
        public virtual DbSet<Tax41view> Tax41views { get; set; }
        public virtual DbSet<Tempindividualtable> Tempindividualtables { get; set; }
        public virtual DbSet<Temptable> Temptables { get; set; }
        public virtual DbSet<TermsRequiredDocument> TermsRequiredDocuments { get; set; }
        public virtual DbSet<Termsofinstaintemsale> Termsofinstaintemsales { get; set; }
        public virtual DbSet<Tracing> Tracings { get; set; }
        public virtual DbSet<TrnsExpensessView> TrnsExpensessViews { get; set; }
        public virtual DbSet<TrnsPrintSpec> TrnsPrintSpecs { get; set; }
        public virtual DbSet<TrnsPrintSpecView> TrnsPrintSpecViews { get; set; }
        public virtual DbSet<TrnsPrintSpecdetail> TrnsPrintSpecdetails { get; set; }
        public virtual DbSet<TrnsUserAccept> TrnsUserAccepts { get; set; }
        public virtual DbSet<Trnsinfo> Trnsinfos { get; set; }
        public virtual DbSet<Trnsinfocr> Trnsinfocrs { get; set; }
        public virtual DbSet<TtItem1234> TtItem1234s { get; set; }
        public virtual DbSet<Tvpenalty1> Tvpenalty1s { get; set; }
        public virtual DbSet<UniqueincheckHistoryEffect> UniqueincheckHistoryEffects { get; set; }
        public virtual DbSet<Unitinstalment> Unitinstalments { get; set; }
        public virtual DbSet<Unitstatus> Unitstatuses { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Userapp> Userapps { get; set; }
        public virtual DbSet<Usercreatedreport> Usercreatedreports { get; set; }
        public virtual DbSet<Usercurrency> Usercurrencies { get; set; }
        public virtual DbSet<Usergroup> Usergroups { get; set; }
        public virtual DbSet<Userinstitem> Userinstitems { get; set; }
        public virtual DbSet<Userperiod> Userperiods { get; set; }
        public virtual DbSet<Userreport> Userreports { get; set; }
        public virtual DbSet<Userreportdatasource> Userreportdatasources { get; set; }
        public virtual DbSet<Userreportdatasourceo> Userreportdatasourceos { get; set; }
        public virtual DbSet<Userreportsmenue> Userreportsmenues { get; set; }
        public virtual DbSet<UsersRole> UsersRoles { get; set; }
        public virtual DbSet<UsersStoreAllcode> UsersStoreAllcodes { get; set; }
        public virtual DbSet<Userstran> Userstrans { get; set; }
        public virtual DbSet<Usertransctrl> Usertransctrls { get; set; }
        public virtual DbSet<VServicesInstitemReadingsrt> VServicesInstitemReadingsrts { get; set; }
        public virtual DbSet<VServicesdatesmonthly> VServicesdatesmonthlies { get; set; }
        public virtual DbSet<VServicesinvoicesdetail> VServicesinvoicesdetails { get; set; }
        public virtual DbSet<Vallinstpayment> Vallinstpayments { get; set; }
        public virtual DbSet<Vcashfinancialtransaction> Vcashfinancialtransactions { get; set; }
        public virtual DbSet<VcashfinancialtransactionsMod1> VcashfinancialtransactionsMods1 { get; set; }
        public virtual DbSet<Vcashfinancialtransactionsmod> Vcashfinancialtransactionsmods { get; set; }
        public virtual DbSet<Vcashfinancialtransactionsnew> Vcashfinancialtransactionsnews { get; set; }
        public virtual DbSet<Vcashinstpayment1> Vcashinstpayment1s { get; set; }
        public virtual DbSet<Vcheckcountpermonth> Vcheckcountpermonths { get; set; }
        public virtual DbSet<Vcheckcredithistory> Vcheckcredithistories { get; set; }
        public virtual DbSet<Vcheckcredithistory2> Vcheckcredithistory2s { get; set; }
        public virtual DbSet<VcheckcredithistoryMod> VcheckcredithistoryMods { get; set; }
        public virtual DbSet<Vchecklistpersave> Vchecklistpersaves { get; set; }
        public virtual DbSet<Vcheckspermonthall> Vcheckspermonthalls { get; set; }
        public virtual DbSet<Vcodepartsfilter> Vcodepartsfilters { get; set; }
        public virtual DbSet<Vdependencyquantity> Vdependencyquantities { get; set; }
        public virtual DbSet<Vdependencytotal> Vdependencytotals { get; set; }
        public virtual DbSet<Vfinancialtransaction> Vfinancialtransactions { get; set; }
        public virtual DbSet<Vgetinstprogram> Vgetinstprograms { get; set; }
        public virtual DbSet<ViewCheckrecieved> ViewCheckrecieveds { get; set; }
        public virtual DbSet<Viewalltrnsaction> Viewalltrnsactions { get; set; }
        public virtual DbSet<Viewsaleforminstallment> Viewsaleforminstallments { get; set; }
        public virtual DbSet<Vinstcollectedcheck> Vinstcollectedchecks { get; set; }
        public virtual DbSet<Vinvcodedetailsinformation> Vinvcodedetailsinformations { get; set; }
        public virtual DbSet<Vinvtransactiondetail> Vinvtransactiondetails { get; set; }
        public virtual DbSet<VinvtransactiondetailsMod> VinvtransactiondetailsMods { get; set; }
        public virtual DbSet<VinvtransactiondetailsMod2> VinvtransactiondetailsMod2s { get; set; }
        public virtual DbSet<Vinvtransactionlist> Vinvtransactionlists { get; set; }
        public virtual DbSet<Vpenalty1> Vpenalty1s { get; set; }
        public virtual DbSet<VpenaltyDetail> VpenaltyDetails { get; set; }
        public virtual DbSet<VpenaltyEid> VpenaltyEids { get; set; }
        public virtual DbSet<VpenaltyIndate> VpenaltyIndates { get; set; }
        public virtual DbSet<VpenaltyIndateFinal> VpenaltyIndateFinals { get; set; }
        public virtual DbSet<VpenaltyIndateFinalIndate> VpenaltyIndateFinalIndates { get; set; }
        public virtual DbSet<Vsaleforminstalments1> Vsaleforminstalments1s { get; set; }
        public virtual DbSet<Vstoretransactionsdetail> Vstoretransactionsdetails { get; set; }
        public virtual DbSet<Vtransactionhistory> Vtransactionhistories { get; set; }
        public virtual DbSet<VtransactionhistoryMod> VtransactionhistoryMods { get; set; }
        public virtual DbSet<Vtransactionquantity> Vtransactionquantities { get; set; }
        public virtual DbSet<Xtempdimension> Xtempdimensions { get; set; }
        public virtual DbSet<Xtempindividualtable> Xtempindividualtables { get; set; }
        public virtual DbSet<Xxxx> Xxxxes { get; set; }
        public virtual DbSet<Xxxx1> Xxxx1s { get; set; }
        public virtual DbSet<Xxyy> Xxyys { get; set; }
        public virtual DbSet<Yyyy> Yyyys { get; set; }
        public virtual DbSet<Zeft33> Zeft33s { get; set; }
        public virtual DbSet<staff> staff { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseLazyLoadingProxies().ConfigureWarnings(warnings => warnings.Ignore(CoreEventId.InvalidIncludePathError));
                optionsBuilder.UseOracle();
                //optionsBuilder.UseOracle("User Id=AGROTEST;Password=AGROTEST;Data Source=10.8.2.154/DOTNET.lehaa.local;Connection Timeout=0;min pool size=0;connection lifetime=18000;PERSIST SECURITY INFO=True;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasDefaultSchema("AGROTEST");

            modelBuilder.Entity<AcceptInFinancetrn>(entity =>
            {
                entity.ToTable("ACCEPT_IN_FINANCETRNS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AcceptId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCEPT_ID");

                entity.Property(e => e.Acceptdate)
                    .HasColumnType("DATE")
                    .HasColumnName("ACCEPTDATE");

                entity.Property(e => e.IsAccepted)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IS_ACCEPTED");

                entity.Property(e => e.Reason)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("REASON");

                entity.Property(e => e.TrnsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_ID");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("USER_ID");

                entity.HasOne(d => d.Accept)
                    .WithMany(p => p.AcceptInFinancetrns)
                    .HasForeignKey(d => d.AcceptId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ACCEPT_IN_FINANCETRNS_R02");

                entity.HasOne(d => d.Trns)
                    .WithMany(p => p.AcceptInFinancetrns)
                    .HasForeignKey(d => d.TrnsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ACCEPT_IN_FINANCETRNS_R01");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AcceptInFinancetrns)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("ACCEPT_IN_FINANCETRNS_R03");
            });

            modelBuilder.Entity<AcceptInTrn>(entity =>
            {
                entity.ToTable("ACCEPT_IN_TRNS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AcceptId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCEPT_ID");

                entity.Property(e => e.Acceptdate)
                    .HasColumnType("DATE")
                    .HasColumnName("ACCEPTDATE");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.IsAccepted)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IS_ACCEPTED");

                entity.Property(e => e.Reason)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("REASON");

                entity.Property(e => e.TrnsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_ID");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("USER_ID");

                entity.HasOne(d => d.Accept)
                    .WithMany(p => p.AcceptInTrns)
                    .HasForeignKey(d => d.AcceptId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ACCEPT_IN_TRNS_R02");

                entity.HasOne(d => d.Trns)
                    .WithMany(p => p.AcceptInTrns)
                    .HasForeignKey(d => d.TrnsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ACCEPT_IN_TRNS_R01");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AcceptInTrns)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("ACCEPT_IN_TRNS_R03");
            });

            modelBuilder.Entity<AcceptInTrnsTemp>(entity =>
            {
                entity.ToTable("ACCEPT_IN_TRNS_TEMP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.AcceptId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCEPT_ID");

                entity.Property(e => e.Acceptdate)
                    .HasColumnType("DATE")
                    .HasColumnName("ACCEPTDATE");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1\n");

                entity.Property(e => e.IsAccepted)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IS_ACCEPTED");

                entity.Property(e => e.Reason)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("REASON");

                entity.Property(e => e.Rowstate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROWSTATE");

                entity.Property(e => e.TrnsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_ID");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("USER_ID");

                entity.HasOne(d => d.Accept)
                    .WithMany(p => p.AcceptInTrnsTemps)
                    .HasForeignKey(d => d.AcceptId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ACCEPT_IN_TRNS_TMP_R02");

                entity.HasOne(d => d.Trns)
                    .WithMany(p => p.AcceptInTrnsTemps)
                    .HasForeignKey(d => d.TrnsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ACCEPT_IN_TRNS_TMP_R01");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AcceptInTrnsTemps)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("ACCEPT_IN_TRNS_TMP_R03");
            });

            modelBuilder.Entity<AcceptInsaleform>(entity =>
            {
                entity.ToTable("ACCEPT_INSALEFORM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Acceptdate)
                    .HasColumnType("DATE")
                    .HasColumnName("ACCEPTDATE");

                entity.Property(e => e.Isaccepted)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ISACCEPTED");

                entity.Property(e => e.SaleformAcceptId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORM_ACCEPT_ID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.SaleformAccept)
                    .WithMany(p => p.AcceptInsaleforms)
                    .HasForeignKey(d => d.SaleformAcceptId)
                    .HasConstraintName("ACCEPT_INSALEFORM_R01");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AcceptInsaleforms)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("ACCEPT_INSALEFORM_R02");
            });

            modelBuilder.Entity<Acceptancesaleformview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ACCEPTANCESALEFORMVIEW");

                entity.Property(e => e.Branchaname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHANAME");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Customerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERENAME");

                entity.Property(e => e.Customername)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Estatue)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ESTATUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Formstatustypes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMSTATUSTYPES");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Statue)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("STATUE")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Acclevel>(entity =>
            {
                entity.ToTable("ACCLEVELS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Length)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LENGTH");

                entity.Property(e => e.Levelno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LEVELNO");
            });

            modelBuilder.Entity<Account>(entity =>
            {
                entity.ToTable("ACCOUNT");

                entity.Property(e => e.Accountid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCOUNTID");

                entity.Property(e => e.Accountnatureid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCOUNTNATUREID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Datecreated)
                    .HasColumnType("DATE")
                    .HasColumnName("DATECREATED")
                    .HasDefaultValueSql("sysdate");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Finalmiagrationid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINALMIAGRATIONID");

                entity.Property(e => e.Intialbalancecredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INTIALBALANCECREDIT");

                entity.Property(e => e.Intialbalancedebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INTIALBALANCEDEBIT");

                entity.Property(e => e.Levelnumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LEVELNUMBER");

                entity.Property(e => e.Linkcostcenter)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LINKCOSTCENTER");

                entity.Property(e => e.Parentid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PARENTID");

                entity.Property(e => e.Sepcid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SEPCID");

                entity.HasOne(d => d.Accountnature)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.Accountnatureid)
                    .HasConstraintName("ACCOUNT_FK2");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("ACCOUNT_FK4");

                entity.HasOne(d => d.Finalmiagration)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.Finalmiagrationid)
                    .HasConstraintName("ACCOUNT_FK3");

                entity.HasOne(d => d.Sepc)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.Sepcid)
                    .HasConstraintName("ACCOUNT_FK1");
            });

            modelBuilder.Entity<Account1234>(entity =>
            {
                entity.HasKey(e => e.Ser)
                    .HasName("SYS_C0017485");

                entity.ToTable("ACCOUNT_1234");

                entity.Property(e => e.Ser)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SER");

                entity.Property(e => e.Acccode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACCCODE");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_ID");

                entity.Property(e => e.CreditVal)
                    .HasColumnType("NUMBER(20,5)")
                    .HasColumnName("CREDIT_VAL");

                entity.Property(e => e.DebitVal)
                    .HasColumnType("NUMBER(20,5)")
                    .HasColumnName("DEBIT_VAL");
            });

            modelBuilder.Entity<AccountBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ACCOUNT_BALANCE");

                entity.Property(e => e.Acclevelsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCLEVELSID");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_CODE");

                entity.Property(e => e.AccountId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNT_ID");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.InitialCredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INITIAL_CREDIT");

                entity.Property(e => e.InitialDebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INITIAL_DEBIT");

                entity.Property(e => e.LeafCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LEAF_CODE");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");
            });

            modelBuilder.Entity<AccountOwnValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ACCOUNT_OWN_VALUE");

                entity.Property(e => e.Accounttreeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTTREEID");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENTRYDATE");

                entity.Property(e => e.Isdetailedaccount)
                    .HasPrecision(1)
                    .HasColumnName("ISDETAILEDACCOUNT");

                entity.Property(e => e.Journalentrymainid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOURNALENTRYMAINID");

                entity.Property(e => e.Journalentrytypeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOURNALENTRYTYPEID");

                entity.Property(e => e.Parentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PARENTID");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");
            });

            modelBuilder.Entity<Accountingentry>(entity =>
            {
                entity.HasKey(e => e.Entryid)
                    .HasName("ACCOUNTINGENTRY_PK");

                entity.ToTable("ACCOUNTINGENTRY");

                entity.Property(e => e.Entryid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ENTRYID");

                entity.Property(e => e.Analyticalnumberid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ANALYTICALNUMBERID");

                entity.Property(e => e.Aremarks)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AREMARKS");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENTRYDATE");

                entity.Property(e => e.Entrynumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ENTRYNUMBER");

                entity.Property(e => e.Entrytypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ENTRYTYPEID");

                entity.Property(e => e.Eremarks)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EREMARKS");

                entity.Property(e => e.Recordnumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RECORDNUMBER");

                entity.Property(e => e.Transactionnumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSACTIONNUMBER");

                entity.HasOne(d => d.Analyticalnumber)
                    .WithMany(p => p.Accountingentries)
                    .HasForeignKey(d => d.Analyticalnumberid)
                    .HasConstraintName("ACCOUNTINGENTRY_FK2");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Accountingentries)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("ACCOUNTINGENTRY_FK3");

                entity.HasOne(d => d.Entrytype)
                    .WithMany(p => p.Accountingentries)
                    .HasForeignKey(d => d.Entrytypeid)
                    .HasConstraintName("ACCOUNTINGENTRY_FK1");
            });

            modelBuilder.Entity<Accountingentrydetail>(entity =>
            {
                entity.HasKey(e => e.Accountingentrydetailsid)
                    .HasName("ACCOUNTINGENTRYDETAILS_PK");

                entity.ToTable("ACCOUNTINGENTRYDETAILS");

                entity.Property(e => e.Accountingentrydetailsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCOUNTINGENTRYDETAILSID");

                entity.Property(e => e.Accountid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCOUNTID");

                entity.Property(e => e.Aremarks)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AREMARKS");

                entity.Property(e => e.Costcenterid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("COSTCENTERID");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Entryid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ENTRYID");

                entity.Property(e => e.Eremarks)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EREMARKS");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Accountingentrydetails)
                    .HasForeignKey(d => d.Accountid)
                    .HasConstraintName("ACCOUNTINGENTRYDETAILS_FK2");

                entity.HasOne(d => d.Costcenter)
                    .WithMany(p => p.Accountingentrydetails)
                    .HasForeignKey(d => d.Costcenterid)
                    .HasConstraintName("ACCOUNTINGENTRYDETAILS_FK3");

                entity.HasOne(d => d.Entry)
                    .WithMany(p => p.Accountingentrydetails)
                    .HasForeignKey(d => d.Entryid)
                    .HasConstraintName("ACCOUNTINGENTRYDETAILS_FK1");
            });

            modelBuilder.Entity<Accountnature>(entity =>
            {
                entity.ToTable("ACCOUNTNATURE");

                entity.Property(e => e.Accountnatureid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCOUNTNATUREID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Accountstree>(entity =>
            {
                entity.ToTable("ACCOUNTSTREE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Acclevelsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCLEVELSID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Dimensionoptionid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONOPTIONID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Isdetailedaccount)
                    .HasPrecision(1)
                    .HasColumnName("ISDETAILEDACCOUNT");

                entity.Property(e => e.Islastmainaccount)
                    .HasPrecision(1)
                    .HasColumnName("ISLASTMAINACCOUNT");

                entity.Property(e => e.Naturalid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NATURALID");

                entity.Property(e => e.Openingdate)
                    .HasColumnType("DATE")
                    .HasColumnName("OPENINGDATE");

                entity.Property(e => e.Parentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PARENTID");

                entity.Property(e => e.Rate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RATE");

                entity.Property(e => e.Relaytoid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RELAYTOID");

                entity.HasOne(d => d.Acclevels)
                    .WithMany(p => p.Accountstrees)
                    .HasForeignKey(d => d.Acclevelsid)
                    .HasConstraintName("ACCOUNTSTREE_FK3");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Accountstrees)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("ACCOUNTSTREE_FK1");

                entity.HasOne(d => d.Dimensionoption)
                    .WithMany(p => p.Accountstrees)
                    .HasForeignKey(d => d.Dimensionoptionid)
                    .HasConstraintName("ACCOUNTSTREE_FK4");

                entity.HasOne(d => d.Natural)
                    .WithMany(p => p.Accountstrees)
                    .HasForeignKey(d => d.Naturalid)
                    .HasConstraintName("ACCOUNTSTREE_FK6");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.Parentid)
                    .HasConstraintName("ACCOUNTSTREE_FK2");

                entity.HasOne(d => d.Relayto)
                    .WithMany(p => p.Accountstrees)
                    .HasForeignKey(d => d.Relaytoid)
                    .HasConstraintName("ACCOUNTSTREE_FK5");
            });

            modelBuilder.Entity<Accsy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ACCSYS");

                entity.HasIndex(e => e.RowNo, "ACCSYS_INDEX_NEW");

                entity.Property(e => e.AccSerialType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACC_SERIAL_TYPE");

                entity.Property(e => e.Arbahvalue)
                    .HasColumnType("NUMBER(14,4)")
                    .HasColumnName("ARBAHVALUE");

                entity.Property(e => e.AutoSysdate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AUTO_SYSDATE");

                entity.Property(e => e.Begindate)
                    .HasColumnType("DATE")
                    .HasColumnName("BEGINDATE");

                entity.Property(e => e.BudgetAlert)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BUDGET_ALERT")
                    .IsFixedLength(true);

                entity.Property(e => e.CancelPost)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CANCEL_POST");

                entity.Property(e => e.CheckDateType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHECK_DATE_TYPE");

                entity.Property(e => e.CheckEnteredDate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHECK_ENTERED_DATE");

                entity.Property(e => e.Close)
                    .HasPrecision(10)
                    .HasColumnName("CLOSE");

                entity.Property(e => e.CloseTime)
                    .HasPrecision(3)
                    .HasColumnName("CLOSE_TIME");

                entity.Property(e => e.Closing)
                    .HasPrecision(4)
                    .HasColumnName("CLOSING");

                entity.Property(e => e.Closing1)
                    .HasPrecision(4)
                    .HasColumnName("closing");

                entity.Property(e => e.Compcode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("COMPCODE");

                entity.Property(e => e.Consoldate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CONSOLDATE");

                entity.Property(e => e.CostAl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("COST_AL");

                entity.Property(e => e.Costcheck)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("COSTCHECK");

                entity.Property(e => e.Costlevel1)
                    .HasPrecision(1)
                    .HasColumnName("COSTLEVEL1");

                entity.Property(e => e.Costlevel2)
                    .HasPrecision(1)
                    .HasColumnName("COSTLEVEL2");

                entity.Property(e => e.Costlevel3)
                    .HasPrecision(1)
                    .HasColumnName("COSTLEVEL3");

                entity.Property(e => e.Costlevel4)
                    .HasPrecision(1)
                    .HasColumnName("COSTLEVEL4");

                entity.Property(e => e.Costlevel5)
                    .HasPrecision(1)
                    .HasColumnName("COSTLEVEL5");

                entity.Property(e => e.Costlevel6)
                    .HasPrecision(1)
                    .HasColumnName("COSTLEVEL6");

                entity.Property(e => e.Costlevel7)
                    .HasPrecision(1)
                    .HasColumnName("COSTLEVEL7");

                entity.Property(e => e.Costlevel8)
                    .HasPrecision(1)
                    .HasColumnName("COSTLEVEL8");

                entity.Property(e => e.Costlevel9)
                    .HasPrecision(1)
                    .HasColumnName("COSTLEVEL9");

                entity.Property(e => e.Cugoodsbal)
                    .HasColumnType("NUMBER(14,4)")
                    .HasColumnName("CUGOODSBAL");

                entity.Property(e => e.CurrDataPath)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("CURR_DATA_PATH");

                entity.Property(e => e.Currnexist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CURRNEXIST");

                entity.Property(e => e.Custaddress)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CUSTADDRESS");

                entity.Property(e => e.Custname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTNAME");

                entity.Property(e => e.Cuyear)
                    .HasPrecision(4)
                    .HasColumnName("CUYEAR");

                entity.Property(e => e.DailySerialType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DAILY_SERIAL_TYPE");

                entity.Property(e => e.Enddate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.Govyear)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GOVYEAR");

                entity.Property(e => e.Groupp)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GROUPP");

                entity.Property(e => e.HelpType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HELP_TYPE");

                entity.Property(e => e.HoldingComp)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("HOLDING_COMP");

                entity.Property(e => e.Indrctcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INDRCTCODE");

                entity.Property(e => e.Initno)
                    .HasPrecision(2)
                    .HasColumnName("INITNO");

                entity.Property(e => e.IsCostForAccount)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_COST_FOR_ACCOUNT");

                entity.Property(e => e.LatinCustname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("LATIN_CUSTNAME");

                entity.Property(e => e.Lcmodule)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LCMODULE");

                entity.Property(e => e.Lcpath)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("LCPATH");

                entity.Property(e => e.Level1)
                    .HasPrecision(1)
                    .HasColumnName("LEVEL1");

                entity.Property(e => e.Level10)
                    .HasPrecision(1)
                    .HasColumnName("LEVEL10");

                entity.Property(e => e.Level11)
                    .HasPrecision(1)
                    .HasColumnName("LEVEL11");

                entity.Property(e => e.Level2)
                    .HasPrecision(1)
                    .HasColumnName("LEVEL2");

                entity.Property(e => e.Level3)
                    .HasPrecision(1)
                    .HasColumnName("LEVEL3");

                entity.Property(e => e.Level4)
                    .HasPrecision(1)
                    .HasColumnName("LEVEL4");

                entity.Property(e => e.Level5)
                    .HasPrecision(1)
                    .HasColumnName("LEVEL5");

                entity.Property(e => e.Level6)
                    .HasPrecision(1)
                    .HasColumnName("LEVEL6");

                entity.Property(e => e.Level7)
                    .HasPrecision(1)
                    .HasColumnName("LEVEL7");

                entity.Property(e => e.Level8)
                    .HasPrecision(1)
                    .HasColumnName("LEVEL8");

                entity.Property(e => e.Level9)
                    .HasPrecision(1)
                    .HasColumnName("LEVEL9");

                entity.Property(e => e.Mainglpath)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("MAINGLPATH");

                entity.Property(e => e.MaxEnteredDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MAX_ENTERED_DATE");

                entity.Property(e => e.MinEnteredDate)
                    .HasColumnType("DATE")
                    .HasColumnName("MIN_ENTERED_DATE");

                entity.Property(e => e.Mizdate)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("MIZDATE");

                entity.Property(e => e.ModifyCurrnRate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MODIFY_CURRN_RATE");

                entity.Property(e => e.MultiCostCenter)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MULTI_COST_CENTER");

                entity.Property(e => e.MultiCostGoods)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MULTI_COST_GOODS");

                entity.Property(e => e.MutagraValue)
                    .HasColumnType("NUMBER(14,4)")
                    .HasColumnName("MUTAGRA_VALUE");

                entity.Property(e => e.Nocostlvl)
                    .HasPrecision(1)
                    .HasColumnName("NOCOSTLVL");

                entity.Property(e => e.Nooflevel)
                    .HasPrecision(2)
                    .HasColumnName("NOOFLEVEL");

                entity.Property(e => e.Noprojlvl)
                    .HasPrecision(1)
                    .HasColumnName("NOPROJLVL");

                entity.Property(e => e.NumDigits)
                    .HasPrecision(1)
                    .HasColumnName("NUM_DIGITS");

                entity.Property(e => e.Numu)
                    .HasPrecision(10)
                    .HasColumnName("NUMU");

                entity.Property(e => e.OpenSheet)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OPEN_SHEET");

                entity.Property(e => e.Opgoodsbal)
                    .HasColumnType("NUMBER(14,4)")
                    .HasColumnName("OPGOODSBAL");

                entity.Property(e => e.OtherGlUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OTHER_GL_USER");

                entity.Property(e => e.Posttype)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("POSTTYPE");

                entity.Property(e => e.PrintAcctrnsTotal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRINT_ACCTRNS_TOTAL");

                entity.Property(e => e.Projlevel1)
                    .HasPrecision(1)
                    .HasColumnName("PROJLEVEL1");

                entity.Property(e => e.Projlevel2)
                    .HasPrecision(1)
                    .HasColumnName("PROJLEVEL2");

                entity.Property(e => e.Projlevel3)
                    .HasPrecision(1)
                    .HasColumnName("PROJLEVEL3");

                entity.Property(e => e.Projlevel4)
                    .HasPrecision(1)
                    .HasColumnName("PROJLEVEL4");

                entity.Property(e => e.Projlevel5)
                    .HasPrecision(1)
                    .HasColumnName("PROJLEVEL5");

                entity.Property(e => e.Projlevel6)
                    .HasPrecision(1)
                    .HasColumnName("PROJLEVEL6");

                entity.Property(e => e.Projlevel7)
                    .HasPrecision(1)
                    .HasColumnName("PROJLEVEL7");

                entity.Property(e => e.Projlevel8)
                    .HasPrecision(1)
                    .HasColumnName("PROJLEVEL8");

                entity.Property(e => e.Projlevel9)
                    .HasPrecision(1)
                    .HasColumnName("PROJLEVEL9");

                entity.Property(e => e.Prvarbah)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PRVARBAH");

                entity.Property(e => e.PrvyearDataPath)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("PRVYEAR_DATA_PATH");

                entity.Property(e => e.Rlang)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RLANG");

                entity.Property(e => e.RowNo)
                    .HasPrecision(1)
                    .HasColumnName("ROW_NO");

                entity.Property(e => e.Savinguser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SAVINGUSER");

                entity.Property(e => e.SecCurrnArbahvalue)
                    .HasColumnType("NUMBER(14,4)")
                    .HasColumnName("SEC_CURRN_ARBAHVALUE");

                entity.Property(e => e.SecCurrnCugoodsbal)
                    .HasColumnType("NUMBER(14,4)")
                    .HasColumnName("SEC_CURRN_CUGOODSBAL");

                entity.Property(e => e.SecCurrnMutagraValue)
                    .HasColumnType("NUMBER(14,4)")
                    .HasColumnName("SEC_CURRN_MUTAGRA_VALUE");

                entity.Property(e => e.SecCurrnOpgoodsbal)
                    .HasColumnType("NUMBER(14,4)")
                    .HasColumnName("SEC_CURRN_OPGOODSBAL");

                entity.Property(e => e.SecondCurrency)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SECOND_CURRENCY");

                entity.Property(e => e.Sepexist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SEPEXIST");

                entity.Property(e => e.SerialMonth)
                    .HasPrecision(1)
                    .HasColumnName("SERIAL_MONTH");

                entity.Property(e => e.SheetForm)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SHEET_FORM");

                entity.Property(e => e.ShowFixedAssets)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHOW_FIXED_ASSETS");

                entity.Property(e => e.ShowMultiAgent)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHOW_MULTI_AGENT");

                entity.Property(e => e.ShowStopManual)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHOW_STOP_MANUAL");

                entity.Property(e => e.Showentrycopy)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHOWENTRYCOPY");

                entity.Property(e => e.StUser)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ST_USER");

                entity.Property(e => e.Startacctrnsm)
                    .HasPrecision(8)
                    .HasColumnName("STARTACCTRNSM");

                entity.Property(e => e.Startdate)
                    .HasColumnType("DATE")
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.StrBegindate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STR_BEGINDATE");

                entity.Property(e => e.StrEnddate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STR_ENDDATE");

                entity.Property(e => e.StrMaxEnteredDate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STR_MAX_ENTERED_DATE");

                entity.Property(e => e.StrMinEnteredDate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STR_MIN_ENTERED_DATE");

                entity.Property(e => e.StrStartdate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STR_STARTDATE");

                entity.Property(e => e.StrSystemDate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STR_SYSTEM_DATE");

                entity.Property(e => e.Sysname)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SYSNAME");

                entity.Property(e => e.SystemDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SYSTEM_DATE");

                entity.Property(e => e.Taxdir)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("TAXDIR");

                entity.Property(e => e.Taxmodule)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TAXMODULE");

                entity.Property(e => e.Totcostlen)
                    .HasPrecision(2)
                    .HasColumnName("TOTCOSTLEN");

                entity.Property(e => e.Totlength)
                    .HasPrecision(2)
                    .HasColumnName("TOTLENGTH");

                entity.Property(e => e.Totprojlen)
                    .HasPrecision(2)
                    .HasColumnName("TOTPROJLEN");

                entity.Property(e => e.TransfereValue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFERE_VALUE");

                entity.Property(e => e.TrnsSignatures)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TRNS_SIGNATURES");

                entity.Property(e => e.TwoCurrencyRep)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TWO_CURRENCY_REP");

                entity.Property(e => e.UseDailyTrns)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_DAILY_TRNS");

                entity.Property(e => e.UseHoldingComp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_HOLDING_COMP");

                entity.Property(e => e.UseMulticomp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_MULTICOMP");

                entity.Property(e => e.UseProject)
                    .HasPrecision(1)
                    .HasColumnName("USE_PROJECT");

                entity.Property(e => e.UseRecurring)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_RECURRING");

                entity.Property(e => e.ZerosSysdate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ZEROS_SYSDATE");
            });

            modelBuilder.Entity<ActionTaken>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ACTION_TAKEN");

                entity.Property(e => e.ActionType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACTION_TYPE");

                entity.Property(e => e.CancelReason)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CANCEL_REASON");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATION_DATE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.IssueId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_ID");

                entity.Property(e => e.RateNo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("RATE_NO")
                    .HasDefaultValueSql("0                     ");

                entity.Property(e => e.ReadingCounter)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("READING_COUNTER");

                entity.Property(e => e.ScheduleId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SCHEDULE_ID");

                entity.Property(e => e.UnitId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_ID");

                entity.Property(e => e.UnitSchdHistId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_SCHD_HIST_ID");
            });

            modelBuilder.Entity<ActiveStore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ACTIVE_STORE");

                entity.Property(e => e.BranchCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_CODE");

                entity.Property(e => e.CreationTime)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATION_TIME");

                entity.Property(e => e.StoreCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STORE_CODE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<Activereservedunitsdatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ACTIVERESERVEDUNITSDATA");

                entity.Property(e => e.Active)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE");

                entity.Property(e => e.AreservedFor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ARESERVED_FOR");

                entity.Property(e => e.Areservedfor1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ARESERVEDFOR");

                entity.Property(e => e.Areservedforen)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ARESERVEDFOREN");

                entity.Property(e => e.Campcode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CAMPCODE");

                entity.Property(e => e.Campresource)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CAMPRESOURCE");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Depositvalue)
                    .HasColumnType("NUMBER(15,5)")
                    .HasColumnName("DEPOSITVALUE");

                entity.Property(e => e.EreservedFor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ERESERVED_FOR");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Rep2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REP2");

                entity.Property(e => e.Reservebydeposit)
                    .HasPrecision(1)
                    .HasColumnName("RESERVEBYDEPOSIT");

                entity.Property(e => e.ReservedBy)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RESERVED_BY");

                entity.Property(e => e.Reservedby1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RESERVEDBY");

                entity.Property(e => e.Reservedbyen)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RESERVEDBYEN");

                entity.Property(e => e.Todate)
                    .HasColumnType("DATE")
                    .HasColumnName("TODATE");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<ActualcostofagricultureView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ACTUALCOSTOFAGRICULTURE_VIEW");

                entity.Property(e => e.ActcostcenterId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACTCOSTCENTER_ID");

                entity.Property(e => e.Actcostcentername)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ACTCOSTCENTERNAME");

                entity.Property(e => e.Actcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACTCOSTVAL");

                entity.Property(e => e.Actoperation)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ACTOPERATION");

                entity.Property(e => e.Actoperationid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACTOPERATIONID");

                entity.Property(e => e.Actqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACTQTY");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");
            });

            modelBuilder.Entity<Affectsaleprice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AFFECTSALEPRICE");

                entity.Property(e => e.Affect)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT");

                entity.Property(e => e.Notaffect)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NOTAFFECT");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<Agriage>(entity =>
            {
                entity.ToTable("AGRIAGE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Agriprocessid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AGRIPROCESSID");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Fromdate)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FROMDATE");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Namear)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAMEAR");

                entity.Property(e => e.Todate)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TODATE");

                entity.Property(e => e.Typeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TYPEID");

                entity.HasOne(d => d.Agriprocess)
                    .WithMany(p => p.Agriages)
                    .HasForeignKey(d => d.Agriprocessid)
                    .HasConstraintName("AGRIAGE_R02");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Agriages)
                    .HasForeignKey(d => d.Typeid)
                    .HasConstraintName("AGRIAGE_R01");
            });

            modelBuilder.Entity<Agridatum>(entity =>
            {
                entity.ToTable("AGRIDATA");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Actualspace)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ACTUALSPACE");

                entity.Property(e => e.Agridate)
                    .HasColumnType("DATE")
                    .HasColumnName("AGRIDATE");

                entity.Property(e => e.Agriorigin)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AGRIORIGIN");

                entity.Property(e => e.Agrispace)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AGRISPACE");

                entity.Property(e => e.Agriwayid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AGRIWAYID");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Dimensionid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONID");

                entity.Property(e => e.Expectedqty)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EXPECTEDQTY");

                entity.Property(e => e.Harvestdate)
                    .HasColumnType("DATE")
                    .HasColumnName("HARVESTDATE");

                entity.Property(e => e.Irritationdate)
                    .HasColumnType("DATE")
                    .HasColumnName("IRRITATIONDATE");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Namear)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAMEAR");

                entity.Property(e => e.Previousitemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PREVIOUSITEMID");

                entity.Property(e => e.Raiseid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RAISEID");

                entity.Property(e => e.Typeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TYPEID");

                entity.HasOne(d => d.AgrioriginNavigation)
                    .WithMany(p => p.AgridatumAgrioriginNavigations)
                    .HasForeignKey(d => d.Agriorigin)
                    .HasConstraintName("AGRIDATA_R07");

                entity.HasOne(d => d.Agriway)
                    .WithMany(p => p.AgridatumAgriways)
                    .HasForeignKey(d => d.Agriwayid)
                    .HasConstraintName("SYS_C0019675");

                entity.HasOne(d => d.Dimension)
                    .WithMany(p => p.Agridata)
                    .HasForeignKey(d => d.Dimensionid)
                    .HasConstraintName("AGRIDATA_R04");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.AgridatumItems)
                    .HasForeignKey(d => d.Itemid)
                    .HasConstraintName("AGRIDATA_R02");

                entity.HasOne(d => d.Previousitem)
                    .WithMany(p => p.AgridatumPreviousitems)
                    .HasForeignKey(d => d.Previousitemid)
                    .HasConstraintName("AGRIDATA_R03");

                entity.HasOne(d => d.Raise)
                    .WithMany(p => p.AgridatumRaises)
                    .HasForeignKey(d => d.Raiseid)
                    .HasConstraintName("AGRIDATA_R05");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Agridata)
                    .HasForeignKey(d => d.Typeid)
                    .HasConstraintName("AGRIDATA_R01");
            });

            modelBuilder.Entity<Agrifarm>(entity =>
            {
                entity.ToTable("AGRIFARM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Agriprocess>(entity =>
            {
                entity.ToTable("AGRIPROCESS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Namear)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAMEAR");

                entity.Property(e => e.Processtype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSTYPE");

                entity.Property(e => e.Typeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TYPEID");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Agriprocesses)
                    .HasForeignKey(d => d.Typeid)
                    .HasConstraintName("AGRIPROCESS_R01");
            });

            modelBuilder.Entity<Allcompanysale>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ALLCOMPANYSALES");
            });

            modelBuilder.Entity<Allsaleformsstatementview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ALLSALEFORMSSTATEMENTVIEW");

                entity.Property(e => e.ApartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME1");

                entity.Property(e => e.ApartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME2");

                entity.Property(e => e.ApartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME3");

                entity.Property(e => e.ApartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME4");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTSVALUE2");

                entity.Property(e => e.Attachvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHVALUE");

                entity.Property(e => e.Branchaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHANAME");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Customercode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERCODE");

                entity.Property(e => e.Customerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERENAME");

                entity.Property(e => e.Customerid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Customername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.DateActual)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_ACTUAL");

                entity.Property(e => e.DateExpected)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_EXPECTED");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Description)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Edescription)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("EDESCRIPTION");

                entity.Property(e => e.Elayout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ELAYOUT");

                entity.Property(e => e.EpartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME1");

                entity.Property(e => e.EpartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME2");

                entity.Property(e => e.EpartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME3");

                entity.Property(e => e.EpartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME4");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURESVALUE2");

                entity.Property(e => e.Featurevalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATUREVALUE");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.PartCode1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE1");

                entity.Property(e => e.PartCode2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE2");

                entity.Property(e => e.PartCode3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE3");

                entity.Property(e => e.PartCode4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE4");

                entity.Property(e => e.PartCodeEname1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME1");

                entity.Property(e => e.PartCodeEname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME2");

                entity.Property(e => e.PartCodeEname3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME3");

                entity.Property(e => e.PartCodeEname4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME4");

                entity.Property(e => e.PartCodeName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME1");

                entity.Property(e => e.PartCodeName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME2");

                entity.Property(e => e.PartCodeName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME3");

                entity.Property(e => e.PartCodeName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME4");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedFixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_FIXEDCOST");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Saleformbenfets)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMBENFETS");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Saleformid1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID1");

                entity.Property(e => e.Saleformvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMVALUE");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICESVALUE2");

                entity.Property(e => e.Servicevalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICEVALUE");

                entity.Property(e => e.Trnsno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSNO");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL1");

                entity.Property(e => e.Val2benfets)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VAL2BENFETS");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<Alterinstalmentsetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ALTERINSTALMENTSETTING");

                entity.Property(e => e.Daysbeforeinstduedate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DAYSBEFOREINSTDUEDATE");

                entity.Property(e => e.Emailbady)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("EMAILBADY");

                entity.Property(e => e.Emailsubject)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAILSUBJECT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<Analyticalnumber>(entity =>
            {
                entity.ToTable("ANALYTICALNUMBER");

                entity.Property(e => e.Analyticalnumberid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ANALYTICALNUMBERID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Application>(entity =>
            {
                entity.HasKey(e => e.AppId)
                    .HasName("APPLICATIONS_PK");

                entity.ToTable("APPLICATIONS");

                entity.Property(e => e.AppId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("APP_ID");

                entity.Property(e => e.AppEname)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("APP_ENAME");

                entity.Property(e => e.AppName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("APP_NAME");

                entity.Property(e => e.AppPosition)
                    .HasColumnType("NUMBER")
                    .HasColumnName("APP_POSITION");

                entity.Property(e => e.AppType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("APP_TYPE");

                entity.Property(e => e.Createdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATEDATE")
                    .HasDefaultValueSql("sysdate");

                entity.Property(e => e.Keyword)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("KEYWORD");
            });

            modelBuilder.Entity<Asset>(entity =>
            {
                entity.ToTable("ASSETS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Accountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTID");

                entity.Property(e => e.Additionvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDITIONVALUE");

                entity.Property(e => e.Aname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Assetaccountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ASSETACCOUNTID");

                entity.Property(e => e.Benifitvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BENIFITVALUE");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Currbranchid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRBRANCHID");

                entity.Property(e => e.Currdistinationid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRDISTINATIONID");

                entity.Property(e => e.Defalutdepreciationratio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEFALUTDEPRECIATIONRATIO");

                entity.Property(e => e.Depreciationcomplexaccountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRECIATIONCOMPLEXACCOUNTID");

                entity.Property(e => e.Depreciationcomplexvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRECIATIONCOMPLEXVALUE");

                entity.Property(e => e.Depreciationid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRECIATIONID");

                entity.Property(e => e.Depreciationinstallmentaccount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRECIATIONINSTALLMENTACCOUNT");

                entity.Property(e => e.Depreciationtotalvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRECIATIONTOTALVALUE");

                entity.Property(e => e.Depreciationvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRECIATIONVALUE");

                entity.Property(e => e.Dimentiondetailsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENTIONDETAILSID");

                entity.Property(e => e.Docno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOCNO");

                entity.Property(e => e.Docvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOCVALUE");

                entity.Property(e => e.Employeeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EMPLOYEEID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Firstbranchid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIRSTBRANCHID");

                entity.Property(e => e.Firstdistinationid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIRSTDISTINATIONID");

                entity.Property(e => e.Firstpurchasevalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIRSTPURCHASEVALUE");

                entity.Property(e => e.Isassetmantained)
                    .HasPrecision(1)
                    .HasColumnName("ISASSETMANTAINED");

                entity.Property(e => e.Isoldasset)
                    .HasPrecision(1)
                    .HasColumnName("ISOLDASSET")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Istransportasset)
                    .HasPrecision(1)
                    .HasColumnName("ISTRANSPORTASSET");

                entity.Property(e => e.Itemnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNUMBER");

                entity.Property(e => e.Jobid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOBID");

                entity.Property(e => e.Junkvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JUNKVALUE");

                entity.Property(e => e.Lastdepreciationdate)
                    .HasColumnType("DATE")
                    .HasColumnName("LASTDEPRECIATIONDATE");

                entity.Property(e => e.Lastdepreciationvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LASTDEPRECIATIONVALUE");

                entity.Property(e => e.Lastdocvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LASTDOCVALUE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Operationdate)
                    .HasColumnType("DATE")
                    .HasColumnName("OPERATIONDATE");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");

                entity.Property(e => e.Purchasedate)
                    .HasColumnType("DATE")
                    .HasColumnName("PURCHASEDATE");

                entity.Property(e => e.Purchasenum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PURCHASENUM");

                entity.Property(e => e.Purchasevalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PURCHASEVALUE");

                entity.Property(e => e.Rentalvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTALVALUE");

                entity.Property(e => e.Transporttypeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSPORTTYPEID");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AssetAccounts)
                    .HasForeignKey(d => d.Accountid)
                    .HasConstraintName("ASSETS_R06");

                entity.HasOne(d => d.Assetaccount)
                    .WithMany(p => p.AssetAssetaccounts)
                    .HasForeignKey(d => d.Assetaccountid)
                    .HasConstraintName("SYS_C0019303");

                entity.HasOne(d => d.Currbranch)
                    .WithMany(p => p.AssetCurrbranches)
                    .HasForeignKey(d => d.Currbranchid)
                    .HasConstraintName("ASSETS_R01");

                entity.HasOne(d => d.Currdistination)
                    .WithMany(p => p.AssetCurrdistinations)
                    .HasForeignKey(d => d.Currdistinationid)
                    .HasConstraintName("ASSETS_R03");

                entity.HasOne(d => d.Depreciationcomplexaccount)
                    .WithMany(p => p.AssetDepreciationcomplexaccounts)
                    .HasForeignKey(d => d.Depreciationcomplexaccountid)
                    .HasConstraintName("SYS_C0019302");

                entity.HasOne(d => d.Depreciation)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.Depreciationid)
                    .HasConstraintName("ASSETS_R07");

                entity.HasOne(d => d.DepreciationinstallmentaccountNavigation)
                    .WithMany(p => p.AssetDepreciationinstallmentaccountNavigations)
                    .HasForeignKey(d => d.Depreciationinstallmentaccount)
                    .HasConstraintName("SYS_C0019301");

                entity.HasOne(d => d.Dimentiondetails)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.Dimentiondetailsid)
                    .HasConstraintName("ASSETS_R05");

                entity.HasOne(d => d.Firstbranch)
                    .WithMany(p => p.AssetFirstbranches)
                    .HasForeignKey(d => d.Firstbranchid)
                    .HasConstraintName("ASSETS_R02");

                entity.HasOne(d => d.Firstdistination)
                    .WithMany(p => p.AssetFirstdistinations)
                    .HasForeignKey(d => d.Firstdistinationid)
                    .HasConstraintName("ASSETS_R04");

                entity.HasOne(d => d.Period)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.Periodid)
                    .HasConstraintName("ASSETS_R08");
            });

            modelBuilder.Entity<Assetdatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ASSETDATA");

                entity.Property(e => e.Accountaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNTANAME");

                entity.Property(e => e.Accountcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNTCODE");

                entity.Property(e => e.Assetaname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ASSETANAME");

                entity.Property(e => e.Assetcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASSETCODE");

                entity.Property(e => e.Assettrnsnamear)
                    .HasMaxLength(100)
                    .HasColumnName("ASSETTRNSNAMEAR");

                entity.Property(e => e.Assettrnsnameen)
                    .HasMaxLength(100)
                    .HasColumnName("ASSETTRNSNAMEEN");

                entity.Property(e => e.Docvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOCVALUE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Transcode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSCODE");

                entity.Property(e => e.Transdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSDATE");

                entity.Property(e => e.Transtype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSTYPE");

                entity.Property(e => e.Trnsaccount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSACCOUNT");

                entity.Property(e => e.Trnsvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSVALUE");
            });

            modelBuilder.Entity<Assetsgroup>(entity =>
            {
                entity.ToTable("ASSETSGROUP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Assetaccountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ASSETACCOUNTID");

                entity.Property(e => e.Assetslevels)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ASSETSLEVELS");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Depreciationcomplexaccountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRECIATIONCOMPLEXACCOUNTID");

                entity.Property(e => e.Depreciationid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRECIATIONID");

                entity.Property(e => e.Depreciationinstallmentaccount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRECIATIONINSTALLMENTACCOUNT");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Parentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PARENTID");

                entity.HasOne(d => d.Assetaccount)
                    .WithMany(p => p.AssetsgroupAssetaccounts)
                    .HasForeignKey(d => d.Assetaccountid)
                    .HasConstraintName("ASSETSGROUP_R03");

                entity.HasOne(d => d.AssetslevelsNavigation)
                    .WithMany(p => p.Assetsgroups)
                    .HasForeignKey(d => d.Assetslevels)
                    .HasConstraintName("ASSETSGROUP_R02");

                entity.HasOne(d => d.Depreciationcomplexaccount)
                    .WithMany(p => p.AssetsgroupDepreciationcomplexaccounts)
                    .HasForeignKey(d => d.Depreciationcomplexaccountid)
                    .HasConstraintName("ASSETSGROUP_R04");

                entity.HasOne(d => d.Depreciation)
                    .WithMany(p => p.Assetsgroups)
                    .HasForeignKey(d => d.Depreciationid)
                    .HasConstraintName("ASSETSGROUP_R01");

                entity.HasOne(d => d.DepreciationinstallmentaccountNavigation)
                    .WithMany(p => p.AssetsgroupDepreciationinstallmentaccountNavigations)
                    .HasForeignKey(d => d.Depreciationinstallmentaccount)
                    .HasConstraintName("ASSETSGROUP_R05");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.Parentid)
                    .HasConstraintName("ASSETSGROUP_R06");
            });

            modelBuilder.Entity<Assetslevel>(entity =>
            {
                entity.ToTable("ASSETSLEVELS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Length)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LENGTH");

                entity.Property(e => e.Levelno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LEVELNO");
            });

            modelBuilder.Entity<Assetstranscation>(entity =>
            {
                entity.ToTable("ASSETSTRANSCATIONS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Assetid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ASSETID");

                entity.Property(e => e.Code)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODE");

                entity.Property(e => e.Lastdepdate)
                    .HasColumnType("DATE")
                    .HasColumnName("LASTDEPDATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");

                entity.Property(e => e.Transdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSDATE");

                entity.Property(e => e.Transtype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSTYPE");

                entity.Property(e => e.Trnsaccount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSACCOUNT");

                entity.Property(e => e.Trnsaccount2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSACCOUNT2");

                entity.Property(e => e.Trnsvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSVALUE");

                entity.Property(e => e.Typeofexhaustion)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TYPEOFEXHAUSTION");

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.Assetstranscations)
                    .HasForeignKey(d => d.Assetid)
                    .HasConstraintName("ASSETSTRANSCATIONS_R01");

                entity.HasOne(d => d.Period)
                    .WithMany(p => p.Assetstranscations)
                    .HasForeignKey(d => d.Periodid)
                    .HasConstraintName("ASSETSTRANSCATIONS_R03");

                entity.HasOne(d => d.TranstypeNavigation)
                    .WithMany(p => p.Assetstranscations)
                    .HasForeignKey(d => d.Transtype)
                    .HasConstraintName("ASSETSTRANSCATIONS_R05");

                entity.HasOne(d => d.TrnsaccountNavigation)
                    .WithMany(p => p.AssetstranscationTrnsaccountNavigations)
                    .HasForeignKey(d => d.Trnsaccount)
                    .HasConstraintName("ASSETSTRANSCATIONS_R02");

                entity.HasOne(d => d.Trnsaccount2Navigation)
                    .WithMany(p => p.AssetstranscationTrnsaccount2Navigations)
                    .HasForeignKey(d => d.Trnsaccount2)
                    .HasConstraintName("ASSETSTRANSCATIONS_R04");
            });

            modelBuilder.Entity<Assetstrnstype>(entity =>
            {
                entity.ToTable("ASSETSTRNSTYPE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Assettrnsnamear)
                    .HasMaxLength(100)
                    .HasColumnName("ASSETTRNSNAMEAR");

                entity.Property(e => e.Assettrnsnameen)
                    .HasMaxLength(100)
                    .HasColumnName("ASSETTRNSNAMEEN");
            });

            modelBuilder.Entity<Assettransationssum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ASSETTRANSATIONSSUM");
            });

            modelBuilder.Entity<Attachmentfeature>(entity =>
            {
                entity.ToTable("ATTACHMENTFEATURES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Attachmenttypesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTTYPESID");

                entity.Property(e => e.Featuretypesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURETYPESID");

                entity.HasOne(d => d.Attachmenttypes)
                    .WithMany(p => p.Attachmentfeatures)
                    .HasForeignKey(d => d.Attachmenttypesid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ATTACHMENTFEATURES_R01");

                entity.HasOne(d => d.Featuretypes)
                    .WithMany(p => p.Attachmentfeatures)
                    .HasForeignKey(d => d.Featuretypesid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ATTACHMENTFEATURES_R02");
            });

            modelBuilder.Entity<Attachmentservice>(entity =>
            {
                entity.ToTable("ATTACHMENTSERVICES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Attachmenttypesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTTYPESID");

                entity.Property(e => e.Servicetypeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICETYPEID");

                entity.HasOne(d => d.Attachmenttypes)
                    .WithMany(p => p.Attachmentservices)
                    .HasForeignKey(d => d.Attachmenttypesid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ATTACHMENTSERVICES_R01");

                entity.HasOne(d => d.Servicetype)
                    .WithMany(p => p.Attachmentservices)
                    .HasForeignKey(d => d.Servicetypeid)
                    .HasConstraintName("ATTACHMENTSERVICES_R02");
            });

            modelBuilder.Entity<Attachmenttype>(entity =>
            {
                entity.ToTable("ATTACHMENTTYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Defaultprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEFAULTPRICE");

                entity.Property(e => e.Defaultprice2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEFAULTPRICE2");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.Institem1ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM1ENAME");

                entity.Property(e => e.Institem1name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM1NAME");

                entity.Property(e => e.Institem2ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM2ENAME");

                entity.Property(e => e.Institem2name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM2NAME");

                entity.Property(e => e.Institem3ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM3ENAME");

                entity.Property(e => e.Institem3name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM3NAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.UseInstitem1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM1");

                entity.Property(e => e.UseInstitem1q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM1Q");

                entity.Property(e => e.UseInstitem2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM2");

                entity.Property(e => e.UseInstitem2q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM2Q");

                entity.Property(e => e.UseInstitem3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM3");

                entity.Property(e => e.UseInstitem3q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM3Q");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Attachmenttypes)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("ATTACHMENTTYPES_R01");
            });

            modelBuilder.Entity<Auditlog>(entity =>
            {
                entity.ToTable("AUDITLOG");

                entity.Property(e => e.Auditlogid)
                    .HasPrecision(10)
                    .HasColumnName("AUDITLOGID");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(200)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Eventdate)
                    .HasColumnType("DATE")
                    .HasColumnName("EVENTDATE");

                entity.Property(e => e.Eventtype)
                    .HasMaxLength(200)
                    .HasColumnName("EVENTTYPE");

                entity.Property(e => e.Ip)
                    .HasMaxLength(200)
                    .HasColumnName("IP");

                entity.Property(e => e.Periodid)
                    .HasPrecision(10)
                    .HasColumnName("PERIODID");

                entity.Property(e => e.Transcode)
                    .HasMaxLength(200)
                    .HasColumnName("TRANSCODE");

                entity.Property(e => e.Transid)
                    .HasPrecision(10)
                    .HasColumnName("TRANSID");

                entity.Property(e => e.Transtype)
                    .HasMaxLength(200)
                    .HasColumnName("TRANSTYPE");

                entity.Property(e => e.Transtypedetail)
                    .HasMaxLength(200)
                    .HasColumnName("TRANSTYPEDETAIL");

                entity.Property(e => e.Userid)
                    .HasMaxLength(200)
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<Bankingfacility>(entity =>
            {
                entity.ToTable("BANKINGFACILITIES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Bankid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BANKID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Facilitieslength)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACILITIESLENGTH");

                entity.Property(e => e.Facilitiestotallength)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACILITIESTOTALLENGTH");

                entity.Property(e => e.Facilitiestotaltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FACILITIESTOTALTYPE");

                entity.Property(e => e.Facilitiestype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FACILITIESTYPE");

                entity.Property(e => e.Facilitiesvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACILITIESVALUE");

                entity.Property(e => e.Faciltiesdate)
                    .HasColumnType("DATE")
                    .HasColumnName("FACILTIESDATE");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.Bankingfacilities)
                    .HasForeignKey(d => d.Bankid)
                    .HasConstraintName("BANKINGFACILITIES_R01");
            });

            modelBuilder.Entity<Banksystemsspec>(entity =>
            {
                entity.ToTable("BANKSYSTEMSSPEC");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Tempcheckduedatealerteriod)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TEMPCHECKDUEDATEALERTERIOD");

                entity.Property(e => e.Tempcheckduedatealerttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TEMPCHECKDUEDATEALERTTYPE");
            });

            modelBuilder.Entity<Barcodeseed>(entity =>
            {
                entity.ToTable("BARCODESEED");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Clientname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CLIENTNAME");

                entity.Property(e => e.Endserial)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ENDSERIAL");

                entity.Property(e => e.Serialcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SERIALCODE");

                entity.Property(e => e.Startserial)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STARTSERIAL");
            });

            modelBuilder.Entity<Boatport>(entity =>
            {
                entity.ToTable("BOATPORT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Type)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");
            });

            modelBuilder.Entity<Branch>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("SYS_C0017547");

                entity.ToTable("BRANCH");

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.AddItems)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ITEMS");

                entity.Property(e => e.BranchAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_ADDRESS");

                entity.Property(e => e.Branchdepartment)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHDEPARTMENT");

                entity.Property(e => e.Company)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("COMPANY");

                entity.Property(e => e.Dbserver)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DBSERVER")
                    .IsFixedLength(true);

                entity.Property(e => e.Dbuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DBUSER")
                    .IsFixedLength(true);

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.LehaaBranchCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LEHAA_BRANCH_CODE");

                entity.Property(e => e.LehaaCode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("LEHAA_CODE");

                entity.Property(e => e.LehaaLostCode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("LEHAA_LOST_CODE");

                entity.Property(e => e.Line1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LINE1");

                entity.Property(e => e.Line2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LINE2");

                entity.Property(e => e.Line3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LINE3");

                entity.Property(e => e.Line4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("LINE4");

                entity.Property(e => e.LogoPath)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("LOGO_PATH");

                entity.Property(e => e.NameEn)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME_EN");

                entity.Property(e => e.Receivefromdate)
                    .HasColumnType("DATE")
                    .HasColumnName("RECEIVEFROMDATE");

                entity.Property(e => e.Receivetodate)
                    .HasColumnType("DATE")
                    .HasColumnName("RECEIVETODATE");

                entity.Property(e => e.Reserve1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RESERVE1");

                entity.Property(e => e.Reserve2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RESERVE2");

                entity.Property(e => e.Reserve3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RESERVE3");

                entity.Property(e => e.StrReceivefromdate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STR_RECEIVEFROMDATE");

                entity.Property(e => e.StrReceivetodate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STR_RECEIVETODATE");

                entity.Property(e => e.Transfersdepartment)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFERSDEPARTMENT");

                entity.Property(e => e.UploadingPrice)
                    .HasColumnType("NUMBER(10,3)")
                    .HasColumnName("UPLOADING_PRICE")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Warehouse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WAREHOUSE");
            });

            modelBuilder.Entity<Branch1>(entity =>
            {
                entity.HasKey(e => e.RowId)
                    .HasName("BRANCHES_PK");

                entity.ToTable("BRANCHES");

                entity.Property(e => e.RowId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ROW_ID");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Defaultbranch)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEFAULTBRANCH")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Branch1s)
                    .HasForeignKey(d => d.Userid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("BRANCHES_R01");
            });

            modelBuilder.Entity<Branchdirector>(entity =>
            {
                entity.ToTable("BRANCHDIRECTORS");

                entity.HasIndex(e => new { e.BranchId, e.StaffId }, "BRANCHDIRECTORS_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.StaffId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF_ID");
            });

            modelBuilder.Entity<BusinesstypeSpec>(entity =>
            {
                entity.ToTable("BUSINESSTYPE_SPECS");

                entity.HasIndex(e => e.Businessid, "BUSINESSTYPE_SPECS_U01")
                    .IsUnique();

                entity.HasIndex(e => e.Mandatorytype, "MANDATORYTYPE_INDX");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Businessid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BUSINESSID");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMID");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Mandatorytype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORYTYPE");

                entity.HasOne(d => d.Business)
                    .WithOne(p => p.BusinesstypeSpec)
                    .HasForeignKey<BusinesstypeSpec>(d => d.Businessid)
                    .HasConstraintName("BUSINESSTYPE_SPECS_FK01");

                entity.HasOne(d => d.MandatorytypeNavigation)
                    .WithMany(p => p.BusinesstypeSpecs)
                    .HasForeignKey(d => d.Mandatorytype)
                    .HasConstraintName("BUSINESSTYPE_SPECS_FK02");
            });

            modelBuilder.Entity<Calcfinstalmentwithreschedual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CALCFINSTALMENTWITHRESCHEDUAL");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Fixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL");

                entity.Property(e => e.Formtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FORMTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Penaltyval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYVAL");
            });

            modelBuilder.Entity<Cancellationorwaivertrn>(entity =>
            {
                entity.ToTable("CANCELLATIONORWAIVERTRNS");

                entity.HasIndex(e => e.Saleformid, "CANCELSALEFORMID_INDX");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Authorizationname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AUTHORIZATIONNAME");

                entity.Property(e => e.Authorizationnum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AUTHORIZATIONNUM");

                entity.Property(e => e.Efromcustomer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EFROMCUSTOMER");

                entity.Property(e => e.Etocustomer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ETOCUSTOMER");

                entity.Property(e => e.FinanceGuardianfrom)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCE_GUARDIANFROM");

                entity.Property(e => e.FinanceGuardianto)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCE_GUARDIANTO");

                entity.Property(e => e.Fromcustomer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FROMCUSTOMER");

                entity.Property(e => e.Newinstalmentval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NEWINSTALMENTVAL");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Tocustomer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOCUSTOMER");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");

                entity.HasOne(d => d.FinanceGuardianfromNavigation)
                    .WithMany(p => p.CancellationorwaivertrnFinanceGuardianfromNavigations)
                    .HasForeignKey(d => d.FinanceGuardianfrom)
                    .HasConstraintName("CANCELLATIONORWAIVERTRNS_FK2");

                entity.HasOne(d => d.FinanceGuardiantoNavigation)
                    .WithMany(p => p.CancellationorwaivertrnFinanceGuardiantoNavigations)
                    .HasForeignKey(d => d.FinanceGuardianto)
                    .HasConstraintName("CANCELLATIONORWAIVERTRNS_FK3");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Cancellationorwaivertrns)
                    .HasForeignKey(d => d.Saleformid)
                    .HasConstraintName("CANCELLATIONORWAIVERTRNS_FK1");
            });

            modelBuilder.Entity<Ccc>(entity =>
            {
                entity.HasKey(e => e.Col1)
                    .HasName("SYS_C0017559");

                entity.ToTable("CCC");

                entity.Property(e => e.Col1)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("COL1");

                entity.Property(e => e.Col2)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("COL2");

                entity.Property(e => e.Nnn)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NNN");
            });

            modelBuilder.Entity<Check>(entity =>
            {
                entity.ToTable("CHECKS");

                entity.HasIndex(e => new { e.Financemid, e.Id, e.Debtorid }, "CHECKS111");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Beneficiary)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BENEFICIARY");

                entity.Property(e => e.Branch)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BRANCH");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("C_D");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkserial)
                    .HasPrecision(10)
                    .HasColumnName("CHECKSERIAL");

                entity.Property(e => e.Checktype)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CHECKTYPE");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Curridact)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRIDACT");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Debtorid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEBTORID");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Financemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEMID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("VALUE");

                entity.Property(e => e.Valuelocal)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("VALUELOCAL");

                entity.Property(e => e.Valuetrns)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("VALUETRNS");

                entity.Property(e => e.Vendorid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("VENDORID");

                entity.HasOne(d => d.BranchNavigation)
                    .WithMany(p => p.Checks)
                    .HasForeignKey(d => d.Branch)
                    .HasConstraintName("CHECKS_FK4");

                entity.HasOne(d => d.CDNavigation)
                    .WithMany(p => p.Checks)
                    .HasForeignKey(d => d.CD)
                    .HasConstraintName("CHECKS_FK2");

                entity.HasOne(d => d.ChecktypeNavigation)
                    .WithMany(p => p.Checks)
                    .HasForeignKey(d => d.Checktype)
                    .HasConstraintName("CHECKS_FK1");

                entity.HasOne(d => d.Curr)
                    .WithMany(p => p.Checks)
                    .HasForeignKey(d => d.Currid)
                    .HasConstraintName("CHECKS_FK7");

                entity.HasOne(d => d.Debtor)
                    .WithMany(p => p.CheckDebtors)
                    .HasForeignKey(d => d.Debtorid)
                    .HasConstraintName("CHECKS_FK6");

                entity.HasOne(d => d.Financem)
                    .WithMany(p => p.Checks)
                    .HasForeignKey(d => d.Financemid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("CHECKS_FK8");

                entity.HasOne(d => d.PeriodNavigation)
                    .WithMany(p => p.Checks)
                    .HasForeignKey(d => d.Period)
                    .HasConstraintName("CHECKS_FK3");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.CheckVendors)
                    .HasForeignKey(d => d.Vendorid)
                    .HasConstraintName("CHECKS_FK5");
            });

            modelBuilder.Entity<CheckHistoryEffect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CHECK_HISTORY_EFFECT");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Aname1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME1");

                entity.Property(e => e.Bankexpenses)
                    .HasColumnType("NUMBER(20,4)")
                    .HasColumnName("BANKEXPENSES");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Beneficiary)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BENEFICIARY");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Cash)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH");

                entity.Property(e => e.CashFactor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_FACTOR");

                entity.Property(e => e.Casheffect)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CASHEFFECT");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checktype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKTYPE");

                entity.Property(e => e.Chkvalue)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("CHKVALUE");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Code1)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE1");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CreditFactor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT_FACTOR");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Debtorid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEBTORID");

                entity.Property(e => e.Distid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DISTID");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Fdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FDISTID");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Fremarks)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("FREMARKS");

                entity.Property(e => e.Hafzamid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZAMID");

                entity.Property(e => e.Hafzano)
                    .HasPrecision(10)
                    .HasColumnName("HAFZANO");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Hafzatypeaname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("HAFZATYPEANAME");

                entity.Property(e => e.Hafzatypeename)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("HAFZATYPEENAME");

                entity.Property(e => e.Hstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("HSTAMP");

                entity.Property(e => e.IsAccepted)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IS_ACCEPTED");

                entity.Property(e => e.Iscash)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISCASH");

                entity.Property(e => e.Isdist)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ISDIST");

                entity.Property(e => e.Kind)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("KIND");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Purpose)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Statusaname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STATUSANAME");

                entity.Property(e => e.Statusename)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STATUSENAME");

                entity.Property(e => e.Statusid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STATUSID");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.Tdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TDISTID");

                entity.Property(e => e.Transname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNAME");

                entity.Property(e => e.Trnid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNID");

                entity.Property(e => e.Trnsno)
                    .HasPrecision(15)
                    .HasColumnName("TRNSNO");

                entity.Property(e => e.Vendorid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("VENDORID");
            });

            modelBuilder.Entity<CheckHistoryEffect2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CHECK_HISTORY_EFFECT2");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Aname1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME1");

                entity.Property(e => e.Aname2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME2");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Cash)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH");

                entity.Property(e => e.CashFactor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_FACTOR");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checktype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKTYPE");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Code1)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE1");

                entity.Property(e => e.Code2)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE2");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CreditFactor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT_FACTOR");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Distid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DISTID");

                entity.Property(e => e.Distid2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISTID2");

                entity.Property(e => e.Ename2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME2");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Fremarks)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("FREMARKS");

                entity.Property(e => e.Hafzamid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZAMID");

                entity.Property(e => e.Hafzano)
                    .HasPrecision(10)
                    .HasColumnName("HAFZANO");

                entity.Property(e => e.Hafzatypeaname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("HAFZATYPEANAME");

                entity.Property(e => e.Hstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("HSTAMP");

                entity.Property(e => e.Iscash)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISCASH");

                entity.Property(e => e.Isdist)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ISDIST");

                entity.Property(e => e.Kind)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("KIND");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Purpose)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Statusaname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STATUSANAME");

                entity.Property(e => e.Statusid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STATUSID");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.StoreId2)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID2");

                entity.Property(e => e.TypeAname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPE_ANAME2");

                entity.Property(e => e.TypeEname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPE_ENAME2");
            });

            modelBuilder.Entity<Checkbook>(entity =>
            {
                entity.ToTable("CHECKBOOK");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Bankid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BANKID");

                entity.Property(e => e.Checkcount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCOUNT");

                entity.Property(e => e.Checkserial)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKSERIAL");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.Checkbooks)
                    .HasForeignKey(d => d.Bankid)
                    .HasConstraintName("CHECKBOOK_FK1");
            });

            modelBuilder.Entity<Checkbookdetail>(entity =>
            {
                entity.ToTable("CHECKBOOKDETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Checkbookid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKBOOKID");

                entity.Property(e => e.Checknum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNUM");

                entity.HasOne(d => d.Checkbook)
                    .WithMany(p => p.Checkbookdetails)
                    .HasForeignKey(d => d.Checkbookid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("CHECKBOOKDETAILS_FK1");
            });

            modelBuilder.Entity<Checkhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CHECKHISTORY");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Cash)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Hafzamid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZAMID");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Hafzatypeaname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("HAFZATYPEANAME");

                entity.Property(e => e.Hstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("HSTAMP");

                entity.Property(e => e.Rescheduled)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RESCHEDULED");

                entity.Property(e => e.Statusaname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STATUSANAME");

                entity.Property(e => e.Statusid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STATUSID");
            });

            modelBuilder.Entity<Checkidstamp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CHECKIDSTAMPS");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Hafzadate)
                    .HasColumnType("DATE")
                    .HasColumnName("HAFZADATE");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Hstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("HSTAMP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<Checkplacehistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CHECKPLACEHISTORY");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Distid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DISTID");

                entity.Property(e => e.Distname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DISTNAME");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Hafzamid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZAMID");

                entity.Property(e => e.Hafzano)
                    .HasPrecision(10)
                    .HasColumnName("HAFZANO");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Hafzatypeaname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("HAFZATYPEANAME");

                entity.Property(e => e.Hstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("HSTAMP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Tdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TDISTID");
            });

            modelBuilder.Entity<Checkrecieved>(entity =>
            {
                entity.ToTable("CHECKRECIEVED");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Isrecieved)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISRECIEVED")
                    .IsFixedLength(true);

                entity.HasOne(d => d.Check)
                    .WithMany(p => p.Checkrecieveds)
                    .HasForeignKey(d => d.Checkid)
                    .HasConstraintName("CHECKRECIEVED_R01");
            });

            modelBuilder.Entity<Checkrecievedview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CHECKRECIEVEDVIEW");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Isrecieved)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISRECIEVED")
                    .IsFixedLength(true);

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<ChecksNotCollected>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CHECKS_NOT_COLLECTED");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Astatus)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ASTATUS");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Debtorid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEBTORID");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ESTATUS");

                entity.Property(e => e.Financemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEMID");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Hafzadate)
                    .HasColumnType("DATE")
                    .HasColumnName("HAFZADATE");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.StoreAllcodesCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("STORE_ALLCODES_CODE");

                entity.Property(e => e.TrnsDesc)
                    .HasMaxLength(81)
                    .IsUnicode(false)
                    .HasColumnName("TRNS_DESC");
            });

            modelBuilder.Entity<ChecksNotCollectedmod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CHECKS_NOT_COLLECTEDMOD");
            });

            modelBuilder.Entity<Checksmod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CHECKSMOD");

                entity.Property(e => e.Beneficiary)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BENEFICIARY");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Duedate)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Grossval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("GROSSVAL");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Period)
                    .HasColumnType("DATE")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Purpose)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PURPOSE");
            });

            modelBuilder.Entity<Checksnotconfirmed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CHECKSNOTCONFIRMED");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Branch)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH");

                entity.Property(e => e.Cash)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkserial)
                    .HasPrecision(10)
                    .HasColumnName("CHECKSERIAL");

                entity.Property(e => e.Checktype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKTYPE");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.CollectedChecks)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COLLECTED_CHECKS");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Fdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FDISTID");

                entity.Property(e => e.Finanacemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANACEMID");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Increaseval)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INCREASEVAL");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Serialename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALENAME");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.Val)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("VAL");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<Checkstatus>(entity =>
            {
                entity.ToTable("CHECKSTATUS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.IsUnderCollection)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_UNDER_COLLECTION")
                    .IsFixedLength(true);

                entity.Property(e => e.Islast)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISLAST")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Checkstransactionhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CHECKSTRANSACTIONHISTORY");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Beneficiary)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BENEFICIARY");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkserial)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKSERIAL");

                entity.Property(e => e.Checktype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKTYPE");

                entity.Property(e => e.Checktypeename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKTYPEENAME");

                entity.Property(e => e.Checktypename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKTYPENAME");

                entity.Property(e => e.Code1)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE1");

                entity.Property(e => e.Code2)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE2");

                entity.Property(e => e.Credit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Credite)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREDITE");

                entity.Property(e => e.Curraname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRANAME");

                entity.Property(e => e.Currename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENAME");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Debit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Debite)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEBITE");

                entity.Property(e => e.Debtorename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEBTORENAME");

                entity.Property(e => e.Debtorid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBTORID");

                entity.Property(e => e.Debtorname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEBTORNAME");

                entity.Property(e => e.Documentno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNO");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Fdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FDISTID");

                entity.Property(e => e.Financemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEMID");

                entity.Property(e => e.Financespecename)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("FINANCESPECENAME");

                entity.Property(e => e.Financespecname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("FINANCESPECNAME");

                entity.Property(e => e.Fromename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMENAME");

                entity.Property(e => e.Fromname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMNAME");

                entity.Property(e => e.Grossval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("GROSSVAL");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Iscash)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISCASH");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Protectiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("PROTECTIONDATE");

                entity.Property(e => e.Purpose)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Remark1)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("REMARK1");

                entity.Property(e => e.Storemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREMID");

                entity.Property(e => e.Tdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TDISTID");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");

                entity.Property(e => e.Trnsno)
                    .HasPrecision(15)
                    .HasColumnName("TRNSNO");

                entity.Property(e => e.Type1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPE1");

                entity.Property(e => e.Type1id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TYPE1ID");

                entity.Property(e => e.Type2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPE2");

                entity.Property(e => e.Type2e)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPE2E");

                entity.Property(e => e.Type2id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TYPE2ID");

                entity.Property(e => e.Typee1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPEE1");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("VALUE");

                entity.Property(e => e.Valuelocal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUELOCAL");

                entity.Property(e => e.Valuetrns)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUETRNS");

                entity.Property(e => e.Vendorid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VENDORID");
            });

            modelBuilder.Entity<Checktype>(entity =>
            {
                entity.ToTable("CHECKTYPE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Clientinstitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CLIENTINSTITEMS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Ownername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERNAME");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2");
            });

            modelBuilder.Entity<Cminstitemattatchment>(entity =>
            {
                entity.ToTable("CMINSTITEMATTATCHMENTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttatchmentId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTATCHMENT_ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Feautersvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEAUTERSVALUE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.InstprogramsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Servicesvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS")
                    .HasDefaultValueSql("'2'");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Attatchment)
                    .WithMany(p => p.Cminstitemattatchments)
                    .HasForeignKey(d => d.AttatchmentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("CMINSTITEMATTATCHMENTS_R02");

                entity.HasOne(d => d.Instprograms)
                    .WithMany(p => p.Cminstitemattatchments)
                    .HasForeignKey(d => d.InstprogramsId)
                    .HasConstraintName("CMINSTITEMATTATCHMENTS_R04");

                entity.HasOne(d => d.OwnercompanyNavigation)
                    .WithMany(p => p.Cminstitemattatchments)
                    .HasForeignKey(d => d.Ownercompany)
                    .HasConstraintName("CMINSTITEMATTATCHMENTS_R03");
            });

            modelBuilder.Entity<Cminstitemattatchmentfeature>(entity =>
            {
                entity.ToTable("CMINSTITEMATTATCHMENTFEATURES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttatchmentId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTATCHMENT_ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.FeatureId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURE_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Valueorratio1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO1");

                entity.Property(e => e.Valueorratio2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO2");

                entity.Property(e => e.Valueorratio3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO3");

                entity.HasOne(d => d.Feature)
                    .WithMany(p => p.Cminstitemattatchmentfeatures)
                    .HasForeignKey(d => d.FeatureId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("CMINSTITEMATTATCHFEATURESR03");
            });

            modelBuilder.Entity<Cminstitemattatchmentservice>(entity =>
            {
                entity.ToTable("CMINSTITEMATTATCHMENTSERVICES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttatchmentId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTATCHMENT_ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(10,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ServiceId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICE_ID");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Valueorratio1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO1");

                entity.Property(e => e.Valueorratio2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO2");

                entity.Property(e => e.Valueorratio3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO3");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Cminstitemattatchmentservices)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("CMINSTITEMATTATCHSERVR03");
            });

            modelBuilder.Entity<Cminstitembuildinglayer>(entity =>
            {
                entity.ToTable("CMINSTITEMBUILDINGLAYER");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Businesstypeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BUSINESSTYPEID");

                entity.Property(e => e.Creationdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATIONDATE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Mandatoryfieldid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORYFIELDID");

                entity.HasOne(d => d.Businesstype)
                    .WithMany(p => p.Cminstitembuildinglayers)
                    .HasForeignKey(d => d.Businesstypeid)
                    .HasConstraintName("CMINSTITEMBUILDINGLAYER_R01");

                entity.HasOne(d => d.Mandatoryfield)
                    .WithMany(p => p.Cminstitembuildinglayers)
                    .HasForeignKey(d => d.Mandatoryfieldid)
                    .HasConstraintName("CMINSTITEMBUILDINGLAYER_R02");
            });

            modelBuilder.Entity<Cminstitemfeature>(entity =>
            {
                entity.ToTable("CMINSTITEMFEATURES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.FeatureId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURE_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.InstprogramsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(10,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS")
                    .HasDefaultValueSql("'2'");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Feature)
                    .WithMany(p => p.Cminstitemfeatures)
                    .HasForeignKey(d => d.FeatureId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("CMINSTITEMFEATURES_R02");

                entity.HasOne(d => d.Instprograms)
                    .WithMany(p => p.Cminstitemfeatures)
                    .HasForeignKey(d => d.InstprogramsId)
                    .HasConstraintName("CMINSTITEMFEATURES_R04");

                entity.HasOne(d => d.OwnercompanyNavigation)
                    .WithMany(p => p.Cminstitemfeatures)
                    .HasForeignKey(d => d.Ownercompany)
                    .HasConstraintName("CMINSTITEMFEATURES_R03");
            });

            modelBuilder.Entity<Cminstitemlayoutdetail>(entity =>
            {
                entity.ToTable("CMINSTITEMLAYOUTDETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Allsubid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLSUBID");

                entity.Property(e => e.Data)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DATA");

                entity.Property(e => e.Institempropertiesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMPROPERTIESID");

                entity.Property(e => e.Layoutid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUTID");

                entity.HasOne(d => d.Allsub)
                    .WithMany(p => p.Cminstitemlayoutdetails)
                    .HasForeignKey(d => d.Allsubid)
                    .HasConstraintName("CMINSTITEMLAYOUTDETAILS_R03");

                entity.HasOne(d => d.Institemproperties)
                    .WithMany(p => p.Cminstitemlayoutdetails)
                    .HasForeignKey(d => d.Institempropertiesid)
                    .HasConstraintName("CMINSTITEMLAYOUTDETAILS_R02");
            });

            modelBuilder.Entity<Cminstitemlayoutlayer>(entity =>
            {
                entity.ToTable("CMINSTITEMLAYOUTLAYER");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Buildinglayerid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BUILDINGLAYERID");

                entity.Property(e => e.Codepost)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODEPOST");

                entity.Property(e => e.Codepre)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODEPRE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Institemtype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMTYPE");

                entity.Property(e => e.Layoutcount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUTCOUNT");

                entity.Property(e => e.Rank)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RANK");

                entity.Property(e => e.Seriallength)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERIALLENGTH");

                entity.Property(e => e.Serialstart)
                    .HasPrecision(1)
                    .HasColumnName("SERIALSTART");

                entity.Property(e => e.Serialstartwith)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERIALSTARTWITH");

                entity.HasOne(d => d.Buildinglayer)
                    .WithMany(p => p.Cminstitemlayoutlayers)
                    .HasForeignKey(d => d.Buildinglayerid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("CMINSTITEMLAYOUTLAYER_R01");

                entity.HasOne(d => d.InstitemtypeNavigation)
                    .WithMany(p => p.Cminstitemlayoutlayers)
                    .HasForeignKey(d => d.Institemtype)
                    .HasConstraintName("CMINSTITEMLAYOUTLAYER_R02");
            });

            modelBuilder.Entity<Cminstitemproperty>(entity =>
            {
                entity.ToTable("CMINSTITEMPROPERTIES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Allsubid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLSUBID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Data)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DATA");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.ProertyId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PROERTY_ID");

                entity.HasOne(d => d.Allsub)
                    .WithMany(p => p.Cminstitemproperties)
                    .HasForeignKey(d => d.Allsubid)
                    .HasConstraintName("CMINSTITEMPROPERTIES_R03");

                entity.HasOne(d => d.Proerty)
                    .WithMany(p => p.Cminstitemproperties)
                    .HasForeignKey(d => d.ProertyId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("CMINSTITEMPROPERTIES_R02");
            });

            modelBuilder.Entity<Cminstitemservice>(entity =>
            {
                entity.ToTable("CMINSTITEMSERVICES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.InstprogramsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(10,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ServiceId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICE_ID");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS")
                    .HasDefaultValueSql("'2'");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Instprograms)
                    .WithMany(p => p.Cminstitemservices)
                    .HasForeignKey(d => d.InstprogramsId)
                    .HasConstraintName("CMINSTITEMSERVICES_R04");

                entity.HasOne(d => d.OwnercompanyNavigation)
                    .WithMany(p => p.Cminstitemservices)
                    .HasForeignKey(d => d.Ownercompany)
                    .HasConstraintName("CMINSTITEMSERVICES_R03");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Cminstitemservices)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("CMINSTITEMSERVICES_R02");
            });

            modelBuilder.Entity<Cminstitemtemplete>(entity =>
            {
                entity.ToTable("CMINSTITEMTEMPLETE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Attachmentsvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTSVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTSVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Featuresvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATURESVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATURESVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.HandoverDateActualDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_ACTUAL_DATE");

                entity.Property(e => e.HandoverDateExpectedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_EXPECTED_DATE");

                entity.Property(e => e.HandoverDateInDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_IN_DATE");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Mandatoryid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORYID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(10,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Rentval)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("RENTVAL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Rentvalperiod)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RENTVALPERIOD")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Servicesvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Templetedesignid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TEMPLETEDESIGNID")
                    .HasDefaultValueSql("NULL");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitcount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCOUNT");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Cminstitemtempletes)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("CMINSTITEMTEMPLETE_R03");

                entity.HasOne(d => d.InstitemMainTypes)
                    .WithMany(p => p.Cminstitemtempletes)
                    .HasForeignKey(d => d.InstitemMainTypesId)
                    .HasConstraintName("CMINSTITEMTEMPLETE_R01");

                entity.HasOne(d => d.Mandatory)
                    .WithMany(p => p.Cminstitemtempletes)
                    .HasForeignKey(d => d.Mandatoryid)
                    .HasConstraintName("CMINSTITEMTEMPLETE_R04");

                entity.HasOne(d => d.Templetedesign)
                    .WithMany(p => p.Cminstitemtempletes)
                    .HasForeignKey(d => d.Templetedesignid)
                    .HasConstraintName("CMINSTITEMTEMPLETE_R02");
            });

            modelBuilder.Entity<Cminstitemtempletedesign>(entity =>
            {
                entity.ToTable("CMINSTITEMTEMPLETEDESIGN");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Codepost)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODEPOST");

                entity.Property(e => e.Codepre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODEPRE");

                entity.Property(e => e.Layoutid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUTID");

                entity.Property(e => e.Seriallength)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERIALLENGTH");

                entity.Property(e => e.Serialstart)
                    .HasPrecision(1)
                    .HasColumnName("SERIALSTART");

                entity.HasOne(d => d.Layout)
                    .WithMany(p => p.Cminstitemtempletedesigns)
                    .HasForeignKey(d => d.Layoutid)
                    .HasConstraintName("CMINSTITEMTEMPLETEDESIGN_R01");
            });

            modelBuilder.Entity<Codechange>(entity =>
            {
                entity.ToTable("CODECHANGE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Newcode)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NEWCODE");

                entity.Property(e => e.Newformid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEWFORMID");

                entity.Property(e => e.Oldcode)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("OLDCODE");

                entity.Property(e => e.Oldformid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDFORMID");

                entity.Property(e => e.Recid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("RECID");
            });

            modelBuilder.Entity<Codelinkpartdetail>(entity =>
            {
                entity.ToTable("CODELINKPARTDETAIL");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Accountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTID");

                entity.Property(e => e.Codelinkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODELINKID");

                entity.Property(e => e.Storeallsubcodeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREALLSUBCODEID");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Codelinkpartdetails)
                    .HasForeignKey(d => d.Accountid)
                    .HasConstraintName("CODELINKPARTDETAIL_R01");

                entity.HasOne(d => d.Codelink)
                    .WithMany(p => p.Codelinkpartdetails)
                    .HasForeignKey(d => d.Codelinkid)
                    .HasConstraintName("CODELINKPARTDETAIL_R02");

                entity.HasOne(d => d.Storeallsubcode)
                    .WithMany(p => p.Codelinkpartdetails)
                    .HasForeignKey(d => d.Storeallsubcodeid)
                    .HasConstraintName("CODELINKPARTDETAIL_R03");
            });

            modelBuilder.Entity<Codelinkservacc>(entity =>
            {
                entity.ToTable("CODELINKSERVACCS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Accountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTID");

                entity.Property(e => e.Codelinksid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODELINKSID");

                entity.Property(e => e.Servicetypeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICETYPEID");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Codelinkservaccs)
                    .HasForeignKey(d => d.Accountid)
                    .HasConstraintName("CODELINKSERVACCS_R02");

                entity.HasOne(d => d.Codelinks)
                    .WithMany(p => p.Codelinkservaccs)
                    .HasForeignKey(d => d.Codelinksid)
                    .HasConstraintName("CODELINKSERVACCS_R01");

                entity.HasOne(d => d.Servicetype)
                    .WithMany(p => p.Codelinkservaccs)
                    .HasForeignKey(d => d.Servicetypeid)
                    .HasConstraintName("CODELINKSERVACCS_R03");
            });

            modelBuilder.Entity<Codepart1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CODEPART1");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartCodeEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME");

                entity.Property(e => e.PartCodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME");
            });

            modelBuilder.Entity<Codepart10>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CODEPART10");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartCodeEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME");

                entity.Property(e => e.PartCodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME");
            });

            modelBuilder.Entity<Codepart22>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CODEPART22");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartCodeEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME");

                entity.Property(e => e.PartCodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME");
            });

            modelBuilder.Entity<Codepart3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CODEPART3");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartCodeEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME");

                entity.Property(e => e.PartCodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME");
            });

            modelBuilder.Entity<Codepart4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CODEPART4");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartCodeEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME");

                entity.Property(e => e.PartCodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME");
            });

            modelBuilder.Entity<Codepart5>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CODEPART5");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartCodeEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME");

                entity.Property(e => e.PartCodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME");
            });

            modelBuilder.Entity<Codepart6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CODEPART6");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartCodeEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME");

                entity.Property(e => e.PartCodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME");
            });

            modelBuilder.Entity<Codepart7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CODEPART7");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartCodeEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME");

                entity.Property(e => e.PartCodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME");
            });

            modelBuilder.Entity<Codepart8>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CODEPART8");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartCodeEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME");

                entity.Property(e => e.PartCodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME");
            });

            modelBuilder.Entity<Codepart9>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CODEPART9");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartCodeEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME");

                entity.Property(e => e.PartCodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME");
            });

            modelBuilder.Entity<Codeslink>(entity =>
            {
                entity.ToTable("CODESLINK");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Accountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAINTYPEID");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Codeslinks)
                    .HasForeignKey(d => d.Accountid)
                    .HasConstraintName("CODESLINK_FK1");

                entity.HasOne(d => d.Maintype)
                    .WithMany(p => p.Codeslinks)
                    .HasForeignKey(d => d.Maintypeid)
                    .HasConstraintName("CODESLINK_FK2");
            });

            modelBuilder.Entity<Codeslinkdetail>(entity =>
            {
                entity.ToTable("CODESLINKDETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Accountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTID");

                entity.Property(e => e.Codelinksid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODELINKSID");

                entity.Property(e => e.StoreAllcodeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ALLCODEID");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Codeslinkdetails)
                    .HasForeignKey(d => d.Accountid)
                    .HasConstraintName("CODESLINKDETAILS_FK2");

                entity.HasOne(d => d.Codelinks)
                    .WithMany(p => p.Codeslinkdetails)
                    .HasForeignKey(d => d.Codelinksid)
                    .HasConstraintName("CODESLINKDETAILS_FK1");

                entity.HasOne(d => d.StoreAllcode)
                    .WithMany(p => p.Codeslinkdetails)
                    .HasForeignKey(d => d.StoreAllcodeid)
                    .HasConstraintName("CODESLINKDETAILS_FK3");
            });

            modelBuilder.Entity<Codeslinkitemdetail>(entity =>
            {
                entity.ToTable("CODESLINKITEMDETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Accountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTID");

                entity.Property(e => e.Codelinksid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODELINKSID");

                entity.Property(e => e.StoreItemsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ITEMSID");

                entity.Property(e => e.StoreItemspecsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ITEMSPECSID");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Codeslinkitemdetails)
                    .HasForeignKey(d => d.Accountid)
                    .HasConstraintName("CODESLINKITEMDETAILS_FK2");

                entity.HasOne(d => d.Codelinks)
                    .WithMany(p => p.Codeslinkitemdetails)
                    .HasForeignKey(d => d.Codelinksid)
                    .HasConstraintName("CODESLINKITEMDETAILS_FK1");

                entity.HasOne(d => d.StoreItems)
                    .WithMany(p => p.Codeslinkitemdetails)
                    .HasForeignKey(d => d.StoreItemsid)
                    .HasConstraintName("CODESLINKITEMDETAILS_FK3");
            });

            modelBuilder.Entity<Commissionrule>(entity =>
            {
                entity.ToTable("COMMISSIONRULES");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Cratio)
                    .HasColumnType("NUMBER(9,5)")
                    .HasColumnName("CRATIO")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Duestaffclassid)
                    .HasPrecision(10)
                    .HasColumnName("DUESTAFFCLASSID");

                entity.Property(e => e.Duestaffsubclassid)
                    .HasPrecision(10)
                    .HasColumnName("DUESTAFFSUBCLASSID");

                entity.Property(e => e.Stafflevelsid)
                    .HasPrecision(10)
                    .HasColumnName("STAFFLEVELSID");
            });

            modelBuilder.Entity<Committee>(entity =>
            {
                entity.ToTable("COMMITTEE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Namear)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAMEAR");

                entity.Property(e => e.Promotion)
                    .HasPrecision(1)
                    .HasColumnName("PROMOTION");
            });

            modelBuilder.Entity<Committeedetail>(entity =>
            {
                entity.ToTable("COMMITTEEDETAIL");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Committeeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITTEEID");

                entity.Property(e => e.Empid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EMPID");

                entity.Property(e => e.Empname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EMPNAME");

                entity.HasOne(d => d.Committee)
                    .WithMany(p => p.Committeedetails)
                    .HasForeignKey(d => d.Committeeid)
                    .HasConstraintName("COMMITTEID");
            });

            modelBuilder.Entity<CommonCity>(entity =>
            {
                entity.ToTable("COMMON_CITY");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Country)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Englishdescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENGLISHDESCRIPTION");

                entity.Property(e => e.Isdefault)
                    .HasPrecision(1)
                    .HasColumnName("ISDEFAULT");

                entity.Property(e => e.Region)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REGION");

                entity.Property(e => e.Section)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SECTION");
            });

            modelBuilder.Entity<CommonCompany>(entity =>
            {
                entity.ToTable("COMMON_COMPANY");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<CommonCountry>(entity =>
            {
                entity.ToTable("COMMON_COUNTRY");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Femalenationality)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FEMALENATIONALITY");

                entity.Property(e => e.Isdefault)
                    .HasPrecision(1)
                    .HasColumnName("ISDEFAULT");

                entity.Property(e => e.Malenationality)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MALENATIONALITY");
            });

            modelBuilder.Entity<CommonDate>(entity =>
            {
                entity.HasKey(e => e.Miladi)
                    .HasName("COMMON_DATES_MILADI_1");

                entity.ToTable("COMMON_DATES");

                entity.Property(e => e.Miladi)
                    .HasColumnType("DATE")
                    .HasColumnName("MILADI");

                entity.Property(e => e.Hijri)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("HIJRI");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<CommonDepartment>(entity =>
            {
                entity.ToTable("COMMON_DEPARTMENT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Isdefault)
                    .HasPrecision(1)
                    .HasColumnName("ISDEFAULT");
            });

            modelBuilder.Entity<CommonEmployee>(entity =>
            {
                entity.ToTable("COMMON_EMPLOYEE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Attendancecode)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ATTENDANCECODE");

                entity.Property(e => e.Attendancegroup)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ATTENDANCEGROUP");

                entity.Property(e => e.Authorityflag)
                    .HasPrecision(1)
                    .HasColumnName("AUTHORITYFLAG");

                entity.Property(e => e.Branch)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH");

                entity.Property(e => e.Canseeallstore)
                    .HasPrecision(1)
                    .HasColumnName("CANSEEALLSTORE")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Canseeprivateglaccounts)
                    .HasPrecision(1)
                    .HasColumnName("CANSEEPRIVATEGLACCOUNTS");

                entity.Property(e => e.Canviewdepartmentmessages)
                    .HasPrecision(1)
                    .HasColumnName("CANVIEWDEPARTMENTMESSAGES");

                entity.Property(e => e.City)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("CITY");

                entity.Property(e => e.Department)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("DEPARTMENT");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Employeecode)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("EMPLOYEECODE");

                entity.Property(e => e.Ext)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EXT");

                entity.Property(e => e.Firstname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FIRSTNAME");

                entity.Property(e => e.Gender)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GENDER");

                entity.Property(e => e.Isactive)
                    .HasPrecision(1)
                    .HasColumnName("ISACTIVE");

                entity.Property(e => e.Isdepartmentmanager)
                    .HasPrecision(1)
                    .HasColumnName("ISDEPARTMENTMANAGER");

                entity.Property(e => e.Isemployee)
                    .HasPrecision(1)
                    .HasColumnName("ISEMPLOYEE");

                entity.Property(e => e.Isinternalcommunicator)
                    .HasPrecision(1)
                    .HasColumnName("ISINTERNALCOMMUNICATOR");

                entity.Property(e => e.Ismanager)
                    .HasPrecision(1)
                    .HasColumnName("ISMANAGER");

                entity.Property(e => e.Jobtitle)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JOBTITLE");

                entity.Property(e => e.Lastname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LASTNAME");

                entity.Property(e => e.Tel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TEL");

                entity.Property(e => e.Users)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("USERS");
            });

            modelBuilder.Entity<CommonFlag>(entity =>
            {
                entity.ToTable("COMMON_FLAG");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Flag)
                    .HasPrecision(1)
                    .HasColumnName("FLAG");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NAME");
            });

            modelBuilder.Entity<CommonHijriDateAdjustment>(entity =>
            {
                entity.ToTable("COMMON_HIJRI_DATE_ADJUSTMENT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.Hijridate)
                    .HasColumnType("DATE")
                    .HasColumnName("HIJRIDATE");

                entity.Property(e => e.Miladidate)
                    .HasColumnType("DATE")
                    .HasColumnName("MILADIDATE");

                entity.Property(e => e.Value)
                    .HasPrecision(11)
                    .HasColumnName("VALUE")
                    .HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<CommonLastSequence>(entity =>
            {
                entity.ToTable("COMMON_LAST_SEQUENCE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Classname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CLASSNAME");

                entity.Property(e => e.Classsequence)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("CLASSSEQUENCE");
            });

            modelBuilder.Entity<CommonRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("COMMON_REGION");

                entity.HasIndex(e => e.Id, "COMMON_REGION_ID_1")
                    .IsUnique();

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Country)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<CommonType>(entity =>
            {
                entity.ToTable("COMMON_TYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Ardesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ARDESC");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<CommonTypesdatum>(entity =>
            {
                entity.ToTable("COMMON_TYPESDATA");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Typeid)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("TYPEID");
            });

            modelBuilder.Entity<CompanyName>(entity =>
            {
                entity.ToTable("COMPANY_NAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .HasColumnName("CODE");

                entity.Property(e => e.CompanyName1)
                    .HasMaxLength(100)
                    .HasColumnName("COMPANY_NAME");

                entity.Property(e => e.SchemaName)
                    .HasMaxLength(100)
                    .HasColumnName("SCHEMA_NAME");
            });

            modelBuilder.Entity<Companyinfo>(entity =>
            {
                entity.ToTable("COMPANYINFO");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Appearance)
                    .HasPrecision(10)
                    .HasColumnName("APPEARANCE");

                entity.Property(e => e.Attribute)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ATTRIBUTE");

                entity.Property(e => e.Detailsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DETAILSID");

                entity.Property(e => e.Value)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("VALUE");

                entity.HasOne(d => d.Details)
                    .WithMany(p => p.Companyinfos)
                    .HasForeignKey(d => d.Detailsid)
                    .HasConstraintName("COMPANYINFO_FK1");
            });

            modelBuilder.Entity<Companyinformation>(entity =>
            {
                entity.ToTable("COMPANYINFORMATION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.CompanyAddress).HasColumnName("COMPANY_ADDRESS");

                entity.Property(e => e.CompanyLogo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY_LOGO");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(1000)
                    .HasColumnName("COMPANY_NAME");

                entity.Property(e => e.CompanyRecordTrading)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("COMPANY_RECORD_TRADING");

                entity.Property(e => e.Companynametaxes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYNAMETAXES");

                entity.Property(e => e.Companyno)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYNO");

                entity.Property(e => e.Companytaxno)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYTAXNO");
            });

            modelBuilder.Entity<Companyinfoview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("COMPANYINFOVIEW");

                entity.Property(e => e.CompanyLogo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY_LOGO");

                entity.Property(e => e.CompanyRecordTrading)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("COMPANY_RECORD_TRADING");

                entity.Property(e => e.Companyinformationid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPANYINFORMATIONID");

                entity.Property(e => e.Companynametaxes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYNAMETAXES");

                entity.Property(e => e.Companyno)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYNO");

                entity.Property(e => e.Copmaddress).HasColumnName("COPMADDRESS");

                entity.Property(e => e.Copmid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COPMID");

                entity.Property(e => e.Copmname)
                    .HasMaxLength(1000)
                    .HasColumnName("COPMNAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Idnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IDNUM");

                entity.Property(e => e.Isactive)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ISACTIVE");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("NAME");

                entity.Property(e => e.Position)
                    .HasMaxLength(50)
                    .HasColumnName("POSITION");
            });

            modelBuilder.Entity<Companyresponsable>(entity =>
            {
                entity.ToTable("COMPANYRESPONSABLE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Companyinformationid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPANYINFORMATIONID");

                entity.Property(e => e.Idnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IDNUM");

                entity.Property(e => e.Isactive)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ISACTIVE");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("NAME");

                entity.Property(e => e.Position)
                    .HasMaxLength(50)
                    .HasColumnName("POSITION");

                entity.HasOne(d => d.Companyinformation)
                    .WithMany(p => p.Companyresponsables)
                    .HasForeignKey(d => d.Companyinformationid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("COMPANYRESPONSABLE_R01");
            });

            modelBuilder.Entity<Companysale>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("COMPANYSALES");
            });

            modelBuilder.Entity<Compositeinstitem>(entity =>
            {
                entity.ToTable("COMPOSITEINSTITEM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Bussinessid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BUSSINESSID");

                entity.Property(e => e.Code)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("NAME");

                entity.HasOne(d => d.Bussiness)
                    .WithMany(p => p.Compositeinstitems)
                    .HasForeignKey(d => d.Bussinessid)
                    .HasConstraintName("COMPOSITEINSTITEM_R01");
            });

            modelBuilder.Entity<Conditionsbooklet>(entity =>
            {
                entity.ToTable("CONDITIONSBOOKLET");

                entity.HasIndex(e => e.Trnsno, "CONDITIONSBOOKLET_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Bookletno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BOOKLETNO");

                entity.Property(e => e.Customerid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.Paymentbanknum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAYMENTBANKNUM");

                entity.Property(e => e.Refunded)
                    .HasPrecision(1)
                    .HasColumnName("REFUNDED");

                entity.Property(e => e.State)
                    .HasPrecision(1)
                    .HasColumnName("STATE");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");

                entity.Property(e => e.Trnsno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSNO");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Conditionsbooklets)
                    .HasForeignKey(d => d.Customerid)
                    .HasConstraintName("CONDITIONSBOOKLET_R01");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Conditionsbooklets)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("SYS_C0019932");
            });

            modelBuilder.Entity<Contractcustomerinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CONTRACTCUSTOMERINFO");

                entity.Property(e => e.Attribute)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ATTRIBUTE");

                entity.Property(e => e.Orignalname)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ORIGNALNAME");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Value)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<Convlegalaffair>(entity =>
            {
                entity.ToTable("CONVLEGALAFFAIR");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Convdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONVDATE");

                entity.Property(e => e.Convreason)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONVREASON");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Convlegalaffairs)
                    .HasForeignKey(d => d.Saleformid)
                    .HasConstraintName("SYS_C0019753");
            });

            modelBuilder.Entity<CostDistributionM>(entity =>
            {
                entity.ToTable("COST_DISTRIBUTION_M");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Fromdate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROMDATE");

                entity.Property(e => e.Remark).HasColumnName("REMARK");

                entity.Property(e => e.Todate)
                    .HasColumnType("DATE")
                    .HasColumnName("TODATE");

                entity.Property(e => e.Trnsno)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSNO");
            });

            modelBuilder.Entity<CostDistributionO>(entity =>
            {
                entity.ToTable("COST_DISTRIBUTION_O");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Accountid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCOUNTID");

                entity.Property(e => e.Cost)
                    .HasColumnType("NUMBER(24,9)")
                    .HasColumnName("COST");

                entity.Property(e => e.CostDistributionMid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("COST_DISTRIBUTION_MID");

                entity.HasOne(d => d.CostDistributionM)
                    .WithMany(p => p.CostDistributionOs)
                    .HasForeignKey(d => d.CostDistributionMid)
                    .HasConstraintName("COST_DISTRIBUTION_O_R01");
            });

            modelBuilder.Entity<Costcalculation>(entity =>
            {
                entity.ToTable("COSTCALCULATION");

                entity.HasIndex(e => e.TrnsCode, "COSTCALCULATION_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AddExp)
                    .HasPrecision(1)
                    .HasColumnName("ADD_EXP");

                entity.Property(e => e.AddTax)
                    .HasPrecision(1)
                    .HasColumnName("ADD_TAX");

                entity.Property(e => e.DiscExp)
                    .HasPrecision(1)
                    .HasColumnName("DISC_EXP");

                entity.Property(e => e.DiscTax)
                    .HasPrecision(1)
                    .HasColumnName("DISC_TAX");

                entity.Property(e => e.ItemDisc)
                    .HasPrecision(1)
                    .HasColumnName("ITEM_DISC");

                entity.Property(e => e.ItemDisc2)
                    .HasPrecision(1)
                    .HasColumnName("ITEM_DISC2");

                entity.Property(e => e.ItemPrice)
                    .HasPrecision(1)
                    .HasColumnName("ITEM_PRICE");

                entity.Property(e => e.ItemPrice2)
                    .HasPrecision(1)
                    .HasColumnName("ITEM_PRICE2");

                entity.Property(e => e.ItemTax)
                    .HasPrecision(1)
                    .HasColumnName("ITEM_TAX");

                entity.Property(e => e.NotaffectExp)
                    .HasPrecision(1)
                    .HasColumnName("NOTAFFECT_EXP");

                entity.Property(e => e.TransportCost)
                    .HasPrecision(1)
                    .HasColumnName("TRANSPORT_COST");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.TrnsDisc)
                    .HasPrecision(1)
                    .HasColumnName("TRNS_DISC");

                entity.Property(e => e.TrnsTax)
                    .HasPrecision(1)
                    .HasColumnName("TRNS_TAX");

                entity.HasOne(d => d.TrnsCodeNavigation)
                    .WithOne(p => p.Costcalculation)
                    .HasForeignKey<Costcalculation>(d => d.TrnsCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("COSTCALCULATION_R01");
            });

            modelBuilder.Entity<Costcenter>(entity =>
            {
                entity.ToTable("COSTCENTER");

                entity.Property(e => e.Costcenterid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("COSTCENTERID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Datecreated)
                    .HasColumnType("DATE")
                    .HasColumnName("DATECREATED")
                    .HasDefaultValueSql("sysdate");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Initialbalancecreadit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INITIALBALANCECREADIT");

                entity.Property(e => e.Initialbalancedebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INITIALBALANCEDEBIT");

                entity.Property(e => e.Parentid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PARENTID");

                entity.Property(e => e.Productionrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRODUCTIONRATE");

                entity.Property(e => e.Productionunitcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRODUCTIONUNITCOST");

                entity.Property(e => e.Specid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SPECID");

                entity.Property(e => e.Workhourcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("WORKHOURCOST");

                entity.Property(e => e.Workhours)
                    .HasColumnType("NUMBER")
                    .HasColumnName("WORKHOURS");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Costcenters)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("COSTCENTER_FK2");

                entity.HasOne(d => d.Spec)
                    .WithMany(p => p.Costcenters)
                    .HasForeignKey(d => d.Specid)
                    .HasConstraintName("COSTCENTER_FK1");
            });

            modelBuilder.Entity<CostcenterT>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("DASDAS");

                entity.ToTable("COSTCENTER_T");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Aname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Dimensionlevelsid)
                    .HasColumnType("FLOAT")
                    .HasColumnName("DIMENSIONLEVELSID");

                entity.Property(e => e.Isdetailed)
                    .HasPrecision(1)
                    .HasColumnName("ISDETAILED");

                entity.Property(e => e.Islastmaindimensions)
                    .HasPrecision(1)
                    .HasColumnName("ISLASTMAINDIMENSIONS");

                entity.Property(e => e.Levelid)
                    .HasColumnType("FLOAT")
                    .HasColumnName("LEVELID");

                entity.Property(e => e.Parentcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PARENTCODE");
            });

            modelBuilder.Entity<Criteria>(entity =>
            {
                entity.HasKey(e => e.Cid)
                    .HasName("PK_CON");

                entity.ToTable("CRITERIAS");

                entity.Property(e => e.Cid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CID");

                entity.Property(e => e.Cname)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CNAME");

                entity.Property(e => e.Tname)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TNAME");
            });

            modelBuilder.Entity<Ctransworkarround>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CTRANSWORKARROUND");

                entity.Property(e => e.Depdetailid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEPDETAILID");

                entity.Property(e => e.Innerdepqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INNERDEPQTY");

                entity.Property(e => e.Newdocnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NEWDOCNUM");

                entity.Property(e => e.Newmid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEWMID");

                entity.Property(e => e.Newoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEWOID");

                entity.Property(e => e.Newqty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("NEWQTY");

                entity.Property(e => e.Newtrnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEWTRNSCODE");

                entity.Property(e => e.Newunitprice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("NEWUNITPRICE");

                entity.Property(e => e.Newunitprice2)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("NEWUNITPRICE2");

                entity.Property(e => e.Olddepcoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDDEPCOID");

                entity.Property(e => e.Olddepcoidnew)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OLDDEPCOIDNEW");

                entity.Property(e => e.Olddepmid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDDEPMID");

                entity.Property(e => e.Olddeppoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDDEPPOID");

                entity.Property(e => e.Olddocnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OLDDOCNUM");

                entity.Property(e => e.Oldmid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDMID");

                entity.Property(e => e.Oldoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDOID");

                entity.Property(e => e.Oldqty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("OLDQTY");

                entity.Property(e => e.Oldtrnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDTRNSCODE");

                entity.Property(e => e.Oldunitprice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("OLDUNITPRICE");

                entity.Property(e => e.Oldunitprice2)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("OLDUNITPRICE2");
            });

            modelBuilder.Entity<Ctransworkarround2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CTRANSWORKARROUND2");

                entity.Property(e => e.Deliveryplace2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERYPLACE2");

                entity.Property(e => e.Depdetailid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEPDETAILID");

                entity.Property(e => e.Innerdepqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INNERDEPQTY");

                entity.Property(e => e.Newdocnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NEWDOCNUM");

                entity.Property(e => e.Newmid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEWMID");

                entity.Property(e => e.Newoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEWOID");

                entity.Property(e => e.Newqty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("NEWQTY");

                entity.Property(e => e.Newtrnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEWTRNSCODE");

                entity.Property(e => e.Newunitprice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("NEWUNITPRICE");

                entity.Property(e => e.Newunitprice2)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("NEWUNITPRICE2");

                entity.Property(e => e.Olddepcoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDDEPCOID");

                entity.Property(e => e.Olddepcoidnew)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OLDDEPCOIDNEW");

                entity.Property(e => e.Olddepmid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDDEPMID");

                entity.Property(e => e.Olddeppoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDDEPPOID");

                entity.Property(e => e.Olddocnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OLDDOCNUM");

                entity.Property(e => e.Oldmid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDMID");

                entity.Property(e => e.Oldmid2)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDMID2");

                entity.Property(e => e.Oldoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDOID");

                entity.Property(e => e.Oldqty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("OLDQTY");

                entity.Property(e => e.Oldtrnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDTRNSCODE");

                entity.Property(e => e.Oldunitprice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("OLDUNITPRICE");

                entity.Property(e => e.Oldunitprice2)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("OLDUNITPRICE2");

                entity.Property(e => e.Storedocnum2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREDOCNUM2");

                entity.Property(e => e.TrnsNo2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO2");
            });

            modelBuilder.Entity<Ctransworkarround3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CTRANSWORKARROUND3");

                entity.Property(e => e.Deliveryplace2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERYPLACE2");

                entity.Property(e => e.Deliveryplace3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERYPLACE3");

                entity.Property(e => e.Depdetailid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEPDETAILID");

                entity.Property(e => e.Innerdepqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INNERDEPQTY");

                entity.Property(e => e.Newdocnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NEWDOCNUM");

                entity.Property(e => e.Newmid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEWMID");

                entity.Property(e => e.Newoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEWOID");

                entity.Property(e => e.Newqty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("NEWQTY");

                entity.Property(e => e.Newtrnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEWTRNSCODE");

                entity.Property(e => e.Newunitprice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("NEWUNITPRICE");

                entity.Property(e => e.Newunitprice2)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("NEWUNITPRICE2");

                entity.Property(e => e.Olddepcoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDDEPCOID");

                entity.Property(e => e.Olddepcoidnew)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OLDDEPCOIDNEW");

                entity.Property(e => e.Olddepmid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDDEPMID");

                entity.Property(e => e.Olddeppoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDDEPPOID");

                entity.Property(e => e.Olddocnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OLDDOCNUM");

                entity.Property(e => e.Oldmid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDMID");

                entity.Property(e => e.Oldmid2)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDMID2");

                entity.Property(e => e.Oldmid3)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDMID3");

                entity.Property(e => e.Oldoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDOID");

                entity.Property(e => e.Oldqty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("OLDQTY");

                entity.Property(e => e.Oldtrnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("OLDTRNSCODE");

                entity.Property(e => e.Oldunitprice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("OLDUNITPRICE");

                entity.Property(e => e.Oldunitprice2)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("OLDUNITPRICE2");

                entity.Property(e => e.Storedocnum2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREDOCNUM2");

                entity.Property(e => e.Storedocnum3)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREDOCNUM3");

                entity.Property(e => e.TrnsNo2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO2");

                entity.Property(e => e.TrnsNo3)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO3");
            });

            modelBuilder.Entity<Currencydiff>(entity =>
            {
                entity.ToTable("CURRENCYDIFF");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Codelinkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODELINKID");

                entity.Property(e => e.Indivvalue)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INDIVVALUE");
            });

            modelBuilder.Entity<Currencym>(entity =>
            {
                entity.ToTable("CURRENCYM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AcurrUnit1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACURR_UNIT1");

                entity.Property(e => e.AcurrUnit2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACURR_UNIT2");

                entity.Property(e => e.AcurrUnit3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACURR_UNIT3");

                entity.Property(e => e.AcurrUnit4)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACURR_UNIT4");

                entity.Property(e => e.AfracUnit1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AFRAC_UNIT1");

                entity.Property(e => e.AfracUnit2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AFRAC_UNIT2");

                entity.Property(e => e.AfracUnit3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AFRAC_UNIT3");

                entity.Property(e => e.AfracUnit4)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AFRAC_UNIT4");

                entity.Property(e => e.Aname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.EcurrUnit1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ECURR_UNIT1");

                entity.Property(e => e.EcurrUnit2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ECURR_UNIT2");

                entity.Property(e => e.EcurrUnit3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ECURR_UNIT3");

                entity.Property(e => e.EcurrUnit4)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ECURR_UNIT4");

                entity.Property(e => e.EfracUnit1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EFRAC_UNIT1");

                entity.Property(e => e.EfracUnit2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EFRAC_UNIT2");

                entity.Property(e => e.EfracUnit3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EFRAC_UNIT3");

                entity.Property(e => e.EfracUnit4)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EFRAC_UNIT4");

                entity.Property(e => e.Ename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Isdefault)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISDEFAULT");

                entity.Property(e => e.Shortname)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SHORTNAME");
            });

            modelBuilder.Entity<Currencyo>(entity =>
            {
                entity.ToTable("CURRENCYO");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Currmid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRMID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Rate)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("RATE");

                entity.HasOne(d => d.Currm)
                    .WithMany(p => p.Currencyos)
                    .HasForeignKey(d => d.Currmid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("CURRENCYO_FK1");
            });

            modelBuilder.Entity<Cust11>(entity =>
            {
                entity.HasKey(e => e.Ser)
                    .HasName("SYS_C0017704");

                entity.ToTable("CUST_11");

                entity.Property(e => e.Ser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SER");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");
            });

            modelBuilder.Entity<CustSalformAcc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CUST_SALFORM_ACC");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Description)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedFixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_FIXEDCOST");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<CustSalformAccInsteadProc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CUST_SALFORM_ACC_INSTEAD_PROC");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Description)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Edescription)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("EDESCRIPTION");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.Instid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTID");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Originaldesc)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ORIGINALDESC");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedFixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_FIXEDCOST");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Trnsnum)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TRNSNUM");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<CustSalformAllpayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CUST_SALFORM_ALLPAYMENT");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Description)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Edescription)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("EDESCRIPTION");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.Instid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTID");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedFixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_FIXEDCOST");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Trnsno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSNO");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<CustomerDimensionsdetail>(entity =>
            {
                entity.ToTable("CUSTOMER_DIMENSIONSDETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensionsdetailsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONSDETAILS_ID");

                entity.Property(e => e.DimensionsdetailsParentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONSDETAILS_PARENTID");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.HasOne(d => d.Dimensionsdetails)
                    .WithMany(p => p.CustomerDimensionsdetails)
                    .HasForeignKey(d => d.DimensionsdetailsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("CUSTOMER_DIMENSIONSDETAILS_R02");

                entity.HasOne(d => d.StoreAllcodes)
                    .WithMany(p => p.CustomerDimensionsdetails)
                    .HasForeignKey(d => d.StoreAllcodesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("CUSTOMER_DIMENSIONSDETAILS_R01");
            });

            modelBuilder.Entity<Customerinformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CUSTOMERINFORMATION");

                entity.Property(e => e.Attribute)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ATTRIBUTE");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Value)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<Customersalesanalysisbyitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CUSTOMERSALESANALYSISBYITEM");

                entity.Property(e => e.Allreturnedvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLRETURNEDVALUE");

                entity.Property(e => e.Allsalesvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLSALESVALUE");

                entity.Property(e => e.Backprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BACKPRICE");

                entity.Property(e => e.Backqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BACKQTY");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Ctaxdiscreturnedvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAXDISCRETURNEDVALUE");

                entity.Property(e => e.Ctaxdiscsalesvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAXDISCSALESVALUE");

                entity.Property(e => e.Ctaxreturnedvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAXRETURNEDVALUE");

                entity.Property(e => e.Ctaxsalesvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAXSALESVALUE");

                entity.Property(e => e.Curraname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRANAME");

                entity.Property(e => e.Currename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Custcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTCODE");

                entity.Property(e => e.Custename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTENAME");

                entity.Property(e => e.Custformename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTFORMENAME");

                entity.Property(e => e.Custformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTFORMID");

                entity.Property(e => e.Custformname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTFORMNAME");

                entity.Property(e => e.Custid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTID");

                entity.Property(e => e.Custname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTNAME");

                entity.Property(e => e.Freeitem)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FREEITEM");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_CODE");

                entity.Property(e => e.ItemEname)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_ENAME");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_NAME");

                entity.Property(e => e.Itemformename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMFORMENAME");

                entity.Property(e => e.Itemformid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMFORMID");

                entity.Property(e => e.Itemformname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMFORMNAME");

                entity.Property(e => e.Itemgroupf)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMGROUPF");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.Payeffect)
                    .HasPrecision(1)
                    .HasColumnName("PAYEFFECT");

                entity.Property(e => e.Qtyeffect)
                    .HasPrecision(1)
                    .HasColumnName("QTYEFFECT");

                entity.Property(e => e.Salesprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALESPRICE");

                entity.Property(e => e.Salesqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALESQTY");

                entity.Property(e => e.Staxreturnedvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAXRETURNEDVALUE");

                entity.Property(e => e.Staxsalesvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAXSALESVALUE");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");

                entity.Property(e => e.Unitename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNITENAME");

                entity.Property(e => e.Unitname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNITNAME");
            });

            modelBuilder.Entity<DateCheckIscanceled>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DATE_CHECK_ISCANCELED");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");
            });

            modelBuilder.Entity<DateCheckIscollected>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DATE_CHECK_ISCOLLECTED");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");
            });

            modelBuilder.Entity<DateCheckIscollectedNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DATE_CHECK_ISCOLLECTED_NEW");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");
            });

            modelBuilder.Entity<Day>(entity =>
            {
                entity.HasKey(e => e.Dd)
                    .HasName("DAYS_PK");

                entity.ToTable("DAYS");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");
            });

            modelBuilder.Entity<DbUpdate>(entity =>
            {
                entity.ToTable("DB_UPDATE");

                entity.Property(e => e.Dbupdateid)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DBUPDATEID");

                entity.Property(e => e.Createdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATEDATE")
                    .HasDefaultValueSql("sysdate\n");

                entity.Property(e => e.Filename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FILENAME")
                    .HasDefaultValueSql("NULL");

                entity.Property(e => e.Lastver)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LASTVER");
            });

            modelBuilder.Entity<Defaulttype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DEFAULTTYPE");

                entity.Property(e => e.Aname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<DefinePreference>(entity =>
            {
                entity.HasKey(e => new { e.Code, e.Preftype })
                    .HasName("DEFINE_PREFERENCES_PK");

                entity.ToTable("DEFINE_PREFERENCES");

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Preftype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PREFTYPE");

                entity.Property(e => e.App)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("APP");

                entity.Property(e => e.Defaultvalue)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULTVALUE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");
            });

            modelBuilder.Entity<DelayedInstalmentPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DELAYED_INSTALMENT_PAYMENTS");

                entity.Property(e => e.Adds)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDS");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.ApartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME1");

                entity.Property(e => e.ApartName22)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME22");

                entity.Property(e => e.ApartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME3");

                entity.Property(e => e.ApartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME4");

                entity.Property(e => e.Custaname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTANAME");

                entity.Property(e => e.Custename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTENAME");

                entity.Property(e => e.Deducs)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEDUCS");

                entity.Property(e => e.Delay)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DELAY");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.EpartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME1");

                entity.Property(e => e.EpartName22)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME22");

                entity.Property(e => e.EpartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME3");

                entity.Property(e => e.EpartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME4");

                entity.Property(e => e.FinanceGuardian)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCE_GUARDIAN");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentbenfitvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTBENFITVALUE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instalmentownerid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTOWNERID");

                entity.Property(e => e.Instalmentpartsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTPARTSID");

                entity.Property(e => e.Instalmentvalueonly)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTVALUEONLY");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.Mandatoryid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORYID");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.PartCode1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE1");

                entity.Property(e => e.PartCode22)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE22");

                entity.Property(e => e.PartCode3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE3");

                entity.Property(e => e.PartCode4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE4");

                entity.Property(e => e.PartCodeEname1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME1");

                entity.Property(e => e.PartCodeEname22)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME22");

                entity.Property(e => e.PartCodeEname3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME3");

                entity.Property(e => e.PartCodeEname4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME4");

                entity.Property(e => e.PartCodeName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME1");

                entity.Property(e => e.PartCodeName22)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME22");

                entity.Property(e => e.PartCodeName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME3");

                entity.Property(e => e.PartCodeName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME4");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedFixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_FIXEDCOST");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Serialename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALENAME");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.Staff1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF1");

                entity.Property(e => e.Staff2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF2");

                entity.Property(e => e.Staffaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFFANAME");

                entity.Property(e => e.Staffaname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFFANAME2");

                entity.Property(e => e.Staffename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFFENAME");

                entity.Property(e => e.Staffename2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFFENAME2");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");
            });

            modelBuilder.Entity<Departmenttest>(entity =>
            {
                entity.HasKey(e => e.Depid)
                    .HasName("DEPARTMENTTEST_PK");

                entity.ToTable("DEPARTMENTTEST");

                entity.Property(e => e.Depid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEPID");

                entity.Property(e => e.Depname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DEPNAME");
            });

            modelBuilder.Entity<Dependencytreereport>(entity =>
            {
                entity.ToTable("DEPENDENCYTREEREPORT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Depontrnsaname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DEPONTRNSANAME");

                entity.Property(e => e.Depontrnsename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DEPONTRNSENAME");

                entity.Property(e => e.Depontrnsnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPONTRNSNUM");

                entity.Property(e => e.Deptrnsaname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DEPTRNSANAME");

                entity.Property(e => e.Deptrnsename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DEPTRNSENAME");

                entity.Property(e => e.Deptrnsnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPTRNSNUM");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Dependencytreereports)
                    .HasForeignKey(d => d.Userid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("DEPENDENCYTREEREPORT_R01");
            });

            modelBuilder.Entity<Depreciation>(entity =>
            {
                entity.ToTable("DEPRECIATION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Depreciationaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPRECIATIONANAME");

                entity.Property(e => e.Depreciationcode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRECIATIONCODE");

                entity.Property(e => e.Depreciationename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPRECIATIONENAME");

                entity.Property(e => e.Depreciationtype)
                    .HasPrecision(1)
                    .HasColumnName("DEPRECIATIONTYPE");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<Depreciationcalcm>(entity =>
            {
                entity.ToTable("DEPRECIATIONCALCM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Code)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODE");

                entity.Property(e => e.Fromasset)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FROMASSET");

                entity.Property(e => e.Fromgroupasset)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FROMGROUPASSET");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");

                entity.Property(e => e.Toasset)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOASSET");

                entity.Property(e => e.Todate)
                    .HasColumnType("DATE")
                    .HasColumnName("TODATE");

                entity.Property(e => e.Togroupasset)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOGROUPASSET");

                entity.HasOne(d => d.FromassetNavigation)
                    .WithMany(p => p.DepreciationcalcmFromassetNavigations)
                    .HasForeignKey(d => d.Fromasset)
                    .HasConstraintName("DEPRECIATIONCALCM_R03");

                entity.HasOne(d => d.FromgroupassetNavigation)
                    .WithMany(p => p.DepreciationcalcmFromgroupassetNavigations)
                    .HasForeignKey(d => d.Fromgroupasset)
                    .HasConstraintName("DEPRECIATIONCALCM_R01");

                entity.HasOne(d => d.Period)
                    .WithMany(p => p.Depreciationcalcms)
                    .HasForeignKey(d => d.Periodid)
                    .HasConstraintName("DEPRECIATIONCALCM_R05");

                entity.HasOne(d => d.ToassetNavigation)
                    .WithMany(p => p.DepreciationcalcmToassetNavigations)
                    .HasForeignKey(d => d.Toasset)
                    .HasConstraintName("DEPRECIATIONCALCM_R04");

                entity.HasOne(d => d.TogroupassetNavigation)
                    .WithMany(p => p.DepreciationcalcmTogroupassetNavigations)
                    .HasForeignKey(d => d.Togroupasset)
                    .HasConstraintName("DEPRECIATIONCALCM_R02");
            });

            modelBuilder.Entity<Depreciationcalco>(entity =>
            {
                entity.ToTable("DEPRECIATIONCALCO");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Assetid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ASSETID");

                entity.Property(e => e.Deprectionmid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRECTIONMID");

                entity.Property(e => e.Deprpercent)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRPERCENT");

                entity.Property(e => e.Deprtype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRTYPE");

                entity.Property(e => e.Deprvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPRVALUE");

                entity.Property(e => e.Newdeprdate)
                    .HasColumnType("DATE")
                    .HasColumnName("NEWDEPRDATE");

                entity.Property(e => e.Olddeprdate)
                    .HasColumnType("DATE")
                    .HasColumnName("OLDDEPRDATE");

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.Depreciationcalcos)
                    .HasForeignKey(d => d.Assetid)
                    .HasConstraintName("DEPRECIATIONCALCO_R01");

                entity.HasOne(d => d.Deprectionm)
                    .WithMany(p => p.Depreciationcalcos)
                    .HasForeignKey(d => d.Deprectionmid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("DEPRECIATIONCALCO_R02");
            });

            modelBuilder.Entity<Depremainingtracking>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DEPREMAININGTRACKING");
            });

            modelBuilder.Entity<Detailsdataname>(entity =>
            {
                entity.HasKey(e => e.Detailsid)
                    .HasName("DETAILSDATANAMES_PK");

                entity.ToTable("DETAILSDATANAMES");

                entity.Property(e => e.Detailsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DETAILSID");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");
            });

            modelBuilder.Entity<Dimension>(entity =>
            {
                entity.ToTable("DIMENSIONS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<DimensionBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DIMENSION_BALANCE");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.DimensionCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DIMENSION_CODE");

                entity.Property(e => e.DimensionId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSION_ID");

                entity.Property(e => e.Dimensionlevelsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONLEVELSID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.InitialCredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INITIAL_CREDIT");

                entity.Property(e => e.InitialDebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INITIAL_DEBIT");

                entity.Property(e => e.LeafCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LEAF_CODE");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");
            });

            modelBuilder.Entity<DimensionOwnValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DIMENSION_OWN_VALUE");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Dimensiondetailsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONDETAILSID");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENTRYDATE");

                entity.Property(e => e.Journalentrymainid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOURNALENTRYMAINID");

                entity.Property(e => e.Journalentrytypeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOURNALENTRYTYPEID");

                entity.Property(e => e.Parentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PARENTID");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");
            });

            modelBuilder.Entity<Dimensionlevel>(entity =>
            {
                entity.ToTable("DIMENSIONLEVELS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Dimensionsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONSID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Length)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LENGTH");

                entity.Property(e => e.Levelno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LEVELNO");

                entity.HasOne(d => d.Dimensions)
                    .WithMany(p => p.Dimensionlevels)
                    .HasForeignKey(d => d.Dimensionsid)
                    .HasConstraintName("DIMENSIONLEVELS_FK1");
            });

            modelBuilder.Entity<Dimensionoption>(entity =>
            {
                entity.ToTable("DIMENSIONOPTION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Dimensionsdetail>(entity =>
            {
                entity.ToTable("DIMENSIONSDETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Dimensionlevelsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONLEVELSID");

                entity.Property(e => e.Dimensionsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONSID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Isdetailed)
                    .HasPrecision(1)
                    .HasColumnName("ISDETAILED");

                entity.Property(e => e.Islastmaindimensions)
                    .HasPrecision(1)
                    .HasColumnName("ISLASTMAINDIMENSIONS");

                entity.Property(e => e.Parentcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PARENTCODE");

                entity.Property(e => e.Parentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PARENTID");

                entity.Property(e => e.Rate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RATE");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Dimensionsdetails)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("DIMENSIONSDETAILS_FK2");

                entity.HasOne(d => d.Dimensionlevels)
                    .WithMany(p => p.Dimensionsdetails)
                    .HasForeignKey(d => d.Dimensionlevelsid)
                    .HasConstraintName("DIMENSIONSDETAILS_FK4");

                entity.HasOne(d => d.Dimensions)
                    .WithMany(p => p.Dimensionsdetails)
                    .HasForeignKey(d => d.Dimensionsid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("DIMENSIONSDETAILS_FK1");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.Parentid)
                    .HasConstraintName("DIMENSIONSDETAILS_FK3");
            });

            modelBuilder.Entity<DimensionsdetailsT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DIMENSIONSDETAILS_T");

                entity.Property(e => e.Aname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<DiscountItemM>(entity =>
            {
                entity.HasKey(e => e.Itemchangeid)
                    .HasName("DISCOUNT_ITEM_M_PK");

                entity.ToTable("DISCOUNT_ITEM_M");

                entity.HasIndex(e => e.Itemchangcode, "DISCOUNT_ITEM_M_U01")
                    .IsUnique();

                entity.Property(e => e.Itemchangeid)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ITEMCHANGEID");

                entity.Property(e => e.DiscountTypeId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DISCOUNT_TYPE_ID");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Itemchangcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCHANGCODE");

                entity.Property(e => e.Itemchangeremark)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasColumnName("ITEMCHANGEREMARK");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.HasOne(d => d.DiscountType)
                    .WithMany(p => p.DiscountItemMs)
                    .HasForeignKey(d => d.DiscountTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DISCOUNT_ITEM_M_R01");
            });

            modelBuilder.Entity<DiscountListCustomer>(entity =>
            {
                entity.ToTable("DISCOUNT_LIST_CUSTOMER");

                entity.HasIndex(e => new { e.CustomerId, e.DiscountTypeId }, "DISCOUNT_LIST_CUSTOMER_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.DiscountTypeId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DISCOUNT_TYPE_ID");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.DiscountListCustomers)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DISCOUNT_LIST_CUSTOMER_R01");

                entity.HasOne(d => d.DiscountType)
                    .WithMany(p => p.DiscountListCustomers)
                    .HasForeignKey(d => d.DiscountTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DISCOUNT_LIST_CUSTOMER_R02");
            });

            modelBuilder.Entity<DiscountListType>(entity =>
            {
                entity.HasKey(e => e.DiscountListId)
                    .HasName("DISCOUNT_LIST_TYPE_PK");

                entity.ToTable("DISCOUNT_LIST_TYPE");

                entity.HasIndex(e => e.DiscountCode, "DISCOUNT_LIST_TYPE_U01")
                    .IsUnique();

                entity.Property(e => e.DiscountListId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DISCOUNT_LIST_ID");

                entity.Property(e => e.Descripation)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPATION");

                entity.Property(e => e.DiscountCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Engdesc)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("ENGDESC");
            });

            modelBuilder.Entity<Dist>(entity =>
            {
                entity.ToTable("DISTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.BeginValue)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("BEGIN_VALUE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.DistType)
                    .HasPrecision(10)
                    .HasColumnName("DIST_TYPE");

                entity.Property(e => e.DistType2)
                    .HasPrecision(10)
                    .HasColumnName("DIST_TYPE2");

                entity.Property(e => e.DistType3)
                    .HasPrecision(10)
                    .HasColumnName("DIST_TYPE3");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.FullCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FULL_CODE");

                entity.Property(e => e.Ohwyam)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("OHWYAM")
                    .HasDefaultValueSql("'11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n");

                entity.Property(e => e.P1).HasPrecision(10);

                entity.Property(e => e.P10).HasPrecision(10);

                entity.Property(e => e.P2).HasPrecision(10);

                entity.Property(e => e.P3).HasPrecision(10);

                entity.Property(e => e.P4).HasPrecision(10);

                entity.Property(e => e.P5).HasPrecision(10);

                entity.Property(e => e.P6).HasPrecision(10);

                entity.Property(e => e.P7).HasPrecision(10);

                entity.Property(e => e.P8).HasPrecision(10);

                entity.Property(e => e.P9).HasPrecision(10);
            });

            modelBuilder.Entity<DistPart>(entity =>
            {
                entity.ToTable("DIST_PARTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.DistType)
                    .HasPrecision(10)
                    .HasColumnName("DIST_TYPE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.FormNo)
                    .HasPrecision(2)
                    .HasColumnName("FORM_NO")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.NUniquePart)
                    .HasPrecision(2)
                    .HasColumnName("N_UNIQUE_PART")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.NoSegments)
                    .HasPrecision(2)
                    .HasColumnName("NO_SEGMENTS")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.TypeP1)
                    .HasPrecision(10)
                    .HasColumnName("TYPE_P1");

                entity.Property(e => e.TypeP10)
                    .HasPrecision(10)
                    .HasColumnName("TYPE_P10");

                entity.Property(e => e.TypeP2)
                    .HasPrecision(10)
                    .HasColumnName("TYPE_P2");

                entity.Property(e => e.TypeP3)
                    .HasPrecision(10)
                    .HasColumnName("TYPE_P3");

                entity.Property(e => e.TypeP4)
                    .HasPrecision(10)
                    .HasColumnName("TYPE_P4");

                entity.Property(e => e.TypeP5)
                    .HasPrecision(10)
                    .HasColumnName("TYPE_P5");

                entity.Property(e => e.TypeP6)
                    .HasPrecision(10)
                    .HasColumnName("TYPE_P6");

                entity.Property(e => e.TypeP7)
                    .HasPrecision(10)
                    .HasColumnName("TYPE_P7");

                entity.Property(e => e.TypeP8)
                    .HasPrecision(10)
                    .HasColumnName("TYPE_P8");

                entity.Property(e => e.TypeP9)
                    .HasPrecision(10)
                    .HasColumnName("TYPE_P9");
            });

            modelBuilder.Entity<DistType>(entity =>
            {
                entity.ToTable("DIST_TYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Flength)
                    .HasPrecision(2)
                    .HasColumnName("FLENGTH");

                entity.Property(e => e.NoForms)
                    .HasPrecision(2)
                    .HasColumnName("NO_FORMS")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ParentType)
                    .HasPrecision(10)
                    .HasColumnName("PARENT_TYPE");

                entity.Property(e => e.Ttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TTYPE")
                    .HasDefaultValueSql("'E'");

                entity.Property(e => e.Ttype2)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TTYPE2")
                    .HasDefaultValueSql("'d'");
            });

            modelBuilder.Entity<Documentsattachedtype>(entity =>
            {
                entity.ToTable("DOCUMENTSATTACHEDTYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Doctypeename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCTYPEENAME");

                entity.Property(e => e.Doctypename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCTYPENAME");

                entity.Property(e => e.Documenttype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTTYPE");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("EMPLOYEE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Age)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AGE");

                entity.Property(e => e.Depid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEPID");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.HasOne(d => d.Dep)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.Depid)
                    .HasConstraintName("EMPLOYEE_R01");
            });

            modelBuilder.Entity<Entrytype>(entity =>
            {
                entity.ToTable("ENTRYTYPE");

                entity.Property(e => e.Entrytypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ENTRYTYPEID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Estimatedval>(entity =>
            {
                entity.ToTable("ESTIMATEDVALS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Acctreeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCTREEID");

                entity.Property(e => e.Creditval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("CREDITVAL");

                entity.Property(e => e.Debitval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("DEBITVAL");

                entity.Property(e => e.Fromdate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROMDATE");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");

                entity.Property(e => e.Todate)
                    .HasColumnType("DATE")
                    .HasColumnName("TODATE");

                entity.HasOne(d => d.Acctree)
                    .WithMany(p => p.Estimatedvals)
                    .HasForeignKey(d => d.Acctreeid)
                    .HasConstraintName("ESTIMATEDVALS_R02");

                entity.HasOne(d => d.Period)
                    .WithMany(p => p.Estimatedvals)
                    .HasForeignKey(d => d.Periodid)
                    .HasConstraintName("ESTIMATEDVALS_R01");
            });

            modelBuilder.Entity<Estimatedvalsdet>(entity =>
            {
                entity.ToTable("ESTIMATEDVALSDET");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Creditval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("CREDITVAL");

                entity.Property(e => e.Debitval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("DEBITVAL");

                entity.Property(e => e.Dimensiondetailsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONDETAILSID");

                entity.Property(e => e.Estimatedvalsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ESTIMATEDVALSID");

                entity.HasOne(d => d.Dimensiondetails)
                    .WithMany(p => p.Estimatedvalsdets)
                    .HasForeignKey(d => d.Dimensiondetailsid)
                    .HasConstraintName("ESTIMATEDVALSDET_R02");

                entity.HasOne(d => d.Estimatedvals)
                    .WithMany(p => p.Estimatedvalsdets)
                    .HasForeignKey(d => d.Estimatedvalsid)
                    .HasConstraintName("ESTIMATEDVALSDET_R01");
            });

            modelBuilder.Entity<EvalPricePromoComm>(entity =>
            {
                entity.ToTable("EVAL_PRICE_PROMO_COMM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Committeedetailid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITTEEDETAILID");

                entity.Property(e => e.Committeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITTEID");

                entity.Property(e => e.Evalpromoid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EVALPROMOID");

                entity.HasOne(d => d.Committeedetail)
                    .WithMany(p => p.EvalPricePromoComms)
                    .HasForeignKey(d => d.Committeedetailid)
                    .HasConstraintName("EVAL_PRICE_PROMO_COMM_R03");

                entity.HasOne(d => d.Committe)
                    .WithMany(p => p.EvalPricePromoComms)
                    .HasForeignKey(d => d.Committeid)
                    .HasConstraintName("EVAL_PRICE_PROMO_COMM_R02");

                entity.HasOne(d => d.Evalpromo)
                    .WithMany(p => p.EvalPricePromoComms)
                    .HasForeignKey(d => d.Evalpromoid)
                    .HasConstraintName("EVAL_PRICE_PROMO_COMM_R01");
            });

            modelBuilder.Entity<EvaluaPricePromationDetail>(entity =>
            {
                entity.ToTable("EVALUA_PRICE_PROMATION_DETAIL");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.EvaluationPricePromationId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EVALUATION_PRICE_PROMATION_ID");

                entity.Property(e => e.Isselected)
                    .HasColumnType("NUMBER(22,1)")
                    .HasColumnName("ISSELECTED");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.Note)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOTE");

                entity.Property(e => e.Price)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICE");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QTY");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.StoreTrnsOId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_TRNS_O_ID");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.EvaluaPricePromationDetails)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("EVALUA_PRICE_PROMATION_DET_FK3");

                entity.HasOne(d => d.EvaluationPricePromation)
                    .WithMany(p => p.EvaluaPricePromationDetails)
                    .HasForeignKey(d => d.EvaluationPricePromationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("EVALUA_PRICE_PROMATION_DET_FK1");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.EvaluaPricePromationDetails)
                    .HasForeignKey(d => d.Itemid)
                    .HasConstraintName("EVALUA_PRICE_PROMATION_DET_FK2");

                entity.HasOne(d => d.StoreTrnsM)
                    .WithMany(p => p.EvaluaPricePromationDetails)
                    .HasForeignKey(d => d.StoreTrnsMId)
                    .HasConstraintName("EVALUA_PRICE_PROMATION_DET_FK5");

                entity.HasOne(d => d.StoreTrnsO)
                    .WithMany(p => p.EvaluaPricePromationDetails)
                    .HasForeignKey(d => d.StoreTrnsOId)
                    .HasConstraintName("EVALUA_PRICE_PROMATION_DET_FK4");
            });

            modelBuilder.Entity<EvaluationPricePromation>(entity =>
            {
                entity.ToTable("EVALUATION_PRICE_PROMATION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Approved)
                    .HasPrecision(1)
                    .HasColumnName("APPROVED");

                entity.Property(e => e.Approveddate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVEDDATE");

                entity.Property(e => e.Committeeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITTEEID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.EvaluationPricePromations)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("EVALUATION_PRICE_PROMATION_FK2");

                entity.HasOne(d => d.StoreTrnsM)
                    .WithMany(p => p.EvaluationPricePromations)
                    .HasForeignKey(d => d.StoreTrnsMId)
                    .HasConstraintName("EVALUATION_PRICE_PROMATION_FK1");
            });

            modelBuilder.Entity<Evaluationview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EVALUATIONVIEW");

                entity.Property(e => e.Detailtrnsno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DETAILTRNSNO");

                entity.Property(e => e.Disc)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC");

                entity.Property(e => e.Evaldate)
                    .HasColumnType("DATE")
                    .HasColumnName("EVALDATE");

                entity.Property(e => e.FromStoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROM_STORE_ALLCODES_ID");

                entity.Property(e => e.Groupaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUPANAME");

                entity.Property(e => e.Groupename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUPENAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Isselected)
                    .HasColumnType("NUMBER(22,1)")
                    .HasColumnName("ISSELECTED");

                entity.Property(e => e.Itemaname)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEMANAME");

                entity.Property(e => e.Itemename)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEMENAME");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.Lastprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LASTPRICE");

                entity.Property(e => e.Masterdate)
                    .HasColumnType("DATE")
                    .HasColumnName("MASTERDATE");

                entity.Property(e => e.Note)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOTE");

                entity.Property(e => e.Price)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICE");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QTY");

                entity.Property(e => e.Stax)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("STAX");

                entity.Property(e => e.StoreTrnsOId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_TRNS_O_ID");

                entity.Property(e => e.TrnsNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO");

                entity.Property(e => e.Vendoraname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VENDORANAME");

                entity.Property(e => e.Vendorename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VENDORENAME");
            });

            modelBuilder.Entity<ExpensessTrnsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EXPENSESS_TRNS_VIEW");

                entity.Property(e => e.Curr)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURR");

                entity.Property(e => e.Expensescode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSESCODE");

                entity.Property(e => e.Expensesname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSESNAME");

                entity.Property(e => e.Foreignval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FOREIGNVAL");

                entity.Property(e => e.Localval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LOCALVAL");

                entity.Property(e => e.Rate)
                    .HasColumnType("NUMBER(20,4)")
                    .HasColumnName("RATE");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");
            });

            modelBuilder.Entity<Exptype>(entity =>
            {
                entity.HasKey(e => e.Exptypesid)
                    .HasName("EXPTYPES_PK");

                entity.ToTable("EXPTYPES");

                entity.Property(e => e.Exptypesid)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EXPTYPESID");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Namear)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAMEAR");
            });

            modelBuilder.Entity<Extra>(entity =>
            {
                entity.ToTable("EXTRAS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Extdttxt)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EXTDTTXT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Nameen)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAMEEN");

                entity.Property(e => e.Note)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE");
            });

            modelBuilder.Entity<Featuretype>(entity =>
            {
                entity.ToTable("FEATURETYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Defaultprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEFAULTPRICE");

                entity.Property(e => e.Defaultprice2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEFAULTPRICE2");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.Institem1ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM1ENAME");

                entity.Property(e => e.Institem1name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM1NAME");

                entity.Property(e => e.Institem2ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM2ENAME");

                entity.Property(e => e.Institem2name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM2NAME");

                entity.Property(e => e.Institem3ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM3ENAME");

                entity.Property(e => e.Institem3name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM3NAME");

                entity.Property(e => e.Linkedtoparent1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LINKEDTOPARENT1");

                entity.Property(e => e.Linkedtoparent2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LINKEDTOPARENT2");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Use1stpricepolicy1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE1STPRICEPOLICY1");

                entity.Property(e => e.Use1stpricepolicy2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE1STPRICEPOLICY2");

                entity.Property(e => e.Use2ndpricepolicy1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE2NDPRICEPOLICY1");

                entity.Property(e => e.Use2ndpricepolicy2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE2NDPRICEPOLICY2");

                entity.Property(e => e.UseInstitem1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM1");

                entity.Property(e => e.UseInstitem1q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM1Q");

                entity.Property(e => e.UseInstitem2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM2");

                entity.Property(e => e.UseInstitem2q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM2Q");

                entity.Property(e => e.UseInstitem3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM3");

                entity.Property(e => e.UseInstitem3q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM3Q");

                entity.Property(e => e.Useallpricepolicy1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEALLPRICEPOLICY1");

                entity.Property(e => e.Useallpricepolicy2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEALLPRICEPOLICY2");

                entity.Property(e => e.Valueorratio1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO1")
                    .HasDefaultValueSql("'v'");

                entity.Property(e => e.Valueorratio2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO2")
                    .HasDefaultValueSql("'v'");

                entity.Property(e => e.Valueorratio3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO3")
                    .HasDefaultValueSql("'v'\n");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Featuretypes)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("FEATURETYPES_R01");
            });

            modelBuilder.Entity<Finalmiagrationtype>(entity =>
            {
                entity.HasKey(e => e.Finalmiagrationid)
                    .HasName("FINALMIAGRATIONTYPES_PK");

                entity.ToTable("FINALMIAGRATIONTYPES");

                entity.Property(e => e.Finalmiagrationid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINALMIAGRATIONID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Levelfinalmiagration)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LEVELFINALMIAGRATION");
            });

            modelBuilder.Entity<FinanceAnlsCode>(entity =>
            {
                entity.HasKey(e => e.FinanceAnlsCodesId)
                    .HasName("FINANCE_ANLS_CODES_PK");

                entity.ToTable("FINANCE_ANLS_CODES");

                entity.HasIndex(e => e.Code, "FINANCE_ANLS_CODES_U01")
                    .IsUnique();

                entity.Property(e => e.FinanceAnlsCodesId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FINANCE_ANLS_CODES_ID");

                entity.Property(e => e.Accountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTID");

                entity.Property(e => e.AddToLc)
                    .HasPrecision(1)
                    .HasColumnName("ADD_TO_LC")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Aname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Costeffect)
                    .HasPrecision(1)
                    .HasColumnName("COSTEFFECT");

                entity.Property(e => e.DistributOnQty)
                    .HasPrecision(1)
                    .HasColumnName("DISTRIBUT_ON_QTY");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.HasItemFactor)
                    .HasPrecision(1)
                    .HasColumnName("HAS_ITEM_FACTOR");

                entity.Property(e => e.Invoiceeffect)
                    .HasPrecision(1)
                    .HasColumnName("INVOICEEFFECT");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.FinanceAnlsCodes)
                    .HasForeignKey(d => d.Accountid)
                    .HasConstraintName("FINANCE_ANLS_CODES_R01");
            });

            modelBuilder.Entity<FinanceAnlsCodesFactor>(entity =>
            {
                entity.ToTable("FINANCE_ANLS_CODES_FACTOR");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Factor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACTOR");

                entity.Property(e => e.FinanceAnlsCodesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCE_ANLS_CODES_ID");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.HasOne(d => d.FinanceAnlsCodes)
                    .WithMany(p => p.FinanceAnlsCodesFactors)
                    .HasForeignKey(d => d.FinanceAnlsCodesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FINANCE_ANLS_CODES_FACTOR_R01");

                entity.HasOne(d => d.StoreItems)
                    .WithMany(p => p.FinanceAnlsCodesFactors)
                    .HasForeignKey(d => d.StoreItemsId)
                    .HasConstraintName("FINANCE_ANLS_CODES_FACTOR_R02");
            });

            modelBuilder.Entity<FinanceTrnsAccept>(entity =>
            {
                entity.HasKey(e => e.AcceptId)
                    .HasName("FINANCE_TRNS_ACCEPT_PK");

                entity.ToTable("FINANCE_TRNS_ACCEPT");

                entity.HasIndex(e => new { e.AcceptSerial, e.TrnsCode }, "FINANCE_TRNS_ACCEPT_U01")
                    .IsUnique();

                entity.Property(e => e.AcceptId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ACCEPT_ID");

                entity.Property(e => e.AcceptName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ACCEPT_NAME");

                entity.Property(e => e.AcceptSerial)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCEPT_SERIAL");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.HasOne(d => d.TrnsCodeNavigation)
                    .WithMany(p => p.FinanceTrnsAccepts)
                    .HasForeignKey(d => d.TrnsCode)
                    .HasConstraintName("FINANCE_TRNS_ACCEPT_R01");
            });

            modelBuilder.Entity<Financeacceptenceview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FINANCEACCEPTENCEVIEW");

                entity.Property(e => e.AcceptName)
                    .HasMaxLength(50)
                    .HasColumnName("ACCEPT_NAME");

                entity.Property(e => e.AcceptSerial)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCEPT_SERIAL");

                entity.Property(e => e.Acceptdate)
                    .HasColumnType("DATE")
                    .HasColumnName("ACCEPTDATE");

                entity.Property(e => e.IsAccepted)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IS_ACCEPTED");

                entity.Property(e => e.Reason)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("REASON");

                entity.Property(e => e.TrnsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_ID");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<Financedep>(entity =>
            {
                entity.ToTable("FINANCEDEP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Cfinancemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CFINANCEMID");

                entity.Property(e => e.Committed)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("COMMITTED");

                entity.Property(e => e.Depslot)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPSLOT");

                entity.Property(e => e.Financedepspecid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCEDEPSPECID");

                entity.Property(e => e.Netvalue)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("NETVALUE")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Pfinancemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PFINANCEMID");

                entity.HasOne(d => d.Cfinancem)
                    .WithMany(p => p.Financedeps)
                    .HasForeignKey(d => d.Cfinancemid)
                    .HasConstraintName("FINANCEDEP_R02");

                entity.HasOne(d => d.Financedepspec)
                    .WithMany(p => p.Financedeps)
                    .HasForeignKey(d => d.Financedepspecid)
                    .HasConstraintName("FINANCEDEP_R03");
            });

            modelBuilder.Entity<Financedepspec>(entity =>
            {
                entity.ToTable("FINANCEDEPSPEC");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Financespecid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCESPECID");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Namear)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAMEAR");

                entity.Property(e => e.Notes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.HasOne(d => d.Financespec)
                    .WithMany(p => p.Financedepspecs)
                    .HasForeignKey(d => d.Financespecid)
                    .HasConstraintName("FINANCEDEPSPEC_R01");
            });

            modelBuilder.Entity<Financedepspecdetail>(entity =>
            {
                entity.ToTable("FINANCEDEPSPECDETAIL");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Depfinancespecid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPFINANCESPECID");

                entity.Property(e => e.Depslot)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPSLOT");

                entity.Property(e => e.Financedepspecid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCEDEPSPECID");

                entity.Property(e => e.Fromfilter)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FROMFILTER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Getfrom)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GETFROM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Getto)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GETTO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Tofilter)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOFILTER")
                    .HasDefaultValueSql("0\n");

                entity.HasOne(d => d.Depfinancespec)
                    .WithMany(p => p.Financedepspecdetails)
                    .HasForeignKey(d => d.Depfinancespecid)
                    .HasConstraintName("FINANCEDEPSPECDETAIL_R02");

                entity.HasOne(d => d.Financedepspec)
                    .WithMany(p => p.Financedepspecdetails)
                    .HasForeignKey(d => d.Financedepspecid)
                    .HasConstraintName("FINANCEDEPSPECDETAIL_R01");
            });

            modelBuilder.Entity<Financedisttype>(entity =>
            {
                entity.ToTable("FINANCEDISTTYPES");

                entity.HasIndex(e => new { e.Disttype, e.Ft, e.TrnsCode }, "FINANCEDISTTYPES_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Disttype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DISTTYPE");

                entity.Property(e => e.Ft)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FT");

                entity.Property(e => e.Rank)
                    .HasPrecision(3)
                    .HasColumnName("RANK");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.HasOne(d => d.TrnsCodeNavigation)
                    .WithMany(p => p.Financedisttypes)
                    .HasForeignKey(d => d.TrnsCode)
                    .HasConstraintName("FINANCEDISTTYPES_R01");
            });

            modelBuilder.Entity<Financeinstalment>(entity =>
            {
                entity.ToTable("FINANCEINSTALMENTS");

                entity.HasIndex(e => new { e.Instalmentid, e.Trnsid }, "FINANCEINSTALMENTS111");

                entity.HasIndex(e => new { e.Checkid, e.Instalmentid }, "FINANCEINSTALMENTS222");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Fixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Paytype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAYTYPE");

                entity.Property(e => e.Penaltyval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYVAL");

                entity.Property(e => e.Rentinstalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTINSTALMENTID");

                entity.Property(e => e.Reschedualid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RESCHEDUALID");

                entity.Property(e => e.Trnsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSID");

                entity.HasOne(d => d.Check)
                    .WithMany(p => p.Financeinstalments)
                    .HasForeignKey(d => d.Checkid)
                    .HasConstraintName("FINANCEINSTALMENTS_FK3");

                entity.HasOne(d => d.Instalment)
                    .WithMany(p => p.Financeinstalments)
                    .HasForeignKey(d => d.Instalmentid)
                    .HasConstraintName("FINANCEINSTALMENTS_FK2");

                entity.HasOne(d => d.Rentinstalment)
                    .WithMany(p => p.Financeinstalments)
                    .HasForeignKey(d => d.Rentinstalmentid)
                    .HasConstraintName("FINANCEINSTALMENTS_FK4");

                entity.HasOne(d => d.Trns)
                    .WithMany(p => p.Financeinstalments)
                    .HasForeignKey(d => d.Trnsid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FINANCEINSTALMENTS_FK1");
            });

            modelBuilder.Entity<Financeinstalmentsdd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FINANCEINSTALMENTSDD");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Fixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Paytype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAYTYPE");

                entity.Property(e => e.Penaltyval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYVAL");

                entity.Property(e => e.Rentinstalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTINSTALMENTID");

                entity.Property(e => e.Trnsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSID");
            });

            modelBuilder.Entity<Financeinvdist>(entity =>
            {
                entity.ToTable("FINANCEINVDIST");

                entity.HasIndex(e => new { e.Financeid, e.Invid }, "FINANCEINVDIST_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Discountval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("DISCOUNTVAL");

                entity.Property(e => e.Financeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEID");

                entity.Property(e => e.Findiscountid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINDISCOUNTID");

                entity.Property(e => e.Finorderid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINORDERID");

                entity.Property(e => e.Grossval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("GROSSVAL");

                entity.Property(e => e.Invid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("INVID");

                entity.HasOne(d => d.Finance)
                    .WithMany(p => p.Financeinvdists)
                    .HasForeignKey(d => d.Financeid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FINANCEINVDIST_FK1");

                entity.HasOne(d => d.Inv)
                    .WithMany(p => p.Financeinvdists)
                    .HasForeignKey(d => d.Invid)
                    .HasConstraintName("FINANCEINVDIST_FK2");
            });

            modelBuilder.Entity<Financeinvspec>(entity =>
            {
                entity.HasKey(e => e.RowId)
                    .HasName("FINANCEINVSPEC_PK");

                entity.ToTable("FINANCEINVSPEC");

                entity.HasIndex(e => new { e.Transcode, e.Strid }, "FINANCEINVSPEC_U01")
                    .IsUnique();

                entity.Property(e => e.RowId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ROW_ID");

                entity.Property(e => e.FT)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("F_T");

                entity.Property(e => e.Strid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STRID");

                entity.Property(e => e.Transcode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRANSCODE");

                entity.HasOne(d => d.Str)
                    .WithMany(p => p.Financeinvspecs)
                    .HasForeignKey(d => d.Strid)
                    .HasConstraintName("FINANCEINVSPEC_FK2");

                entity.HasOne(d => d.TranscodeNavigation)
                    .WithMany(p => p.Financeinvspecs)
                    .HasForeignKey(d => d.Transcode)
                    .HasConstraintName("FINANCEINVSPEC_FK1");
            });

            modelBuilder.Entity<Financem>(entity =>
            {
                entity.ToTable("FINANCEM");

                entity.HasIndex(e => e.Trnsdate, "FINANCEM111");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Analysisid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ANALYSISID");

                entity.Property(e => e.Attrvalue)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ATTRVALUE");

                entity.Property(e => e.Attrvalueen)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ATTRVALUEEN");

                entity.Property(e => e.Branch)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH");

                entity.Property(e => e.Cfinancedepspecid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CFINANCEDEPSPECID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Checkduedate)
                    .HasColumnType("DATE")
                    .HasColumnName("CHECKDUEDATE");

                entity.Property(e => e.Checknum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNUM");

                entity.Property(e => e.Commdtax)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("COMMDTAX");

                entity.Property(e => e.Commtax)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("COMMTAX");

                entity.Property(e => e.Commtaxdrate)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("COMMTAXDRATE");

                entity.Property(e => e.Commtaxrate)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("COMMTAXRATE");

                entity.Property(e => e.Confirmdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONFIRMDATE");

                entity.Property(e => e.Confirmed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONFIRMED");

                entity.Property(e => e.Confirmedby)
                    .HasPrecision(10)
                    .HasColumnName("CONFIRMEDBY");

                entity.Property(e => e.Cost)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("COST");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Curridact)
                    .HasPrecision(10)
                    .HasColumnName("CURRIDACT");

                entity.Property(e => e.Curriddiff)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRIDDIFF");

                entity.Property(e => e.Curridlocal)
                    .HasPrecision(10)
                    .HasColumnName("CURRIDLOCAL");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Currrateacttrns)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATEACTTRNS");

                entity.Property(e => e.Documentno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNO");

                entity.Property(e => e.Fdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FDISTID");

                entity.Property(e => e.Fileno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FILENO");

                entity.Property(e => e.Financieraddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FINANCIERADDRESS");

                entity.Property(e => e.Financiername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FINANCIERNAME");

                entity.Property(e => e.Fstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("FSTAMP")
                    .HasDefaultValueSql("NULL");

                entity.Property(e => e.Grossval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("GROSSVAL");

                entity.Property(e => e.Grossvallocal)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("GROSSVALLOCAL");

                entity.Property(e => e.Hafzamid)
                    .HasPrecision(10)
                    .HasColumnName("HAFZAMID");

                entity.Property(e => e.Invoicenum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INVOICENUM");

                entity.Property(e => e.Mission)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MISSION");

                entity.Property(e => e.Netval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("NETVAL");

                entity.Property(e => e.Netvalact)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("NETVALACT");

                entity.Property(e => e.Netvallocal)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("NETVALLOCAL");

                entity.Property(e => e.Othertax)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("OTHERTAX");

                entity.Property(e => e.Othertaxrate)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("OTHERTAXRATE");

                entity.Property(e => e.Penaltyrate)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("PENALTYRATE");

                entity.Property(e => e.Penaltytax)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("PENALTYTAX");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Purpose)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Remark1)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("REMARK1");

                entity.Property(e => e.Remark2)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("REMARK2");

                entity.Property(e => e.Repid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("REPID");

                entity.Property(e => e.Salestax)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("SALESTAX");

                entity.Property(e => e.Salestaxrate)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("SALESTAXRATE");

                entity.Property(e => e.Storemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREMID");

                entity.Property(e => e.Tax41rate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TAX41RATE");

                entity.Property(e => e.Tax41trnsnatural)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX41TRNSNATURAL");

                entity.Property(e => e.Tax41value)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TAX41VALUE");

                entity.Property(e => e.Taxnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAXNUMBER");

                entity.Property(e => e.Tdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TDISTID");

                entity.Property(e => e.Transfertoacc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFERTOACC");

                entity.Property(e => e.Transfertobank)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFERTOBANK");

                entity.Property(e => e.Transfertoname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFERTONAME");

                entity.Property(e => e.Trnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSCODE");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");

                entity.Property(e => e.Trnsno)
                    .HasPrecision(15)
                    .HasColumnName("TRNSNO");

                entity.HasOne(d => d.Analysis)
                    .WithMany(p => p.FinancemAnalyses)
                    .HasForeignKey(d => d.Analysisid)
                    .HasConstraintName("FINANCEM_FK7");

                entity.HasOne(d => d.BranchNavigation)
                    .WithMany(p => p.Financems)
                    .HasForeignKey(d => d.Branch)
                    .HasConstraintName("FINANCEM_FK8");

                entity.HasOne(d => d.Curr)
                    .WithMany(p => p.Financems)
                    .HasForeignKey(d => d.Currid)
                    .HasConstraintName("FINANCEM_FK2");

                entity.HasOne(d => d.Fdist)
                    .WithMany(p => p.FinancemFdists)
                    .HasForeignKey(d => d.Fdistid)
                    .HasConstraintName("FINANCEM_FK4");

                entity.HasOne(d => d.PurposeNavigation)
                    .WithMany(p => p.Financems)
                    .HasForeignKey(d => d.Purpose)
                    .HasConstraintName("FINANCEM_FK9");

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.FinancemReps)
                    .HasForeignKey(d => d.Repid)
                    .HasConstraintName("FINANCEM_FK6");

                entity.HasOne(d => d.Tdist)
                    .WithMany(p => p.FinancemTdists)
                    .HasForeignKey(d => d.Tdistid)
                    .HasConstraintName("FINANCEM_FK5");

                entity.HasOne(d => d.TrnscodeNavigation)
                    .WithMany(p => p.Financems)
                    .HasForeignKey(d => d.Trnscode)
                    .HasConstraintName("FINANCEM_FK1");
            });

            modelBuilder.Entity<Financepupose>(entity =>
            {
                entity.ToTable("FINANCEPUPOSES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Financespec>(entity =>
            {
                entity.HasKey(e => e.Trnscode)
                    .HasName("FINANCESPEC_PK");

                entity.ToTable("FINANCESPEC");

                entity.Property(e => e.Trnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSCODE");

                entity.Property(e => e.Analysisid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ANALYSISID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Attrname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ATTRNAME");

                entity.Property(e => e.Attrnameen)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ATTRNAMEEN");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Casheffect)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CASHEFFECT")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Commtaxdrate)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("COMMTAXDRATE");

                entity.Property(e => e.Commtaxrate)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("COMMTAXRATE");

                entity.Property(e => e.Currencydiff)
                    .HasPrecision(1)
                    .HasColumnName("CURRENCYDIFF");

                entity.Property(e => e.Defpurpose)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEFPURPOSE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Fdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FDISTID");

                entity.Property(e => e.Gl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GL");

                entity.Property(e => e.Inventoryspecid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("INVENTORYSPECID");

                entity.Property(e => e.Invoiceditribution)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INVOICEDITRIBUTION");

                entity.Property(e => e.Iscash)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISCASH");

                entity.Property(e => e.Ismobile)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ISMOBILE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Isodata)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ISODATA");

                entity.Property(e => e.Istransfer)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ISTRANSFER");

                entity.Property(e => e.Mustchoosefdist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MUSTCHOOSEFDIST");

                entity.Property(e => e.Mustchoosetdist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MUSTCHOOSETDIST");

                entity.Property(e => e.Othertaxrate)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("OTHERTAXRATE");

                entity.Property(e => e.Penaltyrate)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("PENALTYRATE");

                entity.Property(e => e.Printafterconfirme)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRINTAFTERCONFIRME");

                entity.Property(e => e.Repid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("REPID");

                entity.Property(e => e.Saleformdistribution)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SALEFORMDISTRIBUTION");

                entity.Property(e => e.Salesearch)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALESEARCH")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Salestaxrate)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("SALESTAXRATE");

                entity.Property(e => e.ServicesRequests)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SERVICES_REQUESTS")
                    .HasDefaultValueSql("null ");

                entity.Property(e => e.Showdeliverydata)
                    .HasPrecision(1)
                    .HasColumnName("SHOWDELIVERYDATA")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Showdist)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHOWDIST")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Showdistcancel)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHOWDISTCANCEL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Showpay)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHOWPAY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Showtaxdatadetails)
                    .HasPrecision(1)
                    .HasColumnName("SHOWTAXDATADETAILS");

                entity.Property(e => e.Taxdiscsrc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TAXDISCSRC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Tdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TDISTID");

                entity.Property(e => e.Unitcheckdist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("UNITCHECKDIST")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Updatebyconfirmer)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UPDATEBYCONFIRMER");

                entity.Property(e => e.Useanalysiscode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEANALYSISCODE");

                entity.Property(e => e.Usecommdtax)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USECOMMDTAX");

                entity.Property(e => e.Usecommtax)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USECOMMTAX");

                entity.Property(e => e.Useconfirmed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USECONFIRMED");

                entity.Property(e => e.Usefastinsertchecks)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USEFASTINSERTCHECKS");

                entity.Property(e => e.Usefdistcode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEFDISTCODE");

                entity.Property(e => e.Usenotes)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USENOTES");

                entity.Property(e => e.Useothertax)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEOTHERTAX");

                entity.Property(e => e.Usepenaltytax)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEPENALTYTAX");

                entity.Property(e => e.Useremark2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEREMARK2");

                entity.Property(e => e.Userepcode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEREPCODE");

                entity.Property(e => e.Usesalestax)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USESALESTAX");

                entity.Property(e => e.Usetdistcode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USETDISTCODE");

                entity.HasOne(d => d.Analysis)
                    .WithMany(p => p.FinancespecAnalyses)
                    .HasForeignKey(d => d.Analysisid)
                    .HasConstraintName("FINANCESPEC_FK5");

                entity.HasOne(d => d.CDNavigation)
                    .WithMany(p => p.Financespecs)
                    .HasForeignKey(d => d.CD)
                    .HasConstraintName("FINANCESPEC_FK6");

                entity.HasOne(d => d.DefpurposeNavigation)
                    .WithMany(p => p.Financespecs)
                    .HasForeignKey(d => d.Defpurpose)
                    .HasConstraintName("FINANCESPEC_FK1");

                entity.HasOne(d => d.Fdist)
                    .WithMany(p => p.FinancespecFdists)
                    .HasForeignKey(d => d.Fdistid)
                    .HasConstraintName("FINANCESPEC_FK2");

                entity.HasOne(d => d.IstransferNavigation)
                    .WithMany(p => p.Financespecs)
                    .HasForeignKey(d => d.Istransfer)
                    .HasConstraintName("FINANCESPEC_FK10");

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.FinancespecReps)
                    .HasForeignKey(d => d.Repid)
                    .HasConstraintName("FINANCESPEC_FK4");

                entity.HasOne(d => d.Tdist)
                    .WithMany(p => p.FinancespecTdists)
                    .HasForeignKey(d => d.Tdistid)
                    .HasConstraintName("FINANCESPEC_FK3");
            });

            modelBuilder.Entity<Financespecapp>(entity =>
            {
                entity.HasKey(e => e.Financespecappid)
                    .HasName("FINANCESPECAPP_PK");

                entity.ToTable("FINANCESPECAPP");

                entity.HasIndex(e => new { e.Appid, e.Financespecid }, "FINANCESPECAPP_U01")
                    .IsUnique();

                entity.Property(e => e.Financespecappid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCESPECAPPID");

                entity.Property(e => e.Appid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("APPID");

                entity.Property(e => e.Financespecid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCESPECID");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.HasOne(d => d.App)
                    .WithMany(p => p.Financespecapps)
                    .HasForeignKey(d => d.Appid)
                    .HasConstraintName("FINANCESPECAPP_R01");
            });

            modelBuilder.Entity<Financespecdetail>(entity =>
            {
                entity.ToTable("FINANCESPECDETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Descfdist)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DESCFDIST");

                entity.Property(e => e.Descfdiste)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DESCFDISTE");

                entity.Property(e => e.Desctdist)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DESCTDIST");

                entity.Property(e => e.Desctdiste)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DESCTDISTE");

                entity.Property(e => e.Driversconciliation)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DRIVERSCONCILIATION");

                entity.Property(e => e.Finacespectranscode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINACESPECTRANSCODE");

                entity.Property(e => e.Gldistribution)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GLDISTRIBUTION");

                entity.Property(e => e.Instalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTS");

                entity.Property(e => e.Orderspecid)
                    .HasColumnType("NUMBER(22,10)")
                    .HasColumnName("ORDERSPECID");

                entity.Property(e => e.Personsdistribution)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PERSONSDISTRIBUTION");

                entity.Property(e => e.Polices)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("POLICES");

                entity.Property(e => e.Printfdist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRINTFDIST");

                entity.Property(e => e.Printgldist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRINTGLDIST");

                entity.Property(e => e.Printinventdist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRINTINVENTDIST");

                entity.Property(e => e.Printtdist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRINTTDIST");

                entity.Property(e => e.Reportfooter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORTFOOTER");

                entity.Property(e => e.Reportheader)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORTHEADER");

                entity.Property(e => e.Signature1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE1");

                entity.Property(e => e.Signature1name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE1NAME");

                entity.Property(e => e.Signature2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE2");

                entity.Property(e => e.Signature2name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE2NAME");

                entity.Property(e => e.Signature3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE3");

                entity.Property(e => e.Signature3name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE3NAME");

                entity.Property(e => e.Transport)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TRANSPORT");

                entity.Property(e => e.Useorder)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEORDER");

                entity.HasOne(d => d.FinacespectranscodeNavigation)
                    .WithMany(p => p.Financespecdetails)
                    .HasForeignKey(d => d.Finacespectranscode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FINANCESPECDETAILS_FK1");
            });

            modelBuilder.Entity<Financespecprotection>(entity =>
            {
                entity.HasKey(e => e.RowId)
                    .HasName("FINANCESPECPROTECTION_PK");

                entity.ToTable("FINANCESPECPROTECTION");

                entity.HasIndex(e => new { e.Branchid, e.Transcode }, "FINANCESPECPROTECTION_PK1")
                    .IsUnique();

                entity.Property(e => e.RowId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ROW_ID");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Protectiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("PROTECTIONDATE");

                entity.Property(e => e.Transcode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRANSCODE");

                entity.HasOne(d => d.TranscodeNavigation)
                    .WithMany(p => p.Financespecprotections)
                    .HasForeignKey(d => d.Transcode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FINANCESPECPROTECTION_FK2");
            });

            modelBuilder.Entity<FinancetrnsUserAccept>(entity =>
            {
                entity.ToTable("FINANCETRNS_USER_ACCEPT");

                entity.HasIndex(e => new { e.AcceptId, e.Userid }, "FINANCETRNS_USER_ACCEPT_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AcceptId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCEPT_ID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.Accept)
                    .WithMany(p => p.FinancetrnsUserAccepts)
                    .HasForeignKey(d => d.AcceptId)
                    .HasConstraintName("FINANCETRNS_USER_ACCEPT_R01");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.FinancetrnsUserAccepts)
                    .HasForeignKey(d => d.Userid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FINANCETRNS_USER_ACCEPT_R02");
            });

            modelBuilder.Entity<Financetype>(entity =>
            {
                entity.HasKey(e => e.RowId)
                    .HasName("FINANCETYPE_PK");

                entity.ToTable("FINANCETYPE");

                entity.Property(e => e.RowId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ROW_ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Financialcancellation>(entity =>
            {
                entity.ToTable("FINANCIALCANCELLATION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Financialmid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCIALMID");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.HasOne(d => d.Financialm)
                    .WithMany(p => p.Financialcancellations)
                    .HasForeignKey(d => d.Financialmid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SYS_C0019441");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Financialcancellations)
                    .HasForeignKey(d => d.Saleformid)
                    .HasConstraintName("SYS_C0019736");
            });

            modelBuilder.Entity<FormChecks1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FORM_CHECKS1");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Debtorid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEBTORID");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Financemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEMID");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.StoreAllcodesCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("STORE_ALLCODES_CODE");

                entity.Property(e => e.TrnsDesc)
                    .HasMaxLength(81)
                    .IsUnicode(false)
                    .HasColumnName("TRNS_DESC");
            });

            modelBuilder.Entity<FormChecks2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FORM_CHECKS2");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Debtorid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEBTORID");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Financemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEMID");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Hafzadate)
                    .HasColumnType("DATE")
                    .HasColumnName("HAFZADATE");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.StoreAllcodesCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("STORE_ALLCODES_CODE");

                entity.Property(e => e.TrnsDesc)
                    .HasMaxLength(81)
                    .IsUnicode(false)
                    .HasColumnName("TRNS_DESC");
            });

            modelBuilder.Entity<FormChecks2mod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FORM_CHECKS2MOD");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Debtorid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEBTORID");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Financemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEMID");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Hafzadate)
                    .HasColumnType("DATE")
                    .HasColumnName("HAFZADATE");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.StoreAllcodesCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("STORE_ALLCODES_CODE");

                entity.Property(e => e.TrnsDesc)
                    .HasMaxLength(81)
                    .IsUnicode(false)
                    .HasColumnName("TRNS_DESC");
            });

            modelBuilder.Entity<FormPayments1OneRow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FORM_PAYMENTS1_ONE_ROW");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.CashFixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_FIXEDCOSTVAL");

                entity.Property(e => e.CashPayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_PAYED");

                entity.Property(e => e.CashPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_PENALTY");

                entity.Property(e => e.CheckFixedcostvalCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_FIXEDCOSTVAL_COLLECTED");

                entity.Property(e => e.CheckFixedcostvalTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_FIXEDCOSTVAL_TOTAL");

                entity.Property(e => e.CheckPayedCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PAYED_COLLECTED");

                entity.Property(e => e.CheckPayedTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PAYED_TOTAL");

                entity.Property(e => e.CheckPenaltyCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PENALTY_COLLECTED");

                entity.Property(e => e.CheckPenaltyTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PENALTY_TOTAL");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Ownercompany)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.TransferFixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSFER_FIXEDCOSTVAL");

                entity.Property(e => e.TransferPayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSFER_PAYED");

                entity.Property(e => e.TransferPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSFER_PENALTY");
            });

            modelBuilder.Entity<FormPayments1OneRowaddition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FORM_PAYMENTS1_ONE_ROWADDITION");

                entity.Property(e => e.AddationFixedcostvalTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATION_FIXEDCOSTVAL_TOTAL");

                entity.Property(e => e.AddationcashFixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCASH_FIXEDCOSTVAL");

                entity.Property(e => e.AddationcashPayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCASH_PAYED");

                entity.Property(e => e.AddationcashPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCASH_PENALTY");

                entity.Property(e => e.AddationcheckPayedCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCHECK_PAYED_COLLECTED");

                entity.Property(e => e.AddationcheckPayedTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCHECK_PAYED_TOTAL");

                entity.Property(e => e.AddationcheckPenaltyTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCHECK_PENALTY_TOTAL");

                entity.Property(e => e.Addationcheckfixedvalcollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCHECKFIXEDVALCOLLECTED");

                entity.Property(e => e.Addationcheckpenaltycollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCHECKPENALTYCOLLECTED");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.UnitFixedcostvalTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_FIXEDCOSTVAL_TOTAL");

                entity.Property(e => e.UnitcashFixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCASH_FIXEDCOSTVAL");

                entity.Property(e => e.UnitcashPayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCASH_PAYED");

                entity.Property(e => e.UnitcashPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCASH_PENALTY");

                entity.Property(e => e.UnitcheckPayedTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCHECK_PAYED_TOTAL");

                entity.Property(e => e.UnitcheckPenaltyTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCHECK_PENALTY_TOTAL");

                entity.Property(e => e.Unitcheckfixedvalcollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCHECKFIXEDVALCOLLECTED");

                entity.Property(e => e.Unitcheckpayedcollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCHECKPAYEDCOLLECTED");

                entity.Property(e => e.Unitcheckpenaltycollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCHECKPENALTYCOLLECTED");
            });

            modelBuilder.Entity<FormadditionsDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FORMADDITIONS_DEDUCTIONS");

                entity.Property(e => e.AffectSaleValue)
                    .HasMaxLength(1)
                    .HasColumnName("AFFECT_SALE_VALUE");

                entity.Property(e => e.Amount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.Ereason)
                    .HasMaxLength(50)
                    .HasColumnName("EREASON");

                entity.Property(e => e.Factor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACTOR");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Ontotalform)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ONTOTALFORM");

                entity.Property(e => e.Reason)
                    .HasMaxLength(50)
                    .HasColumnName("REASON");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<FormadditionsDeductions2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FORMADDITIONS_DEDUCTIONS2");

                entity.Property(e => e.AffectSaleValue)
                    .HasMaxLength(1)
                    .HasColumnName("AFFECT_SALE_VALUE");

                entity.Property(e => e.Ereason)
                    .HasMaxLength(50)
                    .HasColumnName("EREASON");

                entity.Property(e => e.Factor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACTOR");

                entity.Property(e => e.Ontotalform)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ONTOTALFORM");

                entity.Property(e => e.Reason)
                    .HasMaxLength(50)
                    .HasColumnName("REASON");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Totaladditions)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALADDITIONS");

                entity.Property(e => e.Totaldeductions)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALDEDUCTIONS");
            });

            modelBuilder.Entity<FormadditionsDeductionsInst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FORMADDITIONS_DEDUCTIONS_INST");

                entity.Property(e => e.AffectSaleValue)
                    .HasMaxLength(1)
                    .HasColumnName("AFFECT_SALE_VALUE");

                entity.Property(e => e.Amount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.Ereason)
                    .HasMaxLength(50)
                    .HasColumnName("EREASON");

                entity.Property(e => e.Factor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACTOR");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalementename)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALEMENTENAME");

                entity.Property(e => e.Instalementid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALEMENTID");

                entity.Property(e => e.Instalementname)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALEMENTNAME");

                entity.Property(e => e.Instalementvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALEMENTVALUE");

                entity.Property(e => e.Ontotalform)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ONTOTALFORM");

                entity.Property(e => e.Reason)
                    .HasMaxLength(50)
                    .HasColumnName("REASON");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<Formstaff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FORMSTAFF");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Flag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.Formstatustypes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMSTATUSTYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Staff)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF");
            });

            modelBuilder.Entity<FormstaffRep>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FORMSTAFF_REP");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Flag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.Formstatustypes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMSTATUSTYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.Mandatoryid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORYID");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Staff)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2");
            });

            modelBuilder.Entity<Formtotaladddeduce>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FORMTOTALADDDEDUCE");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Totaladdtitions)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALADDTITIONS");

                entity.Property(e => e.Totaldeductions)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALDEDUCTIONS");
            });

            modelBuilder.Entity<Fromtodesc>(entity =>
            {
                entity.ToTable("FROMTODESC");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Distdesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DISTDESC");

                entity.Property(e => e.Distvalue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DISTVALUE");
            });

            modelBuilder.Entity<Frunitdum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FRUNITDA");

                entity.Property(e => e.FromDatecalc)
                    .HasColumnType("DATE")
                    .HasColumnName("FROM_DATECALC");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<Furtunitsdatatwo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FURTUNITSDATATWO");
            });

            modelBuilder.Entity<FutureInstalment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FUTURE_INSTALMENTS");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Edescr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EDESCR");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Instalmentpartsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTPARTSID");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Year)
                    .HasColumnType("NUMBER")
                    .HasColumnName("YEAR_");
            });

            modelBuilder.Entity<FutureInstalmentsMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FUTURE_INSTALMENTS_MOD");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Edescr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EDESCR");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentpartsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTPARTSID");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Year)
                    .HasColumnType("NUMBER")
                    .HasColumnName("YEAR_");
            });

            modelBuilder.Entity<FutureInstalmentsYearsw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FUTURE_INSTALMENTS_YEARSW");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");
            });

            modelBuilder.Entity<Generalspec>(entity =>
            {
                entity.HasKey(e => e.Specid)
                    .HasName("GENERALSPECS_PK");

                entity.ToTable("GENERALSPECS");

                entity.Property(e => e.Specid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SPECID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Levels)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LEVELS");
            });

            modelBuilder.Entity<Generalspecsdetail>(entity =>
            {
                entity.HasKey(e => e.Detailsid)
                    .HasName("GENERALSPECSDETAILS_PK");

                entity.ToTable("GENERALSPECSDETAILS");

                entity.Property(e => e.Detailsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DETAILSID");

                entity.Property(e => e.Length)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LENGTH");

                entity.Property(e => e.Levelnumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LEVELNUMBER");

                entity.Property(e => e.Specid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SPECID");

                entity.HasOne(d => d.Spec)
                    .WithMany(p => p.Generalspecsdetails)
                    .HasForeignKey(d => d.Specid)
                    .HasConstraintName("GENERALSPECSDETAILS_FK1");
            });

            modelBuilder.Entity<GetCostbyitempreviousview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GET_COSTBYITEMPREVIOUSVIEW");

                entity.Property(e => e.ItemId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEM_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");
            });

            modelBuilder.Entity<Getallpermission>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GETALLPERMISSIONS");

                entity.Property(e => e.Arabicname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ARABICNAME");

                entity.Property(e => e.PageId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAGE_ID");

                entity.Property(e => e.PerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PER_ID");

                entity.Property(e => e.PerName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PER_NAME");

                entity.Property(e => e.PerStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PER_STATUS");

                entity.Property(e => e.RoleId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ROLE_ID");

                entity.Property(e => e.Rowsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ROWSID");
            });

            modelBuilder.Entity<Getcompositeinsitemview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GETCOMPOSITEINSITEMVIEW");

                entity.Property(e => e.Activitytype)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYTYPE");

                entity.Property(e => e.Code)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Kind)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("KIND");
            });

            modelBuilder.Entity<Getinstalmentgrossleftview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GETINSTALMENTGROSSLEFTVIEW");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Formtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FORMTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Grossleft)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSLEFT");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Hstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("HSTAMP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instalmentvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTVALUE");

                entity.Property(e => e.Penaltyval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYVAL");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Trnsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSID");
            });

            modelBuilder.Entity<Getitempercentagebytrnsview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GETITEMPERCENTAGEBYTRNSVIEW");

                entity.Property(e => e.ItemId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEM_ID");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.Totalo)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TOTALO");
            });

            modelBuilder.Entity<Getrentformdataview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GETRENTFORMDATAVIEW");

                entity.Property(e => e.Branchaname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHANAME");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Customerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERENAME");

                entity.Property(e => e.Customername)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<GetrentformdataviewMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GETRENTFORMDATAVIEW_MOD");

                entity.Property(e => e.Branchaname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHANAME");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Customercode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERCODE");

                entity.Property(e => e.Customerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERENAME");

                entity.Property(e => e.Customerid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Customername)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Remainvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REMAINVALUE");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<Getsaleformdataview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GETSALEFORMDATAVIEW");

                entity.Property(e => e.Branchaname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHANAME");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Customerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERENAME");

                entity.Property(e => e.Customername)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Estatue)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ESTATUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Formstatustypes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMSTATUSTYPES");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Statue)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("STATUE")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<GlAccount>(entity =>
            {
                entity.ToTable("GL_ACCOUNT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Accountclass)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNTCLASS");

                entity.Property(e => e.Accounttype)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ACCOUNTTYPE");

                entity.Property(e => e.Alevel)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ALEVEL");

                entity.Property(e => e.Ardesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ARDESC");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Canbeanalyzed)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("CANBEANALYZED");

                entity.Property(e => e.Closureaccount)
                    .HasPrecision(1)
                    .HasColumnName("CLOSUREACCOUNT");

                entity.Property(e => e.Currency)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.Destinationtype)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("DESTINATIONTYPE");

                entity.Property(e => e.Endesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENDESC");

                entity.Property(e => e.Iscredit)
                    .HasPrecision(1)
                    .HasColumnName("ISCREDIT");

                entity.Property(e => e.Islast)
                    .HasPrecision(1)
                    .HasColumnName("ISLAST");

                entity.Property(e => e.Islocked)
                    .HasPrecision(1)
                    .HasColumnName("ISLOCKED");

                entity.Property(e => e.Isprivate)
                    .HasPrecision(1)
                    .HasColumnName("ISPRIVATE");

                entity.Property(e => e.Longcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LONGCODE");

                entity.Property(e => e.Openingbalance)
                    .HasColumnType("FLOAT")
                    .HasColumnName("OPENINGBALANCE");

                entity.Property(e => e.Openingbalancedate)
                    .HasColumnType("DATE")
                    .HasColumnName("OPENINGBALANCEDATE");

                entity.Property(e => e.Parentaccount)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("PARENTACCOUNT");

                entity.Property(e => e.Parentanalysis)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("PARENTANALYSIS");

                entity.Property(e => e.Parentcategoryaccount)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("PARENTCATEGORYACCOUNT");

                entity.Property(e => e.Parentcategoryanalysis)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("PARENTCATEGORYANALYSIS");

                entity.Property(e => e.Reporttype)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("REPORTTYPE");

                entity.Property(e => e.Shortcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SHORTCODE");

                entity.Property(e => e.StrOpeningbalancedate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STR_OPENINGBALANCEDATE");
            });

            modelBuilder.Entity<GlAccountFySummary>(entity =>
            {
                entity.ToTable("GL_ACCOUNT_FY_SUMMARY");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Account)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ACCOUNT");

                entity.Property(e => e.Openingbalance)
                    .HasColumnType("FLOAT")
                    .HasColumnName("OPENINGBALANCE");

                entity.Property(e => e.Year)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<GlAccountLevel>(entity =>
            {
                entity.ToTable("GL_ACCOUNT_LEVEL");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Accounttype)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ACCOUNTTYPE");

                entity.Property(e => e.Islastlevel)
                    .HasPrecision(1)
                    .HasColumnName("ISLASTLEVEL");

                entity.Property(e => e.Length)
                    .HasPrecision(11)
                    .HasColumnName("LENGTH");

                entity.Property(e => e.Levelno)
                    .HasPrecision(11)
                    .HasColumnName("LEVELNO");
            });

            modelBuilder.Entity<GlAccountType>(entity =>
            {
                entity.ToTable("GL_ACCOUNT_TYPE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<GlCompany>(entity =>
            {
                entity.ToTable("GL_COMPANY");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Ardesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ARDESC");

                entity.Property(e => e.Endesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENDESC");
            });

            modelBuilder.Entity<GlCurrency>(entity =>
            {
                entity.ToTable("GL_CURRENCY");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Ardesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ARDESC");

                entity.Property(e => e.Endesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENDESC");

                entity.Property(e => e.Islocalcurrency)
                    .HasPrecision(1)
                    .HasColumnName("ISLOCALCURRENCY");

                entity.Property(e => e.Islocked)
                    .HasPrecision(1)
                    .HasColumnName("ISLOCKED");

                entity.Property(e => e.Rate)
                    .HasColumnType("FLOAT")
                    .HasColumnName("RATE");

                entity.Property(e => e.Symbol)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SYMBOL");
            });

            modelBuilder.Entity<GlCurrencyHistory>(entity =>
            {
                entity.ToTable("GL_CURRENCY_HISTORY");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Currency)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.Exchangerate)
                    .HasColumnType("FLOAT")
                    .HasColumnName("EXCHANGERATE");

                entity.Property(e => e.Ratedate)
                    .HasColumnType("DATE")
                    .HasColumnName("RATEDATE");
            });

            modelBuilder.Entity<GlDetailedBudget>(entity =>
            {
                entity.ToTable("GL_DETAILED_BUDGET");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Creditamount)
                    .HasColumnType("FLOAT")
                    .HasColumnName("CREDITAMOUNT");

                entity.Property(e => e.Dbdate)
                    .HasColumnType("DATE")
                    .HasColumnName("DBDATE");

                entity.Property(e => e.Debitamount)
                    .HasColumnType("FLOAT")
                    .HasColumnName("DEBITAMOUNT");

                entity.Property(e => e.Financialaccount)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("FINANCIALACCOUNT");

                entity.Property(e => e.Financialyear)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("FINANCIALYEAR");

                entity.Property(e => e.Manual)
                    .HasPrecision(1)
                    .HasColumnName("MANUAL");

                entity.Property(e => e.Masterbudget)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("MASTERBUDGET");
            });

            modelBuilder.Entity<GlDetailedTransAnalysis>(entity =>
            {
                entity.ToTable("GL_DETAILED_TRANS_ANALYSIS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("FLOAT")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.Ardesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ARDESC");

                entity.Property(e => e.Detailedtransaction)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("DETAILEDTRANSACTION");

                entity.Property(e => e.Endesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENDESC");

                entity.Property(e => e.Leafanalysis)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("LEAFANALYSIS");
            });

            modelBuilder.Entity<GlDetailedTransaction>(entity =>
            {
                entity.ToTable("GL_DETAILED_TRANSACTION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("FLOAT")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.Ardesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ARDESC");

                entity.Property(e => e.Currency)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("FLOAT")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Leafaccount)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("LEAFACCOUNT");

                entity.Property(e => e.Localamount)
                    .HasColumnType("FLOAT")
                    .HasColumnName("LOCALAMOUNT");

                entity.Property(e => e.Mastertransaction)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("MASTERTRANSACTION");

                entity.Property(e => e.Referencedate)
                    .HasColumnType("DATE")
                    .HasColumnName("REFERENCEDATE");

                entity.Property(e => e.Referenceno)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCENO");

                entity.Property(e => e.Referencetype)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCETYPE");
            });

            modelBuilder.Entity<GlDocumentType>(entity =>
            {
                entity.ToTable("GL_DOCUMENT_TYPE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Ardesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ARDESC");

                entity.Property(e => e.Endesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENDESC");

                entity.Property(e => e.Islocked)
                    .HasPrecision(1)
                    .HasColumnName("ISLOCKED");
            });

            modelBuilder.Entity<GlDummy>(entity =>
            {
                entity.ToTable("GL_DUMMY");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Constant)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("CONSTANT");
            });

            modelBuilder.Entity<GlEquation>(entity =>
            {
                entity.ToTable("GL_EQUATION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Formula)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FORMULA");

                entity.Property(e => e.Fromdate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROMDATE");

                entity.Property(e => e.Posted)
                    .HasPrecision(1)
                    .HasColumnName("POSTED");

                entity.Property(e => e.Todate)
                    .HasColumnType("DATE")
                    .HasColumnName("TODATE");
            });

            modelBuilder.Entity<GlExpectedBalance>(entity =>
            {
                entity.ToTable("GL_EXPECTED_BALANCE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Account)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ACCOUNT");

                entity.Property(e => e.Balance)
                    .HasColumnType("FLOAT")
                    .HasColumnName("BALANCE");

                entity.Property(e => e.Ebdate)
                    .HasColumnType("DATE")
                    .HasColumnName("EBDATE");

                entity.Property(e => e.Financialyear)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("FINANCIALYEAR");
            });

            modelBuilder.Entity<GlFinancialPeriod>(entity =>
            {
                entity.ToTable("GL_FINANCIAL_PERIOD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Ardesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ARDESC");

                entity.Property(e => e.Closingdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CLOSINGDATE");

                entity.Property(e => e.Endesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENDESC");

                entity.Property(e => e.Financialyear)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("FINANCIALYEAR");

                entity.Property(e => e.Iseditable)
                    .HasPrecision(1)
                    .HasColumnName("ISEDITABLE");

                entity.Property(e => e.Openingdate)
                    .HasColumnType("DATE")
                    .HasColumnName("OPENINGDATE");
            });

            modelBuilder.Entity<GlFinancialYear>(entity =>
            {
                entity.ToTable("GL_FINANCIAL_YEAR");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Closuredate)
                    .HasColumnType("DATE")
                    .HasColumnName("CLOSUREDATE");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Fromdate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROMDATE");

                entity.Property(e => e.Isclosed)
                    .HasPrecision(1)
                    .HasColumnName("ISCLOSED");

                entity.Property(e => e.Old)
                    .HasPrecision(1)
                    .HasColumnName("OLD");

                entity.Property(e => e.Todate)
                    .HasColumnType("DATE")
                    .HasColumnName("TODATE");
            });

            modelBuilder.Entity<GlMasterBudget>(entity =>
            {
                entity.ToTable("GL_MASTER_BUDGET");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Ardesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ARDESC");

                entity.Property(e => e.Enddate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.Endesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENDESC");

                entity.Property(e => e.Flag)
                    .HasPrecision(1)
                    .HasColumnName("FLAG");

                entity.Property(e => e.GlMasterBudgetDate)
                    .HasColumnType("DATE")
                    .HasColumnName("GL_MASTER_BUDGET_DATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Serial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL");

                entity.Property(e => e.Startdate)
                    .HasColumnType("DATE")
                    .HasColumnName("STARTDATE");
            });

            modelBuilder.Entity<GlMasterTransaction>(entity =>
            {
                entity.ToTable("GL_MASTER_TRANSACTION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Analyticalno)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ANALYTICALNO");

                entity.Property(e => e.Ardesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ARDESC");

                entity.Property(e => e.Branch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH");

                entity.Property(e => e.Canceledtransaction)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("CANCELEDTRANSACTION");

                entity.Property(e => e.Currency)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.Documentserial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTSERIAL");

                entity.Property(e => e.Endesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENDESC");

                entity.Property(e => e.Financialperiod)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("FINANCIALPERIOD");

                entity.Property(e => e.Frequency)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("FREQUENCY");

                entity.Property(e => e.Fromtime)
                    .HasColumnType("DATE")
                    .HasColumnName("FROMTIME");

                entity.Property(e => e.GlMasterTransactionDate)
                    .HasColumnType("DATE")
                    .HasColumnName("GL_MASTER_TRANSACTION_DATE");

                entity.Property(e => e.Integratingapplication)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("INTEGRATINGAPPLICATION");

                entity.Property(e => e.Isdraft)
                    .HasPrecision(1)
                    .HasColumnName("ISDRAFT");

                entity.Property(e => e.Islocked)
                    .HasPrecision(1)
                    .HasColumnName("ISLOCKED");

                entity.Property(e => e.Isopening)
                    .HasPrecision(1)
                    .HasColumnName("ISOPENING");

                entity.Property(e => e.Isposted)
                    .HasPrecision(1)
                    .HasColumnName("ISPOSTED");

                entity.Property(e => e.Journaltype)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("JOURNALTYPE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Readytostopsuspension)
                    .HasPrecision(1)
                    .HasColumnName("READYTOSTOPSUSPENSION");

                entity.Property(e => e.Refusalreason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REFUSALREASON");

                entity.Property(e => e.Refused)
                    .HasPrecision(1)
                    .HasColumnName("REFUSED");

                entity.Property(e => e.Repeatabletransaction)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("REPEATABLETRANSACTION");

                entity.Property(e => e.Revised)
                    .HasPrecision(1)
                    .HasColumnName("REVISED");

                entity.Property(e => e.Serial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL");

                entity.Property(e => e.Suspended)
                    .HasPrecision(1)
                    .HasColumnName("SUSPENDED");

                entity.Property(e => e.Suspensionbanned)
                    .HasPrecision(1)
                    .HasColumnName("SUSPENSIONBANNED");

                entity.Property(e => e.Totalamount)
                    .HasColumnType("FLOAT")
                    .HasColumnName("TOTALAMOUNT");

                entity.Property(e => e.Totime)
                    .HasColumnType("DATE")
                    .HasColumnName("TOTIME");

                entity.Property(e => e.Transactionclass)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTIONCLASS");

                entity.Property(e => e.Transactionstatus)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("TRANSACTIONSTATUS");

                entity.Property(e => e.Transactiontype)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("TRANSACTIONTYPE");

                entity.Property(e => e.Transdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSDATE");

                entity.Property(e => e.Types)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("TYPES");
            });

            modelBuilder.Entity<GlMonth>(entity =>
            {
                entity.ToTable("GL_MONTH");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Monthvalue)
                    .HasPrecision(11)
                    .HasColumnName("MONTHVALUE");
            });

            modelBuilder.Entity<GlOracleSpec>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("SYS_C0017899");

                entity.ToTable("GL_ORACLE_SPECS");

                entity.Property(e => e.Code)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.CreatedBy)
                    .HasPrecision(15)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.Csegments)
                    .HasPrecision(2)
                    .HasColumnName("CSEGMENTS");

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_CODE");

                entity.Property(e => e.Dbcatalogowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DBCATALOGOWNER");

                entity.Property(e => e.Dbpassword)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DBPASSWORD");

                entity.Property(e => e.Dbservice)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DBSERVICE");

                entity.Property(e => e.Dbuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DBUSER");

                entity.Property(e => e.Defaultday)
                    .HasPrecision(2)
                    .HasColumnName("DEFAULTDAY");

                entity.Property(e => e.GlCalenderName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GL_CALENDER_NAME");

                entity.Property(e => e.JeCategoryName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("JE_CATEGORY_NAME");

                entity.Property(e => e.JeSourceName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("JE_SOURCE_NAME");

                entity.Property(e => e.SetOfBooksId)
                    .HasPrecision(15)
                    .HasColumnName("SET_OF_BOOKS_ID");
            });

            modelBuilder.Entity<GlSegment>(entity =>
            {
                entity.HasKey(e => e.Rank)
                    .HasName("SYS_C0017901");

                entity.ToTable("GL_SEGMENTS");

                entity.Property(e => e.Rank)
                    .HasPrecision(2)
                    .HasColumnName("RANK");

                entity.Property(e => e.Description)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.FlexValueSetId)
                    .HasPrecision(10)
                    .HasColumnName("FLEX_VALUE_SET_ID");

                entity.Property(e => e.Maxlen)
                    .HasPrecision(2)
                    .HasColumnName("MAXLEN");

                entity.Property(e => e.Ttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TTYPE");

                entity.Property(e => e.Value)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<GlSetting>(entity =>
            {
                entity.ToTable("GL_SETTINGS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Cancelpostingtransactivated)
                    .HasPrecision(1)
                    .HasColumnName("CANCELPOSTINGTRANSACTIVATED");

                entity.Property(e => e.Jtypemtransmandatory)
                    .HasPrecision(1)
                    .HasColumnName("JTYPEMTRANSMANDATORY");

                entity.Property(e => e.Revisebeforepost)
                    .HasPrecision(1)
                    .HasColumnName("REVISEBEFOREPOST");

                entity.Property(e => e.Trialbudgetwithouttransstatus)
                    .HasPrecision(1)
                    .HasColumnName("TRIALBUDGETWITHOUTTRANSSTATUS");
            });

            modelBuilder.Entity<GlSupportingDocument>(entity =>
            {
                entity.ToTable("GL_SUPPORTING_DOCUMENT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Docdate)
                    .HasColumnType("DATE")
                    .HasColumnName("DOCDATE");

                entity.Property(e => e.Documenttype)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("DOCUMENTTYPE");

                entity.Property(e => e.GlSupportingDocumentDate)
                    .HasColumnType("DATE")
                    .HasColumnName("GL_SUPPORTING_DOCUMENT_DATE");

                entity.Property(e => e.Mastertransaction)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("MASTERTRANSACTION");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Serial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL");
            });

            modelBuilder.Entity<GlSuspensionDetail>(entity =>
            {
                entity.ToTable("GL_SUSPENSION_DETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Active)
                    .HasPrecision(1)
                    .HasColumnName("ACTIVE");

                entity.Property(e => e.Disabled)
                    .HasPrecision(1)
                    .HasColumnName("DISABLED");

                entity.Property(e => e.Mastertransaction)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("MASTERTRANSACTION");

                entity.Property(e => e.Suspensiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("SUSPENSIONDATE");

                entity.Property(e => e.Suspensionemployee)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("SUSPENSIONEMPLOYEE");

                entity.Property(e => e.Suspensionnote)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SUSPENSIONNOTE");

                entity.Property(e => e.Suspensionreplydate)
                    .HasColumnType("DATE")
                    .HasColumnName("SUSPENSIONREPLYDATE");

                entity.Property(e => e.Suspensionreplyemployee)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("SUSPENSIONREPLYEMPLOYEE");

                entity.Property(e => e.Suspensionreplynote)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SUSPENSIONREPLYNOTE");
            });

            modelBuilder.Entity<Glintegratorm>(entity =>
            {
                entity.ToTable("GLINTEGRATORM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Entrydesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENTRYDESC");

                entity.Property(e => e.Entrynumber)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ENTRYNUMBER");

                entity.Property(e => e.Getanalaysiscode)
                    .HasPrecision(1)
                    .HasColumnName("GETANALAYSISCODE");

                entity.Property(e => e.Getdocnumber)
                    .HasPrecision(1)
                    .HasColumnName("GETDOCNUMBER");

                entity.Property(e => e.Integratortrnstypeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INTEGRATORTRNSTYPEID");

                entity.Property(e => e.Journalcodeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOURNALCODEID");

                entity.Property(e => e.Trnscode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSCODE");

                entity.Property(e => e.Trnstype)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TRNSTYPE");
            });

            modelBuilder.Entity<Glintegratoro>(entity =>
            {
                entity.ToTable("GLINTEGRATORO");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Accountnatureid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTNATUREID");

                entity.Property(e => e.Codelinkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODELINKID");

                entity.Property(e => e.FromTo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FROM_TO");

                entity.Property(e => e.Getdimension)
                    .HasPrecision(1)
                    .HasColumnName("GETDIMENSION");

                entity.Property(e => e.Getindiv)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("GETINDIV");

                entity.Property(e => e.Glintegratormid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GLINTEGRATORMID");

                entity.Property(e => e.IntgOrgVariablesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INTG_ORG_VARIABLESID");

                entity.Property(e => e.Note)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOTE");

                entity.HasOne(d => d.Accountnature)
                    .WithMany(p => p.Glintegratoros)
                    .HasForeignKey(d => d.Accountnatureid)
                    .HasConstraintName("GLINTEGRATORO_FK3");

                entity.HasOne(d => d.Codelink)
                    .WithMany(p => p.Glintegratoros)
                    .HasForeignKey(d => d.Codelinkid)
                    .HasConstraintName("GLINTEGRATORO_FK2");

                entity.HasOne(d => d.Glintegratorm)
                    .WithMany(p => p.Glintegratoros)
                    .HasForeignKey(d => d.Glintegratormid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("GLINTEGRATORO_FK1");

                entity.HasOne(d => d.IntgOrgVariables)
                    .WithMany(p => p.Glintegratoros)
                    .HasForeignKey(d => d.IntgOrgVariablesid)
                    .HasConstraintName("GLINTEGRATORO_FK4");
            });

            modelBuilder.Entity<Glintergrationsetting>(entity =>
            {
                entity.ToTable("GLINTERGRATIONSETTING");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Currentdatabasename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENTDATABASENAME");

                entity.Property(e => e.Databasename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DATABASENAME");

                entity.Property(e => e.Dblinkname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DBLINKNAME");

                entity.Property(e => e.Integrationtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTEGRATIONTYPE");

                entity.Property(e => e.Schemaname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SCHEMANAME");
            });

            modelBuilder.Entity<GroupBasicDatum>(entity =>
            {
                entity.HasKey(e => e.GroupBasicId)
                    .HasName("GROUP_BASIC_DATA_PK");

                entity.ToTable("GROUP_BASIC_DATA");

                entity.Property(e => e.GroupBasicId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("GROUP_BASIC_ID");

                entity.Property(e => e.Attribute)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ATTRIBUTE");

                entity.Property(e => e.Attributeen)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ATTRIBUTEEN");

                entity.Property(e => e.Coltype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("COLTYPE");

                entity.Property(e => e.DetailsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DETAILS_ID");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Groupfdetailid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROUPFDETAILID");

                entity.Property(e => e.Rank)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RANK");

                entity.Property(e => e.Requiredfield)
                    .HasPrecision(1)
                    .HasColumnName("REQUIREDFIELD")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Showincontract)
                    .HasPrecision(1)
                    .HasColumnName("SHOWINCONTRACT");

                entity.Property(e => e.Uniquefield)
                    .HasPrecision(1)
                    .HasColumnName("UNIQUEFIELD")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Details)
                    .WithMany(p => p.GroupBasicData)
                    .HasForeignKey(d => d.DetailsId)
                    .HasConstraintName("GROUP_BASIC_DATA_R02");

                entity.HasOne(d => d.Groupf)
                    .WithMany(p => p.GroupBasicData)
                    .HasForeignKey(d => d.GroupfId)
                    .HasConstraintName("GROUP_BASIC_DATA_R01");
            });

            modelBuilder.Entity<Groupf>(entity =>
            {
                entity.ToTable("GROUPF");

                entity.HasIndex(e => new { e.Codetype, e.Codeform }, "GROUPF_U01")
                    .IsUnique();

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Codeform)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CODEFORM");

                entity.Property(e => e.Codetype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CODETYPE");

                entity.Property(e => e.Codinglastpart)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODINGLASTPART");

                entity.Property(e => e.Containfertunit)
                    .HasPrecision(1)
                    .HasColumnName("CONTAINFERTUNIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.GroupfOriginalId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROUPF_ORIGINAL_ID");

                entity.Property(e => e.Ingredients)
                    .HasPrecision(1)
                    .HasColumnName("INGREDIENTS");

                entity.Property(e => e.Noofpartions)
                    .HasPrecision(2)
                    .HasColumnName("NOOFPARTIONS");

                entity.Property(e => e.Separator)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SEPARATOR");

                entity.Property(e => e.Servgroup)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVGROUP")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.CodetypeNavigation)
                    .WithMany(p => p.Groupfs)
                    .HasForeignKey(d => d.Codetype)
                    .HasConstraintName("GROUPF_R01");
            });

            modelBuilder.Entity<GroupfDetail>(entity =>
            {
                entity.HasKey(e => e.GroupfDetailsId)
                    .HasName("GROUPF_DETAILS_PK");

                entity.ToTable("GROUPF_DETAILS");

                entity.HasIndex(e => e.Clevel, "CLEVEL_INDX");

                entity.HasIndex(e => e.GroupfId, "GROUPF_ID_INDX");

                entity.HasIndex(e => e.RefType, "REF_TYPE_INDX");

                entity.Property(e => e.GroupfDetailsId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("GROUPF_DETAILS_ID");

                entity.Property(e => e.Clevel)
                    .HasPrecision(3)
                    .HasColumnName("CLEVEL");

                entity.Property(e => e.GroupfDetailsOriginalId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROUPF_DETAILS_ORIGINAL_ID");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Length)
                    .HasPrecision(3)
                    .HasColumnName("LENGTH");

                entity.Property(e => e.RefType)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("REF_TYPE");

                entity.HasOne(d => d.Groupf)
                    .WithMany(p => p.GroupfDetails)
                    .HasForeignKey(d => d.GroupfId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("GROUPF_DETAILS_FK");

                entity.HasOne(d => d.RefTypeNavigation)
                    .WithMany(p => p.GroupfDetails)
                    .HasForeignKey(d => d.RefType)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("GROUPF_DETAILS_FK2");
            });

            modelBuilder.Entity<Hafzadisttype>(entity =>
            {
                entity.HasKey(e => new { e.Hafzatype, e.Ft, e.Disttype })
                    .HasName("SYS_C0017920");

                entity.ToTable("HAFZADISTTYPES");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Ft)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FT");

                entity.Property(e => e.Disttype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DISTTYPE");

                entity.Property(e => e.Rank)
                    .HasPrecision(3)
                    .HasColumnName("RANK");

                entity.Property(e => e.Reserved)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("RESERVED");
            });

            modelBuilder.Entity<Hafzam>(entity =>
            {
                entity.ToTable("HAFZAM");

                entity.HasIndex(e => e.CD, "C_D_INDX");

                entity.HasIndex(e => e.Fdistid, "FDISTID_INDX");

                entity.HasIndex(e => e.Hafzadate, "HAFZADATE_INDX");

                entity.HasIndex(e => e.Hafzatype, "HAFZATYPE_INDX");

                entity.HasIndex(e => e.Hbranch, "HBRANCH_INDX");

                entity.HasIndex(e => e.Tdistid, "TDISTID_INDX");

                entity.HasIndex(e => e.Trnscode, "TRNSCODE_INDX");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Bankexpenses)
                    .HasColumnType("NUMBER(20,4)")
                    .HasColumnName("BANKEXPENSES");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER")
                    .HasColumnName("C_D");

                entity.Property(e => e.Collectiondealydays)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COLLECTIONDEALYDAYS");

                entity.Property(e => e.Cost)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("COST");

                entity.Property(e => e.Documentno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNO");

                entity.Property(e => e.Fdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FDISTID");

                entity.Property(e => e.Financemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCEMID");

                entity.Property(e => e.Hafzadate)
                    .HasColumnType("DATE")
                    .HasColumnName("HAFZADATE");

                entity.Property(e => e.Hafzano)
                    .HasPrecision(10)
                    .HasColumnName("HAFZANO");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Hbranch)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HBRANCH");

                entity.Property(e => e.Hstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("HSTAMP")
                    .HasDefaultValueSql("NULL");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Remark)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Tdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TDISTID");

                entity.Property(e => e.Trnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSCODE");

                entity.HasOne(d => d.CDNavigation)
                    .WithMany(p => p.Hafzams)
                    .HasForeignKey(d => d.CD)
                    .HasConstraintName("HAFZAM_FK1");

                entity.HasOne(d => d.Fdist)
                    .WithMany(p => p.HafzamFdists)
                    .HasForeignKey(d => d.Fdistid)
                    .HasConstraintName("HAFZAM_FK4");

                entity.HasOne(d => d.Financem)
                    .WithMany(p => p.Hafzams)
                    .HasForeignKey(d => d.Financemid)
                    .HasConstraintName("SYS_C0019440");

                entity.HasOne(d => d.HafzatypeNavigation)
                    .WithMany(p => p.Hafzams)
                    .HasForeignKey(d => d.Hafzatype)
                    .HasConstraintName("HAFZAM_FK3");

                entity.HasOne(d => d.HbranchNavigation)
                    .WithMany(p => p.Hafzams)
                    .HasForeignKey(d => d.Hbranch)
                    .HasConstraintName("HAFZAM_FK2");

                entity.HasOne(d => d.PeriodNavigation)
                    .WithMany(p => p.Hafzams)
                    .HasForeignKey(d => d.Period)
                    .HasConstraintName("HAFZAM_FK6");

                entity.HasOne(d => d.Tdist)
                    .WithMany(p => p.HafzamTdists)
                    .HasForeignKey(d => d.Tdistid)
                    .HasConstraintName("HAFZAM_FK5");

                entity.HasOne(d => d.TrnscodeNavigation)
                    .WithMany(p => p.Hafzams)
                    .HasForeignKey(d => d.Trnscode)
                    .HasConstraintName("HAFZAM_FK7");
            });

            modelBuilder.Entity<Hafzao>(entity =>
            {
                entity.HasKey(e => new { e.Hafzaid, e.Checkid })
                    .HasName("HAFZAO_PK");

                entity.ToTable("HAFZAO");

                entity.HasIndex(e => new { e.Checkid, e.Hafzaid }, "HAFZAO111");

                entity.Property(e => e.Hafzaid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZAID");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.HasOne(d => d.Check)
                    .WithMany(p => p.Hafzaos)
                    .HasForeignKey(d => d.Checkid)
                    .HasConstraintName("HAFZAO_R01");

                entity.HasOne(d => d.Hafza)
                    .WithMany(p => p.Hafzaos)
                    .HasForeignKey(d => d.Hafzaid)
                    .HasConstraintName("HAFZAO_R02");
            });

            modelBuilder.Entity<Hafzaspec>(entity =>
            {
                entity.HasKey(e => e.Hafzatype)
                    .HasName("SYS_C0017926");

                entity.ToTable("HAFZASPEC");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Affectfromcash)
                    .HasPrecision(1)
                    .HasColumnName("AFFECTFROMCASH");

                entity.Property(e => e.Affectfromcheck)
                    .HasPrecision(1)
                    .HasColumnName("AFFECTFROMCHECK");

                entity.Property(e => e.Affectownercash)
                    .HasPrecision(1)
                    .HasColumnName("AFFECTOWNERCASH");

                entity.Property(e => e.Affectownercheck)
                    .HasPrecision(1)
                    .HasColumnName("AFFECTOWNERCHECK");

                entity.Property(e => e.Affecttocash)
                    .HasPrecision(1)
                    .HasColumnName("AFFECTTOCASH");

                entity.Property(e => e.Affecttocheck)
                    .HasPrecision(1)
                    .HasColumnName("AFFECTTOCHECK");

                entity.Property(e => e.Affectvendorcash)
                    .HasPrecision(1)
                    .HasColumnName("AFFECTVENDORCASH");

                entity.Property(e => e.Affectvendorcheck)
                    .HasPrecision(1)
                    .HasColumnName("AFFECTVENDORCHECK");

                entity.Property(e => e.Aname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.CD)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("C_D");

                entity.Property(e => e.Changeplace)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGEPLACE");

                entity.Property(e => e.Changestatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGESTATUS");

                entity.Property(e => e.Ename)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Iscashing)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISCASHING");

                entity.Property(e => e.Isedit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISEDIT");

                entity.Property(e => e.Signature1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE1");

                entity.Property(e => e.Signature1name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE1NAME");

                entity.Property(e => e.Signature2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE2");

                entity.Property(e => e.Signature2name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE2NAME");

                entity.Property(e => e.Signature3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE3");

                entity.Property(e => e.Signature3name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE3NAME");

                entity.Property(e => e.Status)
                    .HasPrecision(3)
                    .HasColumnName("STATUS");

                entity.Property(e => e.Usefdist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEFDIST")
                    .HasDefaultValueSql("'1'");

                entity.Property(e => e.Usetdist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USETDIST")
                    .HasDefaultValueSql("'1'");
            });

            modelBuilder.Entity<Hcbrowsableid>(entity =>
            {
                entity.ToTable("HCBROWSABLEIDS");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Keyword)
                    .HasPrecision(10)
                    .HasColumnName("KEYWORD");

                entity.Property(e => e.Maintypeid)
                    .HasPrecision(10)
                    .HasColumnName("MAINTYPEID");
            });

            modelBuilder.Entity<HelpCriterion>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("SYS_C0017933");

                entity.ToTable("HELP_CRITERIA");

                entity.Property(e => e.FId)
                    .HasPrecision(10)
                    .HasColumnName("F_ID");

                entity.Property(e => e.FAlias)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("F_ALIAS");

                entity.Property(e => e.FC)
                    .HasColumnType("NUMBER")
                    .HasColumnName("F_C");

                entity.Property(e => e.FCriteria)
                    .HasPrecision(1)
                    .HasColumnName("F_CRITERIA");

                entity.Property(e => e.FFname)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("F_FNAME");

                entity.Property(e => e.FFtype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("F_FTYPE");

                entity.Property(e => e.FInclude)
                    .HasPrecision(1)
                    .HasColumnName("F_INCLUDE");

                entity.Property(e => e.FShow)
                    .HasPrecision(1)
                    .HasColumnName("F_SHOW");

                entity.Property(e => e.FView)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("F_VIEW");

                entity.Property(e => e.FViewText)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("F_VIEW_TEXT");

                entity.Property(e => e.FViewValue)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("F_VIEW_VALUE");

                entity.Property(e => e.Rank)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RANK");

                entity.HasOne(d => d.FCNavigation)
                    .WithMany(p => p.HelpCriteria)
                    .HasForeignKey(d => d.FC)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("HELP_CRITERIA_R01");
            });

            modelBuilder.Entity<I18nKey>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("I18N_KEY");

                entity.HasIndex(e => e.Id, "I18N_KEY_X")
                    .IsUnique();

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NAME");
            });

            modelBuilder.Entity<I18nLocale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("I18N_LOCALE");

                entity.HasIndex(e => e.Id, "I18N_LOCALE_X")
                    .IsUnique();

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Country)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.Isdefault)
                    .HasPrecision(1)
                    .HasColumnName("ISDEFAULT");

                entity.Property(e => e.Language)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LANGUAGE");

                entity.Property(e => e.Variant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VARIANT");
            });

            modelBuilder.Entity<I18nMessage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("I18N_MESSAGE");

                entity.HasIndex(e => e.Id, "I18N_MESSAGE_X")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.KeyId)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("KEY_ID");

                entity.Property(e => e.Message)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MESSAGE");

                entity.Property(e => e.Mylocale)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("MYLOCALE");
            });

            modelBuilder.Entity<InstAffectSalepriceCorrect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_AFFECT_SALEPRICE_CORRECT");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Val)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("VAL");
            });

            modelBuilder.Entity<InstAffetSaleprice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_AFFET_SALEPRICE");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Payedval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYEDVAL");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");

                entity.Property(e => e.Val)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("VAL");
            });

            modelBuilder.Entity<InstAffetSalepriceCorrect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_AFFET_SALEPRICE_CORRECT");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Val)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("VAL");
            });

            modelBuilder.Entity<InstChecksUnderCollection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_CHECKS_UNDER_COLLECTION");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<InstHasFuturePayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_HAS_FUTURE_PAYMENTS");
            });

            modelBuilder.Entity<InstPayments1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_PAYMENTS1");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Fixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL");

                entity.Property(e => e.FixedcostvalCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL_COLLECTED");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_COLLECTED");

                entity.Property(e => e.Paytype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAYTYPE");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.PenaltyCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY_COLLECTED");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<InstPayments1OneRow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_PAYMENTS1_ONE_ROW");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.CashFixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_FIXEDCOSTVAL");

                entity.Property(e => e.CashPayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_PAYED");

                entity.Property(e => e.CashPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_PENALTY");

                entity.Property(e => e.CheckFixedcostvalCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_FIXEDCOSTVAL_COLLECTED");

                entity.Property(e => e.CheckFixedcostvalTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_FIXEDCOSTVAL_TOTAL");

                entity.Property(e => e.CheckPayedCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PAYED_COLLECTED");

                entity.Property(e => e.CheckPayedTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PAYED_TOTAL");

                entity.Property(e => e.CheckPenaltyCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PENALTY_COLLECTED");

                entity.Property(e => e.CheckPenaltyTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PENALTY_TOTAL");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.InstValue)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INST_VALUE");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.TransferFixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSFER_FIXEDCOSTVAL");

                entity.Property(e => e.TransferPayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSFER_PAYED");

                entity.Property(e => e.TransferPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSFER_PENALTY");
            });

            modelBuilder.Entity<InstPayments1OneRowDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_PAYMENTS1_ONE_ROW_DETAILS");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.CashFixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_FIXEDCOSTVAL");

                entity.Property(e => e.CashPayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_PAYED");

                entity.Property(e => e.CashPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_PENALTY");

                entity.Property(e => e.CheckFixedcostvalCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_FIXEDCOSTVAL_COLLECTED");

                entity.Property(e => e.CheckFixedcostvalTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_FIXEDCOSTVAL_TOTAL");

                entity.Property(e => e.CheckPayedCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PAYED_COLLECTED");

                entity.Property(e => e.CheckPayedTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PAYED_TOTAL");

                entity.Property(e => e.CheckPenaltyCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PENALTY_COLLECTED");

                entity.Property(e => e.CheckPenaltyTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PENALTY_TOTAL");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.InstValue)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INST_VALUE");

                entity.Property(e => e.InstalmentEname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENT_ENAME");

                entity.Property(e => e.InstalmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENT_NAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.SerialEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_ENAME");

                entity.Property(e => e.SerialName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_NAME");

                entity.Property(e => e.TransferFixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSFER_FIXEDCOSTVAL");

                entity.Property(e => e.TransferPayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSFER_PAYED");

                entity.Property(e => e.TransferPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSFER_PENALTY");
            });

            modelBuilder.Entity<InstPayments1OneRowMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_PAYMENTS1_ONE_ROW_MOD");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.CashFixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_FIXEDCOSTVAL");

                entity.Property(e => e.CashPayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_PAYED");

                entity.Property(e => e.CashPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_PENALTY");

                entity.Property(e => e.CheckFixedcostvalCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_FIXEDCOSTVAL_COLLECTED");

                entity.Property(e => e.CheckFixedcostvalTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_FIXEDCOSTVAL_TOTAL");

                entity.Property(e => e.CheckPayedCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PAYED_COLLECTED");

                entity.Property(e => e.CheckPayedTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PAYED_TOTAL");

                entity.Property(e => e.CheckPenaltyCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PENALTY_COLLECTED");

                entity.Property(e => e.CheckPenaltyTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_PENALTY_TOTAL");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.InstValue)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INST_VALUE");

                entity.Property(e => e.InstalmentEname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENT_ENAME");

                entity.Property(e => e.InstalmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENT_NAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.SerialEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_ENAME");

                entity.Property(e => e.SerialName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_NAME");

                entity.Property(e => e.TransferFixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSFER_FIXEDCOSTVAL");

                entity.Property(e => e.TransferPayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSFER_PAYED");

                entity.Property(e => e.TransferPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSFER_PENALTY");
            });

            modelBuilder.Entity<InstPayments1OneRowaddition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_PAYMENTS1_ONE_ROWADDITION");

                entity.Property(e => e.AddationFixedcostvalTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATION_FIXEDCOSTVAL_TOTAL");

                entity.Property(e => e.AddationcashFixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCASH_FIXEDCOSTVAL");

                entity.Property(e => e.AddationcashPayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCASH_PAYED");

                entity.Property(e => e.AddationcashPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCASH_PENALTY");

                entity.Property(e => e.AddationcheckPayedCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCHECK_PAYED_COLLECTED");

                entity.Property(e => e.AddationcheckPayedTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCHECK_PAYED_TOTAL");

                entity.Property(e => e.AddationcheckPenaltyTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCHECK_PENALTY_TOTAL");

                entity.Property(e => e.Addationcheckfixedvalcollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCHECKFIXEDVALCOLLECTED");

                entity.Property(e => e.Addationcheckpenaltycollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDATIONCHECKPENALTYCOLLECTED");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.InstValue)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INST_VALUE");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.UnitFixedcostvalTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_FIXEDCOSTVAL_TOTAL");

                entity.Property(e => e.UnitcashFixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCASH_FIXEDCOSTVAL");

                entity.Property(e => e.UnitcashPayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCASH_PAYED");

                entity.Property(e => e.UnitcashPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCASH_PENALTY");

                entity.Property(e => e.UnitcheckPayedCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCHECK_PAYED_COLLECTED");

                entity.Property(e => e.UnitcheckPayedTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCHECK_PAYED_TOTAL");

                entity.Property(e => e.UnitcheckPenaltyCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCHECK_PENALTY_COLLECTED");

                entity.Property(e => e.UnitcheckPenaltyTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCHECK_PENALTY_TOTAL");

                entity.Property(e => e.Unitcheckfixedcostvalcollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITCHECKFIXEDCOSTVALCOLLECTED");
            });

            modelBuilder.Entity<InstPayments2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_PAYMENTS2");
            });

            modelBuilder.Entity<InstSpecDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_SPEC_DETAILS");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Fixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL");

                entity.Property(e => e.FixedcostvalCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL_COLLECTED");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.InstValue)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INST_VALUE");

                entity.Property(e => e.InstalmentEname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENT_ENAME");

                entity.Property(e => e.InstalmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENT_NAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_COLLECTED");

                entity.Property(e => e.Paytype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAYTYPE");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.PenaltyCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY_COLLECTED");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.SerialEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_ENAME");

                entity.Property(e => e.SerialName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_NAME");
            });

            modelBuilder.Entity<InstSpecDetailsMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_SPEC_DETAILS_MOD");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Fixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL");

                entity.Property(e => e.FixedcostvalCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL_COLLECTED");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.InstValue)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INST_VALUE");

                entity.Property(e => e.InstalmentEname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENT_ENAME");

                entity.Property(e => e.InstalmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENT_NAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_COLLECTED");

                entity.Property(e => e.Paytype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAYTYPE");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.PenaltyCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY_COLLECTED");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.SerialEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_ENAME");

                entity.Property(e => e.SerialName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_NAME");
            });

            modelBuilder.Entity<InstStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_STATUS");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<InstStatus1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INST_STATUS1");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");
            });

            modelBuilder.Entity<InstTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INST_TEMP");

                entity.Property(e => e.Area)
                    .HasColumnType("NUMBER(16,5)")
                    .HasColumnName("AREA");

                entity.Property(e => e.BuidId)
                    .HasPrecision(16)
                    .HasColumnName("BUID_ID");

                entity.Property(e => e.Build)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BUILD");

                entity.Property(e => e.Garden)
                    .HasColumnType("NUMBER(16,5)")
                    .HasColumnName("GARDEN");

                entity.Property(e => e.Price)
                    .HasColumnType("NUMBER(16,5)")
                    .HasColumnName("PRICE");

                entity.Property(e => e.Roof)
                    .HasColumnType("NUMBER(16,5)")
                    .HasColumnName("ROOF");

                entity.Property(e => e.Unit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.UnitId)
                    .HasPrecision(16)
                    .HasColumnName("UNIT_ID");
            });

            modelBuilder.Entity<InstallmentHelp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTALLMENT_HELP");

                entity.Property(e => e.Activitytype)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYTYPE");

                entity.Property(e => e.Form)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORM");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Kind)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("KIND");
            });

            modelBuilder.Entity<Installmentitemsview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTALLMENTITEMSVIEW");

                entity.Property(e => e.AffectContract)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFFECT_CONTRACT");

                entity.Property(e => e.AffectEnd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFFECT_END");

                entity.Property(e => e.AffectOthers)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFFECT_OTHERS");

                entity.Property(e => e.AffectReserve)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFFECT_RESERVE");

                entity.Property(e => e.Attachvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHVALUE");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Featurevalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATUREVALUE");

                entity.Property(e => e.FromDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Instalmentrulesaname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTRULESANAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.ProfitRatio)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("PROFIT_RATIO");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2");

                entity.Property(e => e.Servicevalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICEVALUE");

                entity.Property(e => e.Status)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STATUS");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.ToDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TO_DATE");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2");
            });

            modelBuilder.Entity<Installmentsdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTALLMENTSDETAILS");

                entity.Property(e => e.Curraname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRANAME");

                entity.Property(e => e.Currename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENAME");

                entity.Property(e => e.Endtdate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENDTDATE");

                entity.Property(e => e.Instcount)
                    .HasPrecision(3)
                    .HasColumnName("INSTCOUNT");

                entity.Property(e => e.Insttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INSTTYPE");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Internalinterval)
                    .HasPrecision(5)
                    .HasColumnName("INTERNALINTERVAL");

                entity.Property(e => e.Internalintervaltype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("INTERNALINTERVALTYPE");

                entity.Property(e => e.IsContract)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_CONTRACT");

                entity.Property(e => e.IsEnd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_END");

                entity.Property(e => e.IsReserve)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_RESERVE");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.SerialEname)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_ENAME");

                entity.Property(e => e.SerialName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_NAME");

                entity.Property(e => e.Startdate)
                    .HasColumnType("DATE")
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Valueofbenefits)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUEOFBENEFITS");
            });

            modelBuilder.Entity<Instalmentpart>(entity =>
            {
                entity.ToTable("INSTALMENTPARTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Edescr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EDESCR");

                entity.Property(e => e.Expensess)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSESS")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.IsContract)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_CONTRACT")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.IsEnd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_END")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.IsReserve)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_RESERVE")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.Punish)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PUNISH")
                    .HasDefaultValueSql("'T'\n");

                entity.Property(e => e.Rank)
                    .HasPrecision(2)
                    .HasColumnName("RANK");

                entity.Property(e => e.SerialEname)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_ENAME");

                entity.Property(e => e.SerialName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SERIAL_NAME");
            });

            modelBuilder.Entity<Instalmentrule>(entity =>
            {
                entity.ToTable("INSTALMENTRULES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AffectContract)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFFECT_CONTRACT")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.AffectEnd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFFECT_END")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.AffectOthers)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFFECT_OTHERS")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.AffectReserve)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFFECT_RESERVE")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.ApplyTo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APPLY_TO");

                entity.Property(e => e.Businessid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BUSINESSID");

                entity.Property(e => e.Cancelvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CANCELVALUE");

                entity.Property(e => e.Cancelvalueafcontract)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CANCELVALUEAFCONTRACT");

                entity.Property(e => e.Cancelvalueorratio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CANCELVALUEORRATIO");

                entity.Property(e => e.Cancelvalueorratioafcontract)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CANCELVALUEORRATIOAFCONTRACT");

                entity.Property(e => e.DefaultYears)
                    .HasPrecision(2)
                    .HasColumnName("DEFAULT_YEARS");

                entity.Property(e => e.Earlypayment)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYPAYMENT");

                entity.Property(e => e.FromDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Instalmentrulesaname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTRULESANAME");

                entity.Property(e => e.Instalmentrulescode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTRULESCODE");

                entity.Property(e => e.Instalmentrulesename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTRULESENAME");

                entity.Property(e => e.MaxYears)
                    .HasPrecision(2)
                    .HasColumnName("MAX_YEARS");

                entity.Property(e => e.MinRatioContrcact)
                    .HasColumnType("NUMBER(5,3)")
                    .HasColumnName("MIN_RATIO_CONTRCACT");

                entity.Property(e => e.MinRatioEnd)
                    .HasColumnType("NUMBER(5,3)")
                    .HasColumnName("MIN_RATIO_END");

                entity.Property(e => e.MinRatioReserve)
                    .HasColumnType("NUMBER(5,3)")
                    .HasColumnName("MIN_RATIO_RESERVE");

                entity.Property(e => e.ProfitRatio)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("PROFIT_RATIO");

                entity.Property(e => e.ToDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TO_DATE");

                entity.Property(e => e.Waivervalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("WAIVERVALUE");

                entity.Property(e => e.Waivervalueafcontract)
                    .HasColumnType("NUMBER")
                    .HasColumnName("WAIVERVALUEAFCONTRACT");

                entity.Property(e => e.Waivervalueorratio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WAIVERVALUEORRATIO");

                entity.Property(e => e.Waivervalueorratioafcontract)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WAIVERVALUEORRATIOAFCONTRACT");
            });

            modelBuilder.Entity<InstalmentsM>(entity =>
            {
                entity.ToTable("INSTALMENTS_M");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Externalbegintype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNALBEGINTYPE");

                entity.Property(e => e.Externalinterval)
                    .HasPrecision(5)
                    .HasColumnName("EXTERNALINTERVAL");

                entity.Property(e => e.Externalintervaltype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNALINTERVALTYPE");

                entity.Property(e => e.Instalmentpartid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTPARTID");

                entity.Property(e => e.Instcount)
                    .HasPrecision(3)
                    .HasColumnName("INSTCOUNT");

                entity.Property(e => e.Instpercent)
                    .HasColumnType("NUMBER(15,5)")
                    .HasColumnName("INSTPERCENT");

                entity.Property(e => e.Instprogramid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMID");

                entity.Property(e => e.Internalinterval)
                    .HasPrecision(5)
                    .HasColumnName("INTERNALINTERVAL");

                entity.Property(e => e.Internalintervaltype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("INTERNALINTERVALTYPE");

                entity.Property(e => e.Rank)
                    .HasPrecision(4)
                    .HasColumnName("RANK");

                entity.HasOne(d => d.Instalmentpart)
                    .WithMany(p => p.InstalmentsMs)
                    .HasForeignKey(d => d.Instalmentpartid)
                    .HasConstraintName("INSTALMENTS_M_FK1");

                entity.HasOne(d => d.Instprogram)
                    .WithMany(p => p.InstalmentsMs)
                    .HasForeignKey(d => d.Instprogramid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTALMENTS_M_FK2");
            });

            modelBuilder.Entity<InstalmentsNotFullyPaid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTALMENTS_NOT_FULLY_PAID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Ff)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FF");

                entity.Property(e => e.Instalmentownerid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTOWNERID");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.TotalPaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_PAID");

                entity.Property(e => e.Year)
                    .HasColumnType("NUMBER")
                    .HasColumnName("YEAR_");
            });

            modelBuilder.Entity<InstalmentsNotpaidformfinance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTALMENTS_NOTPAIDFORMFINANCE");

                entity.Property(e => e.Cfval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CFVAL");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Year)
                    .HasColumnType("NUMBER")
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<InstappSetup>(entity =>
            {
                entity.ToTable("INSTAPP_SETUP");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<Instcalcmethod>(entity =>
            {
                entity.ToTable("INSTCALCMETHOD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Institem>(entity =>
            {
                entity.ToTable("INSTITEM");

                entity.HasIndex(e => e.Compositeid, "COMPOSITEID_INDX");

                entity.HasIndex(e => e.Layout, "LAYOUT");

                entity.HasIndex(e => e.Mandatorycode, "MANDATORYCODE_INDX");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Address)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Attachmentsvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ATTACHMENTSVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ATTACHMENTSVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Buydate)
                    .HasColumnType("DATE")
                    .HasColumnName("BUYDATE");

                entity.Property(e => e.Buyer)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BUYER");

                entity.Property(e => e.Buyermethod)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BUYERMETHOD");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("NULL");

                entity.Property(e => e.Creationdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATIONDATE")
                    .HasDefaultValueSql("sysdate");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Featuresvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FEATURESVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FEATURESVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.HandoverDateActualDate)
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HANDOVER_DATE_ACTUAL_DATE");

                entity.Property(e => e.HandoverDateExpectedDate)
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HANDOVER_DATE_EXPECTED_DATE");

                entity.Property(e => e.HandoverDateInDate)
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HANDOVER_DATE_IN_DATE");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INSTITEMVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Latitude)
                    .HasColumnType("NUMBER(20,6)")
                    .HasColumnName("LATITUDE");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Longitude)
                    .HasColumnType("NUMBER(20,6)")
                    .HasColumnName("LONGITUDE");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MANDATORYCODE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Mandatoryid)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MANDATORYID");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Owner)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNER");

                entity.Property(e => e.Paymethod)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYMETHOD");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Rentval)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RENTVAL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Rentvalperiod)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RENTVALPERIOD")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Servicesvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SERVICESVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SERVICESVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TOTALVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(25,7)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(25,7)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(25,2)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.BuyerNavigation)
                    .WithMany(p => p.InstitemBuyerNavigations)
                    .HasForeignKey(d => d.Buyer)
                    .HasConstraintName("INSTITEM_R06");

                entity.HasOne(d => d.BuyermethodNavigation)
                    .WithMany(p => p.InstitemBuyermethodNavigations)
                    .HasForeignKey(d => d.Buyermethod)
                    .HasConstraintName("INSTITEM_R08");

                entity.HasOne(d => d.Composite)
                    .WithMany(p => p.Institems)
                    .HasForeignKey(d => d.Compositeid)
                    .HasConstraintName("INSTITEM_R02");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Institems)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("FK_CURRENCY");

                entity.HasOne(d => d.InstitemMainTypes)
                    .WithMany(p => p.Institems)
                    .HasForeignKey(d => d.InstitemMainTypesId)
                    .HasConstraintName("INSTITEM_R01");

                entity.HasOne(d => d.Mandatory)
                    .WithMany(p => p.Institems)
                    .HasForeignKey(d => d.Mandatoryid)
                    .HasConstraintName("INSTITEM_FK4");

                entity.HasOne(d => d.OwnerNavigation)
                    .WithMany(p => p.InstitemOwnerNavigations)
                    .HasForeignKey(d => d.Owner)
                    .HasConstraintName("INSTITEM_R05");

                entity.HasOne(d => d.PaymethodNavigation)
                    .WithMany(p => p.InstitemPaymethodNavigations)
                    .HasForeignKey(d => d.Paymethod)
                    .HasConstraintName("INSTITEM_R07");
            });

            modelBuilder.Entity<Institem4crm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEM_4CRM");

                entity.Property(e => e.CompanyCode)
                    .HasMaxLength(50)
                    .HasColumnName("COMPANY_CODE");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(100)
                    .HasColumnName("COMPANY_NAME");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Layout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.PartCode1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE1");

                entity.Property(e => e.PartCode2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE2");

                entity.Property(e => e.PartCodeName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME1");

                entity.Property(e => e.PartCodeName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME2");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.RegIdFromcrm)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REG_ID_FROMCRM");

                entity.Property(e => e.SchemaName)
                    .HasMaxLength(100)
                    .HasColumnName("SCHEMA_NAME");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE1");
            });

            modelBuilder.Entity<Institem4crmReserved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEM_4CRM_RESERVED");
            });

            modelBuilder.Entity<InstitemAllDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEM_ALL_DAYS");

                entity.Property(e => e.Attachmentsvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTSVALUE1");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTSVALUE2");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Featuresvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATURESVALUE1");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATURESVALUE2");

                entity.Property(e => e.HandoverDateActualDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_ACTUAL_DATE");

                entity.Property(e => e.HandoverDateExpectedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_EXPECTED_DATE");

                entity.Property(e => e.HandoverDateInDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_IN_DATE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.Mandatoryid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORYID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3");

                entity.Property(e => e.Rentval)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("RENTVAL");

                entity.Property(e => e.Rentvalperiod)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RENTVALPERIOD");

                entity.Property(e => e.Servicesvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE1");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE2");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL1");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL2");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("UNITVAL3");
            });

            modelBuilder.Entity<InstitemHelp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEM_HELP");

                entity.Property(e => e.Acurrency)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ACURRENCY");

                entity.Property(e => e.ApartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME1");

                entity.Property(e => e.ApartName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME10");

                entity.Property(e => e.ApartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME2");

                entity.Property(e => e.ApartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME3");

                entity.Property(e => e.ApartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME4");

                entity.Property(e => e.ApartName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME5");

                entity.Property(e => e.ApartName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME6");

                entity.Property(e => e.ApartName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME7");

                entity.Property(e => e.ApartName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME8");

                entity.Property(e => e.ApartName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME9");

                entity.Property(e => e.BusinesstypeId)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("BUSINESSTYPE_ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Ecurrency)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ECURRENCY");

                entity.Property(e => e.EpartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME1");

                entity.Property(e => e.EpartName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME10");

                entity.Property(e => e.EpartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME2");

                entity.Property(e => e.EpartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME3");

                entity.Property(e => e.EpartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME4");

                entity.Property(e => e.EpartName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME5");

                entity.Property(e => e.EpartName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME6");

                entity.Property(e => e.EpartName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME7");

                entity.Property(e => e.EpartName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME8");

                entity.Property(e => e.EpartName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME9");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.MaxClevel)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_CLEVEL");

                entity.Property(e => e.PartCode1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE1");

                entity.Property(e => e.PartCode10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE10");

                entity.Property(e => e.PartCode2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE2");

                entity.Property(e => e.PartCode3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE3");

                entity.Property(e => e.PartCode4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE4");

                entity.Property(e => e.PartCode5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE5");

                entity.Property(e => e.PartCode6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE6");

                entity.Property(e => e.PartCode7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE7");

                entity.Property(e => e.PartCode8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE8");

                entity.Property(e => e.PartCode9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE9");

                entity.Property(e => e.PartCodeEname1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME1");

                entity.Property(e => e.PartCodeEname10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME10");

                entity.Property(e => e.PartCodeEname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME2");

                entity.Property(e => e.PartCodeEname3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME3");

                entity.Property(e => e.PartCodeEname4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME4");

                entity.Property(e => e.PartCodeEname5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME5");

                entity.Property(e => e.PartCodeEname6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME6");

                entity.Property(e => e.PartCodeEname7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME7");

                entity.Property(e => e.PartCodeEname8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME8");

                entity.Property(e => e.PartCodeEname9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME9");

                entity.Property(e => e.PartCodeName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME1");

                entity.Property(e => e.PartCodeName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME10");

                entity.Property(e => e.PartCodeName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME2");

                entity.Property(e => e.PartCodeName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME3");

                entity.Property(e => e.PartCodeName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME4");

                entity.Property(e => e.PartCodeName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME5");

                entity.Property(e => e.PartCodeName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME6");

                entity.Property(e => e.PartCodeName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME7");

                entity.Property(e => e.PartCodeName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME8");

                entity.Property(e => e.PartCodeName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME9");
            });

            modelBuilder.Entity<InstitemHelp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEM_HELP1");

                entity.Property(e => e.Acurrency)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ACURRENCY");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.Attachmentsvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTSVALUE1");

                entity.Property(e => e.BusinesstypeId)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("BUSINESSTYPE_ID");

                entity.Property(e => e.Clevel)
                    .HasPrecision(3)
                    .HasColumnName("CLEVEL");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Ecurrency)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ECURRENCY");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.Featuresvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATURESVALUE1");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.MaxClevel)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_CLEVEL");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartCodeEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME");

                entity.Property(e => e.PartCodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME");

                entity.Property(e => e.PartId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PART_ID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2");

                entity.Property(e => e.Servicesvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE1");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL1");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL2");
            });

            modelBuilder.Entity<InstitemHelpmod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEM_HELPMOD");

                entity.Property(e => e.Acurrency)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ACURRENCY");

                entity.Property(e => e.ApartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME1");

                entity.Property(e => e.ApartName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME10");

                entity.Property(e => e.ApartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME2");

                entity.Property(e => e.ApartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME3");

                entity.Property(e => e.ApartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME4");

                entity.Property(e => e.ApartName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME5");

                entity.Property(e => e.ApartName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME6");

                entity.Property(e => e.ApartName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME7");

                entity.Property(e => e.ApartName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME8");

                entity.Property(e => e.ApartName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME9");

                entity.Property(e => e.BusinesstypeId)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("BUSINESSTYPE_ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Ecurrency)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ECURRENCY");

                entity.Property(e => e.Ename)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.EpartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME1");

                entity.Property(e => e.EpartName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME10");

                entity.Property(e => e.EpartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME2");

                entity.Property(e => e.EpartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME3");

                entity.Property(e => e.EpartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME4");

                entity.Property(e => e.EpartName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME5");

                entity.Property(e => e.EpartName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME6");

                entity.Property(e => e.EpartName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME7");

                entity.Property(e => e.EpartName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME8");

                entity.Property(e => e.EpartName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME9");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.MaxClevel)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_CLEVEL");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.PartCode1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE1");

                entity.Property(e => e.PartCode10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE10");

                entity.Property(e => e.PartCode2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE2");

                entity.Property(e => e.PartCode3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE3");

                entity.Property(e => e.PartCode4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE4");

                entity.Property(e => e.PartCode5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE5");

                entity.Property(e => e.PartCode6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE6");

                entity.Property(e => e.PartCode7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE7");

                entity.Property(e => e.PartCode8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE8");

                entity.Property(e => e.PartCode9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE9");

                entity.Property(e => e.PartCodeEname1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME1");

                entity.Property(e => e.PartCodeEname10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME10");

                entity.Property(e => e.PartCodeEname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME2");

                entity.Property(e => e.PartCodeEname3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME3");

                entity.Property(e => e.PartCodeEname4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME4");

                entity.Property(e => e.PartCodeEname5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME5");

                entity.Property(e => e.PartCodeEname6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME6");

                entity.Property(e => e.PartCodeEname7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME7");

                entity.Property(e => e.PartCodeEname8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME8");

                entity.Property(e => e.PartCodeEname9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME9");

                entity.Property(e => e.PartCodeName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME1");

                entity.Property(e => e.PartCodeName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME10");

                entity.Property(e => e.PartCodeName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME2");

                entity.Property(e => e.PartCodeName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME3");

                entity.Property(e => e.PartCodeName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME4");

                entity.Property(e => e.PartCodeName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME5");

                entity.Property(e => e.PartCodeName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME6");

                entity.Property(e => e.PartCodeName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME7");

                entity.Property(e => e.PartCodeName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME8");

                entity.Property(e => e.PartCodeName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME9");
            });

            modelBuilder.Entity<InstitemHelpmod1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEM_HELPMOD1");

                entity.Property(e => e.Acurrency)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ACURRENCY");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.Attachmentsvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTSVALUE1");

                entity.Property(e => e.BusinesstypeId)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("BUSINESSTYPE_ID");

                entity.Property(e => e.Clevel)
                    .HasPrecision(3)
                    .HasColumnName("CLEVEL");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Ecurrency)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ECURRENCY");

                entity.Property(e => e.Ename)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.Featuresvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATURESVALUE1");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.MaxClevel)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_CLEVEL");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartCodeEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME");

                entity.Property(e => e.PartCodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME");

                entity.Property(e => e.PartId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PART_ID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2");

                entity.Property(e => e.Servicesvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE1");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL1");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL2");
            });

            modelBuilder.Entity<InstitemSaView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEM_SA_VIEW");
            });

            modelBuilder.Entity<InstitemSaView2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEM_SA_VIEW2");
            });

            modelBuilder.Entity<Institemattachmentsview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEMATTACHMENTSVIEW");

                entity.Property(e => e.Attachid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHID");

                entity.Property(e => e.Attachquantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHQUANTITY1");

                entity.Property(e => e.Attename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ATTENAME");

                entity.Property(e => e.Attname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ATTNAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Eownercompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EOWNERCOMPANY");

                entity.Property(e => e.Feautersvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEAUTERSVALUE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.InstprogramsId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Ownercompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Searvicevalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SEARVICEVALUE");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2");

                entity.Property(e => e.Ttachunitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TTACHUNITVAL1");
            });

            modelBuilder.Entity<Institemattatchment>(entity =>
            {
                entity.ToTable("INSTITEMATTATCHMENTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttatchmentId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ATTATCHMENT_ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Feautersvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FEAUTERSVALUE")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.InstprogramsId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Servicesvalue)
                    .HasColumnType("NUMBER(10,2)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SERVICESVALUE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPERATEINSTALMENTS")
                    .HasDefaultValueSql("'2'\n");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TOTALVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Attatchment)
                    .WithMany(p => p.Institemattatchments)
                    .HasForeignKey(d => d.AttatchmentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMATTATCHMENTS_R02");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Institemattatchments)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("INSTITEMATTATCHMENTS_R01");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Institemattatchments)
                    .HasForeignKey(d => d.InstitemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMATTATCHMENTS_R05");
            });

            modelBuilder.Entity<Institemattatchmentfeature>(entity =>
            {
                entity.ToTable("INSTITEMATTATCHMENTFEATURES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttatchmentId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ATTATCHMENT_ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.FeatureId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FEATURE_ID");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Valueorratio1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VALUEORRATIO1");

                entity.Property(e => e.Valueorratio2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VALUEORRATIO2");

                entity.Property(e => e.Valueorratio3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VALUEORRATIO3");

                entity.HasOne(d => d.Attatchment)
                    .WithMany(p => p.Institemattatchmentfeatures)
                    .HasForeignKey(d => d.AttatchmentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMATTATCHMENTFEATURESR02");

                entity.HasOne(d => d.Feature)
                    .WithMany(p => p.Institemattatchmentfeatures)
                    .HasForeignKey(d => d.FeatureId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMATTATCHMENTFEATURESR03");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Institemattatchmentfeatures)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("INSTITEMATATCHMENTFEATURES_R01");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Institemattatchmentfeatures)
                    .HasForeignKey(d => d.InstitemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMATTATCHMENTFEATURESR05");
            });

            modelBuilder.Entity<Institemattatchmentfeaturesu>(entity =>
            {
                entity.ToTable("INSTITEMATTATCHMENTFEATURESU");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttatchmentId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTATCHMENT_ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.FeatureId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURE_ID");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Updatedate)
                    .HasColumnType("DATE")
                    .HasColumnName("UPDATEDATE")
                    .HasDefaultValueSql("sysdate");

                entity.Property(e => e.Valueorratio1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO1");

                entity.Property(e => e.Valueorratio2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO2");

                entity.Property(e => e.Valueorratio3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO3");

                entity.HasOne(d => d.Feature)
                    .WithMany(p => p.Institemattatchmentfeaturesus)
                    .HasForeignKey(d => d.FeatureId)
                    .HasConstraintName("INSTITEMATTATCHMENTFEATURE_R03");
            });

            modelBuilder.Entity<Institemattatchmentservice>(entity =>
            {
                entity.ToTable("INSTITEMATTATCHMENTSERVICES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttatchmentId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ATTATCHMENT_ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ServiceId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SERVICE_ID");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Valueorratio1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VALUEORRATIO1");

                entity.Property(e => e.Valueorratio2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VALUEORRATIO2");

                entity.Property(e => e.Valueorratio3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VALUEORRATIO3");

                entity.HasOne(d => d.Attatchment)
                    .WithMany(p => p.Institemattatchmentservices)
                    .HasForeignKey(d => d.AttatchmentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMATTATCHFSERVR02");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Institemattatchmentservices)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("INSTITEMATATCHMENTSERVICES_R01");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Institemattatchmentservices)
                    .HasForeignKey(d => d.InstitemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMATTATCHSERVR05");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Institemattatchmentservices)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMATTATCHSERVR03");
            });

            modelBuilder.Entity<Institemattatchmentservicesu>(entity =>
            {
                entity.ToTable("INSTITEMATTATCHMENTSERVICESU");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttatchmentId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTATCHMENT_ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ServiceId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICE_ID");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Updatedate)
                    .HasColumnType("DATE")
                    .HasColumnName("UPDATEDATE")
                    .HasDefaultValueSql("sysdate");

                entity.Property(e => e.Valueorratio1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO1");

                entity.Property(e => e.Valueorratio2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO2");

                entity.Property(e => e.Valueorratio3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO3");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Institemattatchmentservicesus)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("INSTITEMATATCMENTSERVICESU_R01");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Institemattatchmentservicesus)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("INSTITEMATTATCHMENTSERVICE_R01");
            });

            modelBuilder.Entity<Institemattatchmentsu>(entity =>
            {
                entity.ToTable("INSTITEMATTATCHMENTSU");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttatchmentId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTATCHMENT_ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Feautersvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEAUTERSVALUE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.InstprogramsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Servicesvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS")
                    .HasDefaultValueSql("'2'");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Updatedate)
                    .HasColumnType("DATE")
                    .HasColumnName("UPDATEDATE")
                    .HasDefaultValueSql("sysdate");

                entity.HasOne(d => d.Attatchment)
                    .WithMany(p => p.Institemattatchmentsus)
                    .HasForeignKey(d => d.AttatchmentId)
                    .HasConstraintName("INSTITEMATTATCHMENTSU_R02");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Institemattatchmentsus)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("INSTITEMATTATCHMENTSU_R01");
            });

            modelBuilder.Entity<Institemcheck>(entity =>
            {
                entity.ToTable("INSTITEMCHECKS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Installmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALLMENTID");

                entity.Property(e => e.Paytype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PAYTYPE");

                entity.Property(e => e.Transid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSID");

                entity.HasOne(d => d.Installment)
                    .WithMany(p => p.Institemchecks)
                    .HasForeignKey(d => d.Installmentid)
                    .HasConstraintName("SYS_C0019866");
            });

            modelBuilder.Entity<Institemcomp>(entity =>
            {
                entity.ToTable("INSTITEMCOMP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Dimensiondetailsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONDETAILSID");

                entity.Property(e => e.Electcounter)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ELECTCOUNTER");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Totalamount)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("TOTALAMOUNT");

                entity.Property(e => e.Uintsize)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("UINTSIZE");

                entity.Property(e => e.Unitfloor)
                    .HasPrecision(15)
                    .HasColumnName("UNITFLOOR");

                entity.Property(e => e.Unitmaxamount)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("UNITMAXAMOUNT");

                entity.Property(e => e.Unitminamount)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("UNITMINAMOUNT");

                entity.Property(e => e.Unitno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UNITNO");

                entity.Property(e => e.Unitrooms)
                    .HasPrecision(15)
                    .HasColumnName("UNITROOMS");

                entity.Property(e => e.Unitscount)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UNITSCOUNT");

                entity.Property(e => e.Watcounter)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("WATCOUNTER");

                entity.HasOne(d => d.Dimensiondetails)
                    .WithMany(p => p.Institemcomps)
                    .HasForeignKey(d => d.Dimensiondetailsid)
                    .HasConstraintName("INSTITEMCOMP_R02");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Institemcomps)
                    .HasForeignKey(d => d.Institemid)
                    .HasConstraintName("INSTITEMCOMP_R01");
            });

            modelBuilder.Entity<Institemcompdetail>(entity =>
            {
                entity.ToTable("INSTITEMCOMPDETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Institemcompid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMCOMPID");

                entity.Property(e => e.Rentformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTFORMID");

                entity.Property(e => e.Rentformrenewid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTFORMRENEWID");

                entity.Property(e => e.Rooms)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ROOMS");

                entity.Property(e => e.Unitcount)
                    .HasPrecision(15)
                    .HasColumnName("UNITCOUNT");

                entity.Property(e => e.Unitrentamount)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("UNITRENTAMOUNT");

                entity.HasOne(d => d.Institemcomp)
                    .WithMany(p => p.Institemcompdetails)
                    .HasForeignKey(d => d.Institemcompid)
                    .HasConstraintName("INSTITEMCOMPDETAILS_R02");

                entity.HasOne(d => d.Rentform)
                    .WithMany(p => p.Institemcompdetails)
                    .HasForeignKey(d => d.Rentformid)
                    .HasConstraintName("INSTITEMCOMPDETAILS_R01");

                entity.HasOne(d => d.Rentformrenew)
                    .WithMany(p => p.Institemcompdetails)
                    .HasForeignKey(d => d.Rentformrenewid)
                    .HasConstraintName("INSTITEMCOMPDETAILS_R03");
            });

            modelBuilder.Entity<Institemcompinstpay>(entity =>
            {
                entity.ToTable("INSTITEMCOMPINSTPAY");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Installmentcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INSTALLMENTCODE");

                entity.Property(e => e.Installmentdate)
                    .HasColumnType("DATE")
                    .HasColumnName("INSTALLMENTDATE");

                entity.Property(e => e.Installmenttypeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALLMENTTYPEID");

                entity.Property(e => e.Installmentvalue)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("INSTALLMENTVALUE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.HasOne(d => d.Installmenttype)
                    .WithMany(p => p.Institemcompinstpays)
                    .HasForeignKey(d => d.Installmenttypeid)
                    .HasConstraintName("INSTITEMCOMPINSTPAY_R02");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Institemcompinstpays)
                    .HasForeignKey(d => d.Institemid)
                    .HasConstraintName("SYS_C0019855");
            });

            modelBuilder.Entity<Institemdetailsview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEMDETAILSVIEW");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Rentval)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("RENTVAL");

                entity.Property(e => e.Rentvalperiod)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RENTVALPERIOD");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2");
            });

            modelBuilder.Entity<Institemdocattachment>(entity =>
            {
                entity.ToTable("INSTITEMDOCATTACHMENTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Docattachmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOCATTACHMENTID");

                entity.Property(e => e.Docname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNAME");

                entity.Property(e => e.Docuniquename)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DOCUNIQUENAME");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.HasOne(d => d.Docattachment)
                    .WithMany(p => p.Institemdocattachments)
                    .HasForeignKey(d => d.Docattachmentid)
                    .HasConstraintName("INSTITEMDOCATTACHMENTS_R02");
            });

            modelBuilder.Entity<Institemfeature>(entity =>
            {
                entity.ToTable("INSTITEMFEATURES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.FeatureId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FEATURE_ID");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.InstprogramsId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPERATEINSTALMENTS")
                    .HasDefaultValueSql("'2'\n");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Feature)
                    .WithMany(p => p.Institemfeatures)
                    .HasForeignKey(d => d.FeatureId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMFEATURES_R02");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Institemfeatures)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("INSTITEMFEATURES_R01");
            });

            modelBuilder.Entity<Institemfeaturesu>(entity =>
            {
                entity.ToTable("INSTITEMFEATURESU");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.FeatureId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURE_ID");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.InstprogramsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS")
                    .HasDefaultValueSql("'2'");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Updatedate)
                    .HasColumnType("DATE")
                    .HasColumnName("UPDATEDATE")
                    .HasDefaultValueSql("sysdate");

                entity.HasOne(d => d.Feature)
                    .WithMany(p => p.Institemfeaturesus)
                    .HasForeignKey(d => d.FeatureId)
                    .HasConstraintName("INSTITEMFEATURESU_R01");
            });

            modelBuilder.Entity<Institemfeatureview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEMFEATUREVIEW");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Eownercompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EOWNERCOMPANY");

                entity.Property(e => e.Featureename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FEATUREENAME");

                entity.Property(e => e.Featureid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATUREID");

                entity.Property(e => e.Featurename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FEATURENAME");

                entity.Property(e => e.Featurequantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATUREQUANTITY1");

                entity.Property(e => e.Featureunitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATUREUNITVAL1");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.Instprogname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTPROGNAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Ownercompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1");
            });

            modelBuilder.Entity<Institemhelpview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEMHELPVIEW");

                entity.Property(e => e.Attachvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHVALUE");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Featurevalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATUREVALUE");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.MaxClevel)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_CLEVEL");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2");

                entity.Property(e => e.Servicevalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICEVALUE");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL1");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL2");
            });

            modelBuilder.Entity<Institemmaintype>(entity =>
            {
                entity.ToTable("INSTITEMMAINTYPES");

                entity.HasIndex(e => e.BusinesstypeId, "BUSINESSTYPE_ID_INDX");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.BusinesstypeId)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("BUSINESSTYPE_ID");

                entity.Property(e => e.Calcpricebymeter)
                    .HasPrecision(1)
                    .HasColumnName("CALCPRICEBYMETER");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Institem1ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM1ENAME");

                entity.Property(e => e.Institem1name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM1NAME");

                entity.Property(e => e.Institem2ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM2ENAME");

                entity.Property(e => e.Institem2name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM2NAME");

                entity.Property(e => e.Institem3ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM3ENAME");

                entity.Property(e => e.Institem3name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM3NAME");

                entity.Property(e => e.Mayrent)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MAYRENT");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.OriginalId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORIGINAL_ID");

                entity.Property(e => e.UseInstitem1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM1");

                entity.Property(e => e.UseInstitem1q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM1Q");

                entity.Property(e => e.UseInstitem2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM2");

                entity.Property(e => e.UseInstitem2q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM2Q");

                entity.Property(e => e.UseInstitem3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM3");

                entity.Property(e => e.UseInstitem3q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM3Q");

                entity.HasOne(d => d.Businesstype)
                    .WithMany(p => p.Institemmaintypes)
                    .HasForeignKey(d => d.BusinesstypeId)
                    .HasConstraintName("INSTITEMMAINTYPES_R01");
            });

            modelBuilder.Entity<Institemmaintypeattachment>(entity =>
            {
                entity.ToTable("INSTITEMMAINTYPEATTACHMENTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttachmentTypeId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENT_TYPE_ID");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.HasOne(d => d.AttachmentType)
                    .WithMany(p => p.Institemmaintypeattachments)
                    .HasForeignKey(d => d.AttachmentTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMMAINTYPEATTACHMENTSR02");

                entity.HasOne(d => d.InstitemMainTypes)
                    .WithMany(p => p.Institemmaintypeattachments)
                    .HasForeignKey(d => d.InstitemMainTypesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMMAINTYPEATTACHMENTSR01");
            });

            modelBuilder.Entity<Institemmaintypefeature>(entity =>
            {
                entity.ToTable("INSTITEMMAINTYPEFEATURES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.FeatureTypeId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURE_TYPE_ID");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.HasOne(d => d.FeatureType)
                    .WithMany(p => p.Institemmaintypefeatures)
                    .HasForeignKey(d => d.FeatureTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMMAINTYPEFEATURES_R02");

                entity.HasOne(d => d.InstitemMainTypes)
                    .WithMany(p => p.Institemmaintypefeatures)
                    .HasForeignKey(d => d.InstitemMainTypesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMMAINTYPEFEATURES_R01");
            });

            modelBuilder.Entity<Institemmaintypeservice>(entity =>
            {
                entity.ToTable("INSTITEMMAINTYPESERVICES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICE_TYPE_ID");

                entity.HasOne(d => d.InstitemMainTypes)
                    .WithMany(p => p.Institemmaintypeservices)
                    .HasForeignKey(d => d.InstitemMainTypesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMMAINTYPESERVICES_R01");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.Institemmaintypeservices)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMMAINTYPESERVICES_R02");
            });

            modelBuilder.Entity<Institemmaintypesproperty>(entity =>
            {
                entity.ToTable("INSTITEMMAINTYPESPROPERTIES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Datasize)
                    .HasColumnType("NUMBER(6,2)")
                    .HasColumnName("DATASIZE");

                entity.Property(e => e.Datavalidationtype)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("DATAVALIDATIONTYPE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Subtypeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUBTYPEID");

                entity.HasOne(d => d.InstitemMainTypes)
                    .WithMany(p => p.Institemmaintypesproperties)
                    .HasForeignKey(d => d.InstitemMainTypesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMMAINTYPESPROPERTIESR01");

                entity.HasOne(d => d.Subtype)
                    .WithMany(p => p.Institemmaintypesproperties)
                    .HasForeignKey(d => d.Subtypeid)
                    .HasConstraintName("INSTITEMMAINTYPESPROPERTIESR02");
            });

            modelBuilder.Entity<Institemproperty>(entity =>
            {
                entity.ToTable("INSTITEMPROPERTIES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Allsubid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLSUBID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Data)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DATA");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.Layoutcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUTCODE");

                entity.Property(e => e.ProertyId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PROERTY_ID");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Institemproperties)
                    .HasForeignKey(d => d.InstitemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMPROPERTIES_R05");

                entity.HasOne(d => d.Proerty)
                    .WithMany(p => p.Institemproperties)
                    .HasForeignKey(d => d.ProertyId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMPROPERTIES_R02");
            });

            modelBuilder.Entity<Institempropertyview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEMPROPERTYVIEW");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Data)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DATA");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Propid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PROPID");
            });

            modelBuilder.Entity<Institemservice>(entity =>
            {
                entity.ToTable("INSTITEMSERVICES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.InstprogramsId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ServiceId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SERVICE_ID");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPERATEINSTALMENTS")
                    .HasDefaultValueSql("'2'\n");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Institemservices)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("INSTITEMSERVICES_R01");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Institemservices)
                    .HasForeignKey(d => d.InstitemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMSERVICES_R05");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Institemservices)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMSERVICES_R02");
            });

            modelBuilder.Entity<Institemservicesu>(entity =>
            {
                entity.ToTable("INSTITEMSERVICESU");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.InstprogramsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ServiceId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICE_ID");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS")
                    .HasDefaultValueSql("'2'");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Updatedate)
                    .HasColumnType("DATE")
                    .HasColumnName("UPDATEDATE")
                    .HasDefaultValueSql("sysdate");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Institemservicesus)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("INSTITEMSERVICESU_R01");
            });

            modelBuilder.Entity<Institemserviceview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEMSERVICEVIEW");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Eownercompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EOWNERCOMPANY");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Instprogname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTPROGNAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Ownercompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Serviceid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICEID");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");
            });

            modelBuilder.Entity<Institemsinstalmentrule>(entity =>
            {
                entity.ToTable("INSTITEMSINSTALMENTRULES");

                entity.HasIndex(e => e.Instalmentrulesid, "INSTALMENTRULESID_INDX");

                entity.HasIndex(e => e.Institemid, "INSTID_INDX");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Instalmentrulesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTRULESID");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.ToDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TO_DATE");

                entity.HasOne(d => d.Instalmentrules)
                    .WithMany(p => p.Institemsinstalmentrules)
                    .HasForeignKey(d => d.Instalmentrulesid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMSINSTALMENTRULES_FK1");
            });

            modelBuilder.Entity<Institemspenaltyrule>(entity =>
            {
                entity.ToTable("INSTITEMSPENALTYRULES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.FromDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Penaltyrulesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYRULESID");

                entity.Property(e => e.ToDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TO_DATE");

                entity.HasOne(d => d.Penaltyrules)
                    .WithMany(p => p.Institemspenaltyrules)
                    .HasForeignKey(d => d.Penaltyrulesid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INSTITEMSPENALTYRULES_FK1");
            });

            modelBuilder.Entity<Institemstype>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEMSTYPES");
            });

            modelBuilder.Entity<Institemu>(entity =>
            {
                entity.ToTable("INSTITEMU");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Attachmentsvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTSVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTSVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Featuresvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATURESVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATURESVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.HandoverDateActualDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_ACTUAL_DATE");

                entity.Property(e => e.HandoverDateExpectedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_EXPECTED_DATE");

                entity.Property(e => e.HandoverDateInDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_IN_DATE");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Mandatoryid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORYID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Rentval)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("RENTVAL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Rentvalperiod)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RENTVALPERIOD")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Servicesvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Updatedate)
                    .HasColumnType("DATE")
                    .HasColumnName("UPDATEDATE")
                    .HasDefaultValueSql("sysdate");

                entity.HasOne(d => d.InstitemMainTypes)
                    .WithMany(p => p.Institemus)
                    .HasForeignKey(d => d.InstitemMainTypesId)
                    .HasConstraintName("INSTITEMU_R01");
            });

            modelBuilder.Entity<Institemview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEMVIEW");

                entity.Property(e => e.Activitytype)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYTYPE");

                entity.Property(e => e.Activitytypeen)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYTYPEEN");

                entity.Property(e => e.ApartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME1");

                entity.Property(e => e.ApartName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME10");

                entity.Property(e => e.ApartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME2");

                entity.Property(e => e.ApartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME3");

                entity.Property(e => e.ApartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME4");

                entity.Property(e => e.ApartName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME5");

                entity.Property(e => e.ApartName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME6");

                entity.Property(e => e.ApartName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME7");

                entity.Property(e => e.ApartName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME8");

                entity.Property(e => e.ApartName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME9");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.EpartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME1");

                entity.Property(e => e.EpartName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME10");

                entity.Property(e => e.EpartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME2");

                entity.Property(e => e.EpartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME3");

                entity.Property(e => e.EpartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME4");

                entity.Property(e => e.EpartName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME5");

                entity.Property(e => e.EpartName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME6");

                entity.Property(e => e.EpartName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME7");

                entity.Property(e => e.EpartName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME8");

                entity.Property(e => e.EpartName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME9");

                entity.Property(e => e.Form)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORM");

                entity.Property(e => e.Formen)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORMEN");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Kind)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("KIND");

                entity.Property(e => e.Kinden)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("KINDEN");

                entity.Property(e => e.Madatoreyenname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MADATOREYENNAME");

                entity.Property(e => e.Madatoreyname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MADATOREYNAME");

                entity.Property(e => e.PartCodeEname1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME1");

                entity.Property(e => e.PartCodeEname10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME10");

                entity.Property(e => e.PartCodeEname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME2");

                entity.Property(e => e.PartCodeEname3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME3");

                entity.Property(e => e.PartCodeEname4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME4");

                entity.Property(e => e.PartCodeEname5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME5");

                entity.Property(e => e.PartCodeEname6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME6");

                entity.Property(e => e.PartCodeEname7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME7");

                entity.Property(e => e.PartCodeEname8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME8");

                entity.Property(e => e.PartCodeEname9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME9");

                entity.Property(e => e.PartCodeName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME1");

                entity.Property(e => e.PartCodeName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME10");

                entity.Property(e => e.PartCodeName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME2");

                entity.Property(e => e.PartCodeName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME3");

                entity.Property(e => e.PartCodeName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME4");

                entity.Property(e => e.PartCodeName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME5");

                entity.Property(e => e.PartCodeName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME6");

                entity.Property(e => e.PartCodeName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME7");

                entity.Property(e => e.PartCodeName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME8");

                entity.Property(e => e.PartCodeName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME9");
            });

            modelBuilder.Entity<Institemviewmod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTITEMVIEWMOD");

                entity.Property(e => e.Activitytype)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYTYPE");

                entity.Property(e => e.Activitytypeen)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYTYPEEN");

                entity.Property(e => e.ApartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME1");

                entity.Property(e => e.ApartName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME10");

                entity.Property(e => e.ApartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME2");

                entity.Property(e => e.ApartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME3");

                entity.Property(e => e.ApartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME4");

                entity.Property(e => e.ApartName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME5");

                entity.Property(e => e.ApartName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME6");

                entity.Property(e => e.ApartName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME7");

                entity.Property(e => e.ApartName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME8");

                entity.Property(e => e.ApartName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME9");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.EpartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME1");

                entity.Property(e => e.EpartName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME10");

                entity.Property(e => e.EpartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME2");

                entity.Property(e => e.EpartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME3");

                entity.Property(e => e.EpartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME4");

                entity.Property(e => e.EpartName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME5");

                entity.Property(e => e.EpartName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME6");

                entity.Property(e => e.EpartName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME7");

                entity.Property(e => e.EpartName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME8");

                entity.Property(e => e.EpartName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME9");

                entity.Property(e => e.Form)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORM");

                entity.Property(e => e.Formen)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORMEN");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Kind)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("KIND");

                entity.Property(e => e.Kinden)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("KINDEN");

                entity.Property(e => e.Madatoreyenname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MADATOREYENNAME");

                entity.Property(e => e.Madatoreyname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MADATOREYNAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.PartCodeEname1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME1");

                entity.Property(e => e.PartCodeEname10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME10");

                entity.Property(e => e.PartCodeEname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME2");

                entity.Property(e => e.PartCodeEname3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME3");

                entity.Property(e => e.PartCodeEname4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME4");

                entity.Property(e => e.PartCodeEname5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME5");

                entity.Property(e => e.PartCodeEname6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME6");

                entity.Property(e => e.PartCodeEname7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME7");

                entity.Property(e => e.PartCodeEname8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME8");

                entity.Property(e => e.PartCodeEname9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME9");

                entity.Property(e => e.PartCodeName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME1");

                entity.Property(e => e.PartCodeName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME10");

                entity.Property(e => e.PartCodeName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME2");

                entity.Property(e => e.PartCodeName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME3");

                entity.Property(e => e.PartCodeName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME4");

                entity.Property(e => e.PartCodeName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME5");

                entity.Property(e => e.PartCodeName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME6");

                entity.Property(e => e.PartCodeName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME7");

                entity.Property(e => e.PartCodeName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME8");

                entity.Property(e => e.PartCodeName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME9");
            });

            modelBuilder.Entity<Instpenaltyrule>(entity =>
            {
                entity.ToTable("INSTPENALTYRULES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ApplyTo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APPLY_TO");

                entity.Property(e => e.Businessid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BUSINESSID");

                entity.Property(e => e.Cratio)
                    .HasColumnType("NUMBER(9,5)")
                    .HasColumnName("CRATIO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Fixedcost)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("FIXEDCOST");

                entity.Property(e => e.Freeperiod)
                    .HasPrecision(4)
                    .HasColumnName("FREEPERIOD");

                entity.Property(e => e.FromDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Mincharge)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("MINCHARGE");

                entity.Property(e => e.Penaltycount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYCOUNT");

                entity.Property(e => e.Penaltytype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PENALTYTYPE");

                entity.Property(e => e.Periodtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PERIODTYPE");

                entity.Property(e => e.ToDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TO_DATE");
            });

            modelBuilder.Entity<Instprogram>(entity =>
            {
                entity.ToTable("INSTPROGRAMS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Insttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INSTTYPE");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.NoOfInstalmentYears)
                    .HasPrecision(2)
                    .HasColumnName("NO_OF_INSTALMENT_YEARS");

                entity.Property(e => e.NoOfInstalments)
                    .HasPrecision(3)
                    .HasColumnName("NO_OF_INSTALMENTS");

                entity.Property(e => e.Totalinstdetails)
                    .HasColumnType("NUMBER(15,5)")
                    .HasColumnName("TOTALINSTDETAILS");
            });

            modelBuilder.Entity<Instproramsview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INSTPRORAMSVIEW");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Edescr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EDESCR");

                entity.Property(e => e.Externalbegintype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNALBEGINTYPE");

                entity.Property(e => e.Externalinterval)
                    .HasPrecision(5)
                    .HasColumnName("EXTERNALINTERVAL");

                entity.Property(e => e.Externalintervaltype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNALINTERVALTYPE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Instcount)
                    .HasPrecision(3)
                    .HasColumnName("INSTCOUNT");

                entity.Property(e => e.Instmid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTMID");

                entity.Property(e => e.Instpercent)
                    .HasColumnType("NUMBER(15,5)")
                    .HasColumnName("INSTPERCENT");

                entity.Property(e => e.Insttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INSTTYPE");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Internalinterval)
                    .HasPrecision(5)
                    .HasColumnName("INTERNALINTERVAL");

                entity.Property(e => e.Internalintervaltype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("INTERNALINTERVALTYPE");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(15,5)")
                    .HasColumnName("TOTALVALUE1");
            });

            modelBuilder.Entity<Instsystemsspec>(entity =>
            {
                entity.ToTable("INSTSYSTEMSSPEC");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Filtercustomerbooklet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FILTERCUSTOMERBOOKLET");

                entity.Property(e => e.Tempreserveperiod)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TEMPRESERVEPERIOD");

                entity.Property(e => e.Tempreserveperiodtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TEMPRESERVEPERIODTYPE");
            });

            modelBuilder.Entity<Integratorrelation>(entity =>
            {
                entity.ToTable("INTEGRATORRELATION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Integratortrnstypeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INTEGRATORTRNSTYPEID");

                entity.Property(e => e.Journalentriesmain)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOURNALENTRIESMAIN");

                entity.Property(e => e.Transcode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSCODE");

                entity.Property(e => e.Trnsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSID");

                entity.HasOne(d => d.Integratortrnstype)
                    .WithMany(p => p.Integratorrelations)
                    .HasForeignKey(d => d.Integratortrnstypeid)
                    .HasConstraintName("INTEGRATORRELATION_FK1");

                entity.HasOne(d => d.JournalentriesmainNavigation)
                    .WithMany(p => p.Integratorrelations)
                    .HasForeignKey(d => d.Journalentriesmain)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("INTEGRATORRELATION_FK2");
            });

            modelBuilder.Entity<Integratortrnstype>(entity =>
            {
                entity.ToTable("INTEGRATORTRNSTYPE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<IntgAcccodesDetail>(entity =>
            {
                entity.ToTable("INTG_ACCCODES_DETAILS");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Acccode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACCCODE");

                entity.Property(e => e.AccountId)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ACCOUNT_ID");

                entity.Property(e => e.Compcode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("COMPCODE");

                entity.Property(e => e.IntgAcccodesMainId)
                    .HasPrecision(10)
                    .HasColumnName("INTG_ACCCODES_MAIN_ID");

                entity.Property(e => e.OrgCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ORG_CODE");

                entity.Property(e => e.OrgForm)
                    .HasPrecision(10)
                    .HasColumnName("ORG_FORM");

                entity.Property(e => e.OrgType)
                    .HasPrecision(10)
                    .HasColumnName("ORG_TYPE");

                entity.Property(e => e.Storeitem)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREITEM");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.IntgAcccodesDetails)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("SYS_C0019888");

                entity.HasOne(d => d.IntgAcccodesMain)
                    .WithMany(p => p.IntgAcccodesDetails)
                    .HasForeignKey(d => d.IntgAcccodesMainId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0019562");

                entity.HasOne(d => d.OrgCodeNavigation)
                    .WithMany(p => p.IntgAcccodesDetails)
                    .HasForeignKey(d => d.OrgCode)
                    .HasConstraintName("SYS_C0019588");

                entity.HasOne(d => d.StoreitemNavigation)
                    .WithMany(p => p.IntgAcccodesDetails)
                    .HasForeignKey(d => d.Storeitem)
                    .HasConstraintName("SYS_C0019698");
            });

            modelBuilder.Entity<IntgAcccodesMain>(entity =>
            {
                entity.ToTable("INTG_ACCCODES_MAIN");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Acccode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACCCODE");

                entity.Property(e => e.AcccodeType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACCCODE_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.AccountId)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ACCOUNT_ID");

                entity.Property(e => e.AgentType)
                    .HasPrecision(10)
                    .HasColumnName("AGENT_TYPE");

                entity.Property(e => e.Compcode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("COMPCODE");

                entity.Property(e => e.IntgDesc)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INTG_DESC")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<IntgOrgVariable>(entity =>
            {
                entity.ToTable("INTG_ORG_VARIABLES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.DispOrder)
                    .HasPrecision(10)
                    .HasColumnName("DISP_ORDER");

                entity.Property(e => e.EngDesc)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENG_DESC")
                    .IsFixedLength(true);

                entity.Property(e => e.OrgTrnsType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ORG_TRNS_TYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.OrgTrnsVariable)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ORG_TRNS_VARIABLE")
                    .IsFixedLength(true);

                entity.Property(e => e.OrgTrnsVariableDesc)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ORG_TRNS_VARIABLE_DESC")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Inttradespec>(entity =>
            {
                entity.ToTable("INTTRADESPECS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Code)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Namear)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAMEAR");
            });

            modelBuilder.Entity<Irrigationemp>(entity =>
            {
                entity.ToTable("IRRIGATIONEMP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Allcodeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLCODEID");

                entity.Property(e => e.Irrigationperiod)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IRRIGATIONPERIOD");

                entity.Property(e => e.Transid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSID");

                entity.HasOne(d => d.Allcode)
                    .WithMany(p => p.Irrigationemps)
                    .HasForeignKey(d => d.Allcodeid)
                    .HasConstraintName("IRRIGATIONEMP_R02");

                entity.HasOne(d => d.Trans)
                    .WithMany(p => p.Irrigationemps)
                    .HasForeignKey(d => d.Transid)
                    .HasConstraintName("IRRIGATIONEMP_R01");
            });

            modelBuilder.Entity<IssueStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ISSUE_STATUS");

                entity.Property(e => e.ActionTaken)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTION_TAKEN");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("DATE")
                    .HasColumnName("BEGIN_DATE");

                entity.Property(e => e.BusinessObjId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BUSINESS_OBJ_ID");

                entity.Property(e => e.CauseDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CAUSE_DESCRIPTION");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.IssueTitle)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_TITLE");

                entity.Property(e => e.ObjectType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OBJECT_TYPE");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_ID");

                entity.Property(e => e.PreventionTaken)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PREVENTION_TAKEN");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_ID");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_NAME");

                entity.Property(e => e.StatusNote)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_NOTE");

                entity.Property(e => e.TotalTime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOTAL_TIME");
            });

            modelBuilder.Entity<Istransfer>(entity =>
            {
                entity.ToTable("ISTRANSFER");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.ToTable("ITEMS");

                entity.Property(e => e.Id)
                    .HasPrecision(10)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.FormNo)
                    .HasPrecision(2)
                    .HasColumnName("FORM_NO")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.FullCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FULL_CODE");

                entity.Property(e => e.Ohwyam)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("OHWYAM")
                    .HasDefaultValueSql("'11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n");

                entity.Property(e => e.P1).HasPrecision(10);

                entity.Property(e => e.P10).HasPrecision(10);

                entity.Property(e => e.P2).HasPrecision(10);

                entity.Property(e => e.P3).HasPrecision(10);

                entity.Property(e => e.P4).HasPrecision(10);

                entity.Property(e => e.P5).HasPrecision(10);

                entity.Property(e => e.P6).HasPrecision(10);

                entity.Property(e => e.P7).HasPrecision(10);

                entity.Property(e => e.P8).HasPrecision(10);

                entity.Property(e => e.P9).HasPrecision(10);
            });

            modelBuilder.Entity<ItemChangePriceM>(entity =>
            {
                entity.HasKey(e => e.Itemchangeid)
                    .HasName("ITEM_CHANGE_PRICE_M_PK");

                entity.ToTable("ITEM_CHANGE_PRICE_M");

                entity.HasIndex(e => e.Itemchangcode, "ITEM_CHANGE_PRICE_M_U01")
                    .IsUnique();

                entity.Property(e => e.Itemchangeid)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ITEMCHANGEID");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Itemchangcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCHANGCODE");

                entity.Property(e => e.Itemchangeremark)
                    .HasMaxLength(75)
                    .HasColumnName("ITEMCHANGEREMARK");

                entity.Property(e => e.PriceTypeId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PRICE_TYPE_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.HasOne(d => d.PriceType)
                    .WithMany(p => p.ItemChangePriceMs)
                    .HasForeignKey(d => d.PriceTypeId)
                    .HasConstraintName("SYS_C0019726");
            });

            modelBuilder.Entity<ItemChangePriceO>(entity =>
            {
                entity.HasKey(e => e.ItemOId)
                    .HasName("ITEM_CHANGE_PRICE_O_PK");

                entity.ToTable("ITEM_CHANGE_PRICE_O");

                entity.Property(e => e.ItemOId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ITEM_O_ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.BranchPrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("BRANCH_PRICE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DealPrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("DEAL_PRICE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_CODE");

                entity.Property(e => e.Itemchangeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMCHANGEID");

                entity.Property(e => e.NewBranchPrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("NEW_BRANCH_PRICE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.NewDealPrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("NEW_DEAL_PRICE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.NewSalePrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("NEW_SALE_PRICE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.SalePrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("SALE_PRICE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.HasOne(d => d.Itemchange)
                    .WithMany(p => p.ItemChangePriceOs)
                    .HasForeignKey(d => d.Itemchangeid)
                    .HasConstraintName("ITEM_CHANGE_PRICE_O_R01");

                entity.HasOne(d => d.StoreItems)
                    .WithMany(p => p.ItemChangePriceOs)
                    .HasForeignKey(d => d.StoreItemsId)
                    .HasConstraintName("ITEM_CHANGE_PRICE_O_R02");
            });

            modelBuilder.Entity<ItemDiscountO>(entity =>
            {
                entity.HasKey(e => e.ItemOId)
                    .HasName("ITEM_DISCOUNT_O_PK");

                entity.ToTable("ITEM_DISCOUNT_O");

                entity.Property(e => e.ItemOId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ITEM_O_ID");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Discount)
                    .HasColumnType("FLOAT")
                    .HasColumnName("DISCOUNT");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_CODE");

                entity.Property(e => e.Itemchangeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMCHANGEID");

                entity.Property(e => e.OldDiscount)
                    .HasColumnType("FLOAT")
                    .HasColumnName("OLD_DISCOUNT");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.HasOne(d => d.Itemchange)
                    .WithMany(p => p.ItemDiscountOs)
                    .HasForeignKey(d => d.Itemchangeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ITEM_DISCOUNT_O_R01");

                entity.HasOne(d => d.StoreItems)
                    .WithMany(p => p.ItemDiscountOs)
                    .HasForeignKey(d => d.StoreItemsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ITEM_DISCOUNT_O_R02");
            });

            modelBuilder.Entity<Itembeforbyallstoreviewsum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ITEMBEFORBYALLSTOREVIEWSUM");
            });

            modelBuilder.Entity<ItemchangemStoreTrn>(entity =>
            {
                entity.ToTable("ITEMCHANGEM_STORE_TRNS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Itemchangeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMCHANGEID");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_CODE");

                entity.HasOne(d => d.Itemchange)
                    .WithMany(p => p.ItemchangemStoreTrns)
                    .HasForeignKey(d => d.Itemchangeid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ITEMCHANGEM_STORE_TRNS_R02");

                entity.HasOne(d => d.TrnsCodeNavigation)
                    .WithMany(p => p.ItemchangemStoreTrns)
                    .HasForeignKey(d => d.TrnsCode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ITEMCHANGEM_STORE_TRNS_R01");
            });

            modelBuilder.Entity<Iteminbyallstoreview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ITEMINBYALLSTOREVIEW");

                entity.Property(e => e.ItemId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEM_ID");

                entity.Property(e => e.Price)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICE");

                entity.Property(e => e.Quantity)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");
            });

            modelBuilder.Entity<Iteminbyallstoreviewsum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ITEMINBYALLSTOREVIEWSUM");

                entity.Property(e => e.ItemId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEM_ID");

                entity.Property(e => e.Price)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICE");

                entity.Property(e => e.Quantity)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");
            });

            modelBuilder.Entity<Iteminformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ITEMINFORMATION");
            });

            modelBuilder.Entity<Iteminformationinit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ITEMINFORMATIONINIT");
            });

            modelBuilder.Entity<IteminformationinitMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ITEMINFORMATIONINIT_MOD");

                entity.Property(e => e.Balance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BALANCE");

                entity.Property(e => e.Eunit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EUNIT");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemename)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEMENAME");

                entity.Property(e => e.Itemform)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMFORM");

                entity.Property(e => e.Itemformcode)
                    .HasMaxLength(81)
                    .IsUnicode(false)
                    .HasColumnName("ITEMFORMCODE");

                entity.Property(e => e.Itemgroup)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMGROUP");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.Property(e => e.Storecode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("STORECODE");

                entity.Property(e => e.Storeename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STOREENAME");

                entity.Property(e => e.Storegroup)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STOREGROUP");

                entity.Property(e => e.Storename)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STORENAME");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNITID");
            });

            modelBuilder.Entity<Itemoutbyallstoreview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ITEMOUTBYALLSTOREVIEW");

                entity.Property(e => e.ItemId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEM_ID");

                entity.Property(e => e.Price)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICE");

                entity.Property(e => e.Quantity)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");
            });

            modelBuilder.Entity<Itemoutbyallstoreviewsum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ITEMOUTBYALLSTOREVIEWSUM");

                entity.Property(e => e.ItemId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEM_ID");

                entity.Property(e => e.Sprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SPRICE");

                entity.Property(e => e.Squantity)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SQUANTITY");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");
            });

            modelBuilder.Entity<Itempricedetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ITEMPRICEDETAILS");
            });

            modelBuilder.Entity<Journalcode>(entity =>
            {
                entity.ToTable("JOURNALCODES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Autoentry)
                    .HasColumnType("NUMBER(22,1)")
                    .HasColumnName("AUTOENTRY");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Entrylength)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ENTRYLENGTH");

                entity.Property(e => e.Getindiv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GETINDIV");

                entity.Property(e => e.Isdefault)
                    .HasColumnType("NUMBER(22,1)")
                    .HasColumnName("ISDEFAULT");

                entity.Property(e => e.Monthlynumber)
                    .HasColumnType("NUMBER(22,1)")
                    .HasColumnName("MONTHLYNUMBER");

                entity.Property(e => e.Shapeentry)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SHAPEENTRY");

                entity.Property(e => e.Shortaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SHORTANAME");

                entity.Property(e => e.Shortename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SHORTENAME");

                entity.Property(e => e.Startwithnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STARTWITHNUM");
            });

            modelBuilder.Entity<Journalcodesacc>(entity =>
            {
                entity.ToTable("JOURNALCODESACCS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Accountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTID");

                entity.Property(e => e.Journalcodeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOURNALCODEID");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Journalcodesaccs)
                    .HasForeignKey(d => d.Accountid)
                    .HasConstraintName("JOURNALCODESACCS_R01");

                entity.HasOne(d => d.Journalcode)
                    .WithMany(p => p.Journalcodesaccs)
                    .HasForeignKey(d => d.Journalcodeid)
                    .HasConstraintName("JOURNALCODESACCS_R02");
            });

            modelBuilder.Entity<Journalentriesdetail>(entity =>
            {
                entity.ToTable("JOURNALENTRIESDETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Accounttreeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTTREEID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Dimensiondetailsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONDETAILSID");

                entity.Property(e => e.Entrydesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENTRYDESC");

                entity.Property(e => e.Journalentrymainid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOURNALENTRYMAINID");

                entity.Property(e => e.Naturalaccountid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NATURALACCOUNTID");

                entity.Property(e => e.Storeallcodesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREALLCODESID");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUE");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Journalentriesdetails)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("JOURNALENTRIESDETAILS_FK5");

                entity.HasOne(d => d.Dimensiondetails)
                    .WithMany(p => p.Journalentriesdetails)
                    .HasForeignKey(d => d.Dimensiondetailsid)
                    .HasConstraintName("JOURNALENTRIESDETAILS_R02");

                entity.HasOne(d => d.Journalentrymain)
                    .WithMany(p => p.Journalentriesdetails)
                    .HasForeignKey(d => d.Journalentrymainid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("JOURNALENTRIESDETAILS_R07");

                entity.HasOne(d => d.Naturalaccount)
                    .WithMany(p => p.Journalentriesdetails)
                    .HasForeignKey(d => d.Naturalaccountid)
                    .HasConstraintName("JOURNALENTRIESDETAILS_R03");

                entity.HasOne(d => d.Storeallcodes)
                    .WithMany(p => p.Journalentriesdetails)
                    .HasForeignKey(d => d.Storeallcodesid)
                    .HasConstraintName("JOURNALENTRIESDETAILS_R06");
            });

            modelBuilder.Entity<Journalentriesdimension>(entity =>
            {
                entity.ToTable("JOURNALENTRIESDIMENSION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Dimensiondetailsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONDETAILSID");

                entity.Property(e => e.Journalentriesdetailsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOURNALENTRIESDETAILSID");

                entity.HasOne(d => d.Dimensiondetails)
                    .WithMany(p => p.Journalentriesdimensions)
                    .HasForeignKey(d => d.Dimensiondetailsid)
                    .HasConstraintName("JOURNALENTRIESDIMENSION_FK1");

                entity.HasOne(d => d.Journalentriesdetails)
                    .WithMany(p => p.Journalentriesdimensions)
                    .HasForeignKey(d => d.Journalentriesdetailsid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("JOURNALENTRIESDIMENSION_FK2");
            });

            modelBuilder.Entity<Journalentriesmain>(entity =>
            {
                entity.ToTable("JOURNALENTRIESMAIN");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Conversionrate)
                    .HasColumnType("FLOAT")
                    .HasColumnName("CONVERSIONRATE");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNUMBER");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENTRYDATE");

                entity.Property(e => e.Entydesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENTYDESC");

                entity.Property(e => e.Entynumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENTYNUMBER");

                entity.Property(e => e.Iscurrencydiff)
                    .HasPrecision(1)
                    .HasColumnName("ISCURRENCYDIFF");

                entity.Property(e => e.Isposted)
                    .HasPrecision(1)
                    .HasColumnName("ISPOSTED");

                entity.Property(e => e.Journalcodesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOURNALCODESID");

                entity.Property(e => e.Journalentrytypeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOURNALENTRYTYPEID");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");

                entity.Property(e => e.StoreAllcodesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ALLCODESID");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Journalentriesmains)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("JOURNALENTRIESMAIN_R03");

                entity.HasOne(d => d.Journalcodes)
                    .WithMany(p => p.Journalentriesmains)
                    .HasForeignKey(d => d.Journalcodesid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("JOURNALENTRIESMAIN_R01");

                entity.HasOne(d => d.StoreAllcodes)
                    .WithMany(p => p.Journalentriesmains)
                    .HasForeignKey(d => d.StoreAllcodesid)
                    .HasConstraintName("JOURNALENTRIESMAIN_R02");
            });

            modelBuilder.Entity<LgCategory>(entity =>
            {
                entity.ToTable("LG_CATEGORIES");

                entity.HasIndex(e => e.Code, "LG_CATEGORIES_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<LgDescriptionsM>(entity =>
            {
                entity.ToTable("LG_DESCRIPTIONS_M");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AmountFrom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AMOUNT_FROM");

                entity.Property(e => e.FinancespecTrnscode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCESPEC_TRNSCODE");

                entity.Property(e => e.FromDest)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FROM_DEST");

                entity.Property(e => e.LgCategoryId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_CATEGORY_ID");

                entity.Property(e => e.LgOpenCasesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_OPEN_CASES_ID");

                entity.Property(e => e.LgStatusId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_STATUS_ID");

                entity.Property(e => e.LgTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_TYPES_ID");

                entity.Property(e => e.ToDest)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TO_DEST");

                entity.HasOne(d => d.FinancespecTrnscodeNavigation)
                    .WithMany(p => p.LgDescriptionsMs)
                    .HasForeignKey(d => d.FinancespecTrnscode)
                    .HasConstraintName("LG_DESCRIPTIONS_M_R03");

                entity.HasOne(d => d.LgCategory)
                    .WithMany(p => p.LgDescriptionsMs)
                    .HasForeignKey(d => d.LgCategoryId)
                    .HasConstraintName("LGCATEGORYID");

                entity.HasOne(d => d.LgOpenCases)
                    .WithMany(p => p.LgDescriptionsMs)
                    .HasForeignKey(d => d.LgOpenCasesId)
                    .HasConstraintName("LG_DESCRIPTIONS_M_R02");

                entity.HasOne(d => d.LgStatus)
                    .WithMany(p => p.LgDescriptionsMs)
                    .HasForeignKey(d => d.LgStatusId)
                    .HasConstraintName("LGSTAUSID");

                entity.HasOne(d => d.LgTypes)
                    .WithMany(p => p.LgDescriptionsMs)
                    .HasForeignKey(d => d.LgTypesId)
                    .HasConstraintName("LG_DESCRIPTIONS_M_R01");
            });

            modelBuilder.Entity<LgDescriptionsO>(entity =>
            {
                entity.ToTable("LG_DESCRIPTIONS_O");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AccountnatureId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTNATURE_ID");

                entity.Property(e => e.AccountstreeId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNTSTREE_ID");

                entity.Property(e => e.AmountFrom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AMOUNT_FROM");

                entity.Property(e => e.FinancespecTrnscode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCESPEC_TRNSCODE");

                entity.Property(e => e.LgDescriptionsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_DESCRIPTIONS_ID");

                entity.HasOne(d => d.Accountnature)
                    .WithMany(p => p.LgDescriptionsOs)
                    .HasForeignKey(d => d.AccountnatureId)
                    .HasConstraintName("LG_DESCRIPTIONS_O_R03");

                entity.HasOne(d => d.Accountstree)
                    .WithMany(p => p.LgDescriptionsOs)
                    .HasForeignKey(d => d.AccountstreeId)
                    .HasConstraintName("LG_DESCRIPTIONS_O_R01");

                entity.HasOne(d => d.FinancespecTrnscodeNavigation)
                    .WithMany(p => p.LgDescriptionsOs)
                    .HasForeignKey(d => d.FinancespecTrnscode)
                    .HasConstraintName("LG_DESCRIPTIONS_O_R02");

                entity.HasOne(d => d.LgDescriptions)
                    .WithMany(p => p.LgDescriptionsOs)
                    .HasForeignKey(d => d.LgDescriptionsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("LG_DESCRIPTIONS_O_R04");
            });

            modelBuilder.Entity<LgFinance>(entity =>
            {
                entity.ToTable("LG_FINANCE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.FinancemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCEM_ID");

                entity.Property(e => e.LgStatusId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_STATUS_ID");

                entity.Property(e => e.LgTransactionId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_TRANSACTION_ID");

                entity.HasOne(d => d.Financem)
                    .WithMany(p => p.LgFinances)
                    .HasForeignKey(d => d.FinancemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("LG_FINANCE_R02");

                entity.HasOne(d => d.LgTransaction)
                    .WithMany(p => p.LgFinances)
                    .HasForeignKey(d => d.LgTransactionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("LG_FINANCE_R01");
            });

            modelBuilder.Entity<LgOpenCase>(entity =>
            {
                entity.ToTable("LG_OPEN_CASES");

                entity.HasIndex(e => e.Code, "LG_OPEN_CASES_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<LgStatus>(entity =>
            {
                entity.ToTable("LG_STATUS");

                entity.HasIndex(e => e.Code, "LG_STATUS_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.ShowInDescription)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SHOW_IN_DESCRIPTION");
            });

            modelBuilder.Entity<LgTransaction>(entity =>
            {
                entity.ToTable("LG_TRANSACTION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.BankDocNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANK_DOC_NO");

                entity.Property(e => e.BankId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BANK_ID");

                entity.Property(e => e.BankRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BANK_RATIO");

                entity.Property(e => e.Branch)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BRANCH");

                entity.Property(e => e.CancelDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CANCEL_DATE");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CLOSE_DATE");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATE_DATE");

                entity.Property(e => e.CurrencyId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCY_ID");

                entity.Property(e => e.CurrencyRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCY_RATE");

                entity.Property(e => e.DocNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.EditDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EDIT_DATE");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EXPIRATION_DATE");

                entity.Property(e => e.IndateFrom)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE_FROM");

                entity.Property(e => e.IndateTo)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE_TO");

                entity.Property(e => e.IsCancel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_CANCEL");

                entity.Property(e => e.IsClose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_CLOSE");

                entity.Property(e => e.LgCatId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_CAT_ID");

                entity.Property(e => e.LgStatusId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_STATUS_ID");

                entity.Property(e => e.LgTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_TYPES_ID");

                entity.Property(e => e.LocalAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.MarginRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MARGIN_RATIO");

                entity.Property(e => e.Note)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("NOTE");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.LgTransactions)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("LG_TRANSACTION_R05");

                entity.HasOne(d => d.LgCat)
                    .WithMany(p => p.LgTransactions)
                    .HasForeignKey(d => d.LgCatId)
                    .HasConstraintName("LG_TRANSACTION_R01");

                entity.HasOne(d => d.LgStatus)
                    .WithMany(p => p.LgTransactions)
                    .HasForeignKey(d => d.LgStatusId)
                    .HasConstraintName("LG_TRANSACTION_R03");

                entity.HasOne(d => d.LgTypes)
                    .WithMany(p => p.LgTransactions)
                    .HasForeignKey(d => d.LgTypesId)
                    .HasConstraintName("LG_TRANSACTION_R02");

                entity.HasOne(d => d.StoreAllcodes)
                    .WithMany(p => p.LgTransactions)
                    .HasForeignKey(d => d.StoreAllcodesId)
                    .HasConstraintName("LG_TRANSACTION_R04");
            });

            modelBuilder.Entity<LgTransactionEdit>(entity =>
            {
                entity.ToTable("LG_TRANSACTION_EDIT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.BankDocNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANK_DOC_NO");

                entity.Property(e => e.BankId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BANK_ID");

                entity.Property(e => e.BankRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BANK_RATIO");

                entity.Property(e => e.CurrencyId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCY_ID");

                entity.Property(e => e.CurrencyRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCY_RATE");

                entity.Property(e => e.DocNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.EditDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EDIT_DATE");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EXPIRATION_DATE");

                entity.Property(e => e.IndateFrom)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE_FROM");

                entity.Property(e => e.IndateTo)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE_TO");

                entity.Property(e => e.LgCatId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_CAT_ID");

                entity.Property(e => e.LgStatusId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_STATUS_ID");

                entity.Property(e => e.LgTransactionId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_TRANSACTION_ID");

                entity.Property(e => e.LgTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LG_TYPES_ID");

                entity.Property(e => e.LocalAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.MarginRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MARGIN_RATIO");

                entity.Property(e => e.Note)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("NOTE");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.LgTransactionEdits)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("LG_TRANSACTION_EDIT_R05");

                entity.HasOne(d => d.LgCat)
                    .WithMany(p => p.LgTransactionEdits)
                    .HasForeignKey(d => d.LgCatId)
                    .HasConstraintName("LG_TRANSACTION_EDIT_R01");

                entity.HasOne(d => d.LgStatus)
                    .WithMany(p => p.LgTransactionEdits)
                    .HasForeignKey(d => d.LgStatusId)
                    .HasConstraintName("LG_TRANSACTION_EDIT_R03");

                entity.HasOne(d => d.LgTransaction)
                    .WithMany(p => p.LgTransactionEdits)
                    .HasForeignKey(d => d.LgTransactionId)
                    .HasConstraintName("LG_TRANSACTION_EDIT_R06");

                entity.HasOne(d => d.LgTypes)
                    .WithMany(p => p.LgTransactionEdits)
                    .HasForeignKey(d => d.LgTypesId)
                    .HasConstraintName("LG_TRANSACTION_EDIT_R02");

                entity.HasOne(d => d.StoreAllcodes)
                    .WithMany(p => p.LgTransactionEdits)
                    .HasForeignKey(d => d.StoreAllcodesId)
                    .HasConstraintName("LG_TRANSACTION_EDIT_R04");
            });

            modelBuilder.Entity<LgType>(entity =>
            {
                entity.ToTable("LG_TYPES");

                entity.HasIndex(e => e.Code, "LG_TYPES_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<MainCriterion>(entity =>
            {
                entity.ToTable("MAIN_CRITERIA");

                entity.HasIndex(e => e.Cname, "MAIN_CRITERIA_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Cname)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CNAME");

                entity.Property(e => e.Filtercol)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FILTERCOL");

                entity.Property(e => e.Tname)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TNAME");
            });

            modelBuilder.Entity<MainType>(entity =>
            {
                entity.ToTable("MAIN_TYPES");

                entity.HasIndex(e => e.Aname, "MAIN_TYPES_U01")
                    .IsUnique();

                entity.HasIndex(e => e.Ename, "MAIN_TYPES_U02")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Kind)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("KIND");

                entity.Property(e => e.Length)
                    .HasPrecision(2)
                    .HasColumnName("LENGTH");

                entity.Property(e => e.System)
                    .HasPrecision(1)
                    .HasColumnName("SYSTEM");
            });

            modelBuilder.Entity<MainTypeCodeSegmentation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MAIN_TYPE_CODE_SEGMENTATION");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.Clevel)
                    .HasPrecision(3)
                    .HasColumnName("CLEVEL");

                entity.Property(e => e.Codinglastpart)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODINGLASTPART");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.FormName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORM_NAME");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Length)
                    .HasPrecision(3)
                    .HasColumnName("LENGTH");

                entity.Property(e => e.MainId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAIN_ID");

                entity.Property(e => e.MainName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MAIN_NAME");

                entity.Property(e => e.PartId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PART_ID");
            });

            modelBuilder.Entity<MainTypeCodeSegmentation1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MAIN_TYPE_CODE_SEGMENTATION1");

                entity.Property(e => e.ApartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME");

                entity.Property(e => e.Clevel)
                    .HasPrecision(3)
                    .HasColumnName("CLEVEL");

                entity.Property(e => e.Codinglastpart)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODINGLASTPART");

                entity.Property(e => e.EpartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME");

                entity.Property(e => e.FormName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORM_NAME");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Length)
                    .HasPrecision(3)
                    .HasColumnName("LENGTH");

                entity.Property(e => e.MainId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAIN_ID");

                entity.Property(e => e.MainName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MAIN_NAME");

                entity.Property(e => e.MaxClevel)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_CLEVEL");

                entity.Property(e => e.PartId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PART_ID");

                entity.Property(e => e.UpTo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UP_TO");
            });

            modelBuilder.Entity<Maxcheckidhafza>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MAXCHECKIDHAFZA");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Hafzadate)
                    .HasColumnType("DATE")
                    .HasColumnName("HAFZADATE");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Hstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("HSTAMP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<Maxcheckidstamp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MAXCHECKIDSTAMPS");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Mstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("MSTAMP");
            });

            modelBuilder.Entity<Maxsaleformdocnum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MAXSALEFORMDOCNUM");

                entity.Property(e => e.Docnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOCNUM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<Multydist>(entity =>
            {
                entity.ToTable("MULTYDIST");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AppId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("APP_ID");

                entity.Property(e => e.AssetscodeId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ASSETSCODE_ID");

                entity.Property(e => e.AssetscodeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ASSETSCODE_NAME");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.CostId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("COST_ID");

                entity.Property(e => e.CostName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COST_NAME");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("CREDIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Curr)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURR");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("DEBIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DocumantationId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DOCUMANTATION_ID");

                entity.Property(e => e.ExpId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("EXP_ID");

                entity.Property(e => e.Exptypesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("EXPTYPESID");

                entity.Property(e => e.FtId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FT_ID")
                    .HasDefaultValueSql("NULL");

                entity.Property(e => e.Neteffect)
                    .HasPrecision(1)
                    .HasColumnName("NETEFFECT");

                entity.Property(e => e.Notes)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Rate)
                    .HasColumnType("NUMBER(20,4)")
                    .HasColumnName("RATE");

                entity.Property(e => e.ShippedId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SHIPPED_ID");

                entity.Property(e => e.Stageid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STAGEID");

                entity.Property(e => e.TransactionId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRANSACTION_ID");

                entity.Property(e => e.TransmId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRANSM_ID");

                entity.HasOne(d => d.Transaction)
                    .WithMany(p => p.Multydists)
                    .HasForeignKey(d => d.TransactionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("MULTYDIST_R02");

                entity.HasOne(d => d.Transm)
                    .WithMany(p => p.Multydists)
                    .HasForeignKey(d => d.TransmId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("MULTYDIST_R01");
            });

            modelBuilder.Entity<MultydistDimension>(entity =>
            {
                entity.ToTable("MULTYDIST_DIMENSIONS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensionsdetailsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONSDETAILS_ID");

                entity.Property(e => e.MultydistId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MULTYDIST_ID");

                entity.HasOne(d => d.Dimensionsdetails)
                    .WithMany(p => p.MultydistDimensions)
                    .HasForeignKey(d => d.DimensionsdetailsId)
                    .HasConstraintName("MULTYDIST_DIMENSIONS_FK1");

                entity.HasOne(d => d.Multydist)
                    .WithMany(p => p.MultydistDimensions)
                    .HasForeignKey(d => d.MultydistId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("MULTYDIST_DIMENSIONS_FK2");
            });

            modelBuilder.Entity<MultydistTemp>(entity =>
            {
                entity.ToTable("MULTYDIST_TEMP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.AppId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("APP_ID");

                entity.Property(e => e.AssetscodeId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ASSETSCODE_ID");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1\n");

                entity.Property(e => e.CostId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("COST_ID");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("CREDIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Curr)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURR");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("DEBIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DocumantationId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DOCUMANTATION_ID");

                entity.Property(e => e.ExpId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("EXP_ID");

                entity.Property(e => e.FtId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FT_ID")
                    .HasDefaultValueSql("NULL");

                entity.Property(e => e.Neteffect)
                    .HasPrecision(1)
                    .HasColumnName("NETEFFECT");

                entity.Property(e => e.Notes)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Rate)
                    .HasColumnType("NUMBER(20,4)")
                    .HasColumnName("RATE");

                entity.Property(e => e.Rowstate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROWSTATE");

                entity.Property(e => e.ShippedId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SHIPPED_ID");

                entity.Property(e => e.TransactionId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRANSACTION_ID");

                entity.Property(e => e.TransmId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRANSM_ID");

                entity.HasOne(d => d.Transaction)
                    .WithMany(p => p.MultydistTemps)
                    .HasForeignKey(d => d.TransactionId)
                    .HasConstraintName("MULTYDIST_TEMP_R02");

                entity.HasOne(d => d.Transm)
                    .WithMany(p => p.MultydistTemps)
                    .HasForeignKey(d => d.TransmId)
                    .HasConstraintName("MULTYDIST_TEMP_R01");
            });

            modelBuilder.Entity<Multydistgrouptype>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MULTYDISTGROUPTYPE");

                entity.Property(e => e.Accountstreecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNTSTREECODE");

                entity.Property(e => e.Accountstreename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNTSTREENAME");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Dimansionaname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DIMANSIONANAME");

                entity.Property(e => e.Dimansionename)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DIMANSIONENAME");

                entity.Property(e => e.Dimansionid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMANSIONID");

                entity.Property(e => e.ExpName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EXP_NAME");

                entity.Property(e => e.Fdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FDISTID");

                entity.Property(e => e.Fdistname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FDISTNAME");

                entity.Property(e => e.FinanceAnlsCodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCE_ANLS_CODES_ID");

                entity.Property(e => e.Financemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEMID");

                entity.Property(e => e.Financename)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("FINANCENAME");

                entity.Property(e => e.FtName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FT_NAME");

                entity.Property(e => e.Ftypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FTYPEID");

                entity.Property(e => e.Hasaccount)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HASACCOUNT");

                entity.Property(e => e.Hasdimention)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HASDIMENTION");

                entity.Property(e => e.Hasdists)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HASDISTS");

                entity.Property(e => e.Hasexpensses)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HASEXPENSSES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.Tdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TDISTID");

                entity.Property(e => e.Tdistname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TDISTNAME");

                entity.Property(e => e.Trnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSCODE");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");

                entity.Property(e => e.Ttypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TTYPEID");
            });

            modelBuilder.Entity<Multydistspec>(entity =>
            {
                entity.HasKey(e => new { e.ApplicationId, e.Trnsspeccode })
                    .HasName("MULTYDISTSPEC_PK2");

                entity.ToTable("MULTYDISTSPEC");

                entity.Property(e => e.ApplicationId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("APPLICATION_ID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Trnsspeccode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSSPECCODE");

                entity.Property(e => e.AssetscodeId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ASSETSCODE_ID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CostId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("COST_ID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DocumantationId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DOCUMANTATION_ID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ExpId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("EXP_ID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.FtId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FT_ID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.SippedId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SIPPED_ID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.StoremovementId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STOREMOVEMENT_ID")
                    .HasDefaultValueSql("0\n");
            });

            modelBuilder.Entity<Multydistview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MULTYDISTVIEW");

                entity.Property(e => e.AssetscodeId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASSETSCODE_ID");

                entity.Property(e => e.AssetscodeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASSETSCODE_NAME");

                entity.Property(e => e.CostId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COST_ID");

                entity.Property(e => e.CostName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("COST_NAME");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.ExpName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EXP_NAME");

                entity.Property(e => e.FinanceAnlsCodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCE_ANLS_CODES_ID");

                entity.Property(e => e.Financemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEMID");

                entity.Property(e => e.FtName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FT_NAME");

                entity.Property(e => e.Hasaccount)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HASACCOUNT");

                entity.Property(e => e.Hasdimention)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HASDIMENTION");

                entity.Property(e => e.Hasdists)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HASDISTS");

                entity.Property(e => e.Hasexpensses)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HASEXPENSSES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");
            });

            modelBuilder.Entity<Naturalaccount>(entity =>
            {
                entity.ToTable("NATURALACCOUNTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Nesmatestview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NESMATESTVIEW");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Fixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL");

                entity.Property(e => e.FixedcostvalCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL_COLLECTED");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.InstValue)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INST_VALUE");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_COLLECTED");

                entity.Property(e => e.Paytype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAYTYPE");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.PenaltyCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY_COLLECTED");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<Nesmatestview2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NESMATESTVIEW2");

                entity.Property(e => e.AffectSalePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AFFECT_SALE_PRICE");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Fixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL");

                entity.Property(e => e.FixedcostvalCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL_COLLECTED");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.InstValue)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INST_VALUE");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_COLLECTED");

                entity.Property(e => e.Paytype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAYTYPE");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.PenaltyCollected)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY_COLLECTED");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");
            });

            modelBuilder.Entity<Page>(entity =>
            {
                entity.ToTable("PAGES");

                entity.HasIndex(e => new { e.Pagename, e.PageTitle, e.PageUrl, e.Projectno }, "PAGES_U01")
                    .IsUnique();

                entity.Property(e => e.Pageid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAGEID");

                entity.Property(e => e.Createdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATEDATE")
                    .HasDefaultValueSql("sysdate");

                entity.Property(e => e.Hidden)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HIDDEN");

                entity.Property(e => e.PageTitle)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PAGE_TITLE");

                entity.Property(e => e.PageUrl)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("PAGE_URL");

                entity.Property(e => e.PageUrlrt)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PAGE_URLRT");

                entity.Property(e => e.Pageename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAGEENAME");

                entity.Property(e => e.Pageetitle)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PAGEETITLE");

                entity.Property(e => e.Pagename)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("PAGENAME");

                entity.Property(e => e.Pagertparam1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PAGERTPARAM1");

                entity.Property(e => e.Pagertparam2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PAGERTPARAM2");

                entity.Property(e => e.ParentId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PARENT_ID");

                entity.Property(e => e.Projectno)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROJECTNO");

                entity.Property(e => e.Ranking)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RANKING");
            });

            modelBuilder.Entity<PagesPermission>(entity =>
            {
                entity.HasKey(e => new { e.PageId, e.PerId, e.RoleId })
                    .HasName("PAGES_PERMISSIONS_PK");

                entity.ToTable("PAGES_PERMISSIONS");

                entity.Property(e => e.PageId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAGE_ID");

                entity.Property(e => e.PerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PER_ID");

                entity.Property(e => e.RoleId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ROLE_ID");

                entity.Property(e => e.PerStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PER_STATUS");

                entity.HasOne(d => d.Per)
                    .WithMany(p => p.PagesPermissions)
                    .HasForeignKey(d => d.PerId)
                    .HasConstraintName("PAGES_PERMISSIONS_R02");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.PagesPermissions)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("PAGES_PERMISSIONS_R03");
            });

            modelBuilder.Entity<Paymenttype>(entity =>
            {
                entity.ToTable("PAYMENTTYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Namear)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NAMEAR");
            });

            modelBuilder.Entity<Pbcatcol>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PBCATCOL");

                entity.HasIndex(e => new { e.PbcTnam, e.PbcOwnr, e.PbcCnam }, "PBSYSCATCOLDICT_IDX")
                    .IsUnique();

                entity.Property(e => e.PbcBmap)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PBC_BMAP")
                    .IsFixedLength(true);

                entity.Property(e => e.PbcCase)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBC_CASE");

                entity.Property(e => e.PbcCid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBC_CID");

                entity.Property(e => e.PbcCmnt)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("PBC_CMNT");

                entity.Property(e => e.PbcCnam)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PBC_CNAM");

                entity.Property(e => e.PbcEdit)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("PBC_EDIT");

                entity.Property(e => e.PbcHdr)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("PBC_HDR");

                entity.Property(e => e.PbcHght)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBC_HGHT");

                entity.Property(e => e.PbcHpos)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBC_HPOS");

                entity.Property(e => e.PbcInit)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("PBC_INIT");

                entity.Property(e => e.PbcJtfy)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBC_JTFY");

                entity.Property(e => e.PbcLabl)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("PBC_LABL");

                entity.Property(e => e.PbcLpos)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBC_LPOS");

                entity.Property(e => e.PbcMask)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("PBC_MASK");

                entity.Property(e => e.PbcOwnr)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PBC_OWNR");

                entity.Property(e => e.PbcPtrn)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("PBC_PTRN");

                entity.Property(e => e.PbcTag)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("PBC_TAG");

                entity.Property(e => e.PbcTid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBC_TID");

                entity.Property(e => e.PbcTnam)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PBC_TNAM");

                entity.Property(e => e.PbcWdth)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBC_WDTH");
            });

            modelBuilder.Entity<Pbcatedt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PBCATEDT");

                entity.HasIndex(e => new { e.PbeName, e.PbeSeqn }, "PBSYSPBE_IDX")
                    .IsUnique();

                entity.Property(e => e.PbeCntr)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBE_CNTR");

                entity.Property(e => e.PbeEdit)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("PBE_EDIT");

                entity.Property(e => e.PbeFlag)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBE_FLAG");

                entity.Property(e => e.PbeName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PBE_NAME");

                entity.Property(e => e.PbeSeqn)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBE_SEQN");

                entity.Property(e => e.PbeType)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBE_TYPE");

                entity.Property(e => e.PbeWork)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("PBE_WORK");
            });

            modelBuilder.Entity<Pbcatfmt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PBCATFMT");

                entity.HasIndex(e => e.PbfName, "PBSYSCATFRMTS_IDX")
                    .IsUnique();

                entity.Property(e => e.PbfCntr)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBF_CNTR");

                entity.Property(e => e.PbfFrmt)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("PBF_FRMT");

                entity.Property(e => e.PbfName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PBF_NAME");

                entity.Property(e => e.PbfType)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBF_TYPE");
            });

            modelBuilder.Entity<Pbcattbl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PBCATTBL");

                entity.HasIndex(e => new { e.PbtTnam, e.PbtOwnr }, "PBSYSCATPBT_IDX")
                    .IsUnique();

                entity.Property(e => e.PbdFchr)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBD_FCHR");

                entity.Property(e => e.PbdFfce)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("PBD_FFCE");

                entity.Property(e => e.PbdFhgt)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBD_FHGT");

                entity.Property(e => e.PbdFitl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PBD_FITL")
                    .IsFixedLength(true);

                entity.Property(e => e.PbdFptc)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBD_FPTC");

                entity.Property(e => e.PbdFunl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PBD_FUNL")
                    .IsFixedLength(true);

                entity.Property(e => e.PbdFwgt)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBD_FWGT");

                entity.Property(e => e.PbhFchr)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBH_FCHR");

                entity.Property(e => e.PbhFfce)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("PBH_FFCE");

                entity.Property(e => e.PbhFhgt)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBH_FHGT");

                entity.Property(e => e.PbhFitl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PBH_FITL")
                    .IsFixedLength(true);

                entity.Property(e => e.PbhFptc)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBH_FPTC");

                entity.Property(e => e.PbhFunl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PBH_FUNL")
                    .IsFixedLength(true);

                entity.Property(e => e.PbhFwgt)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBH_FWGT");

                entity.Property(e => e.PblFchr)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBL_FCHR");

                entity.Property(e => e.PblFfce)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("PBL_FFCE");

                entity.Property(e => e.PblFhgt)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBL_FHGT");

                entity.Property(e => e.PblFitl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PBL_FITL")
                    .IsFixedLength(true);

                entity.Property(e => e.PblFptc)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBL_FPTC");

                entity.Property(e => e.PblFunl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PBL_FUNL")
                    .IsFixedLength(true);

                entity.Property(e => e.PblFwgt)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBL_FWGT");

                entity.Property(e => e.PbtCmnt)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("PBT_CMNT");

                entity.Property(e => e.PbtOwnr)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PBT_OWNR");

                entity.Property(e => e.PbtTid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBT_TID");

                entity.Property(e => e.PbtTnam)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PBT_TNAM");
            });

            modelBuilder.Entity<Pbcatvld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PBCATVLD");

                entity.HasIndex(e => e.PbvName, "PBSYSCATVLDS_IDX")
                    .IsUnique();

                entity.Property(e => e.PbvCntr)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBV_CNTR");

                entity.Property(e => e.PbvMsg)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("PBV_MSG");

                entity.Property(e => e.PbvName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PBV_NAME");

                entity.Property(e => e.PbvType)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PBV_TYPE");

                entity.Property(e => e.PbvVald)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("PBV_VALD");
            });

            modelBuilder.Entity<PenaltyCriticalDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PENALTY_CRITICAL_DATES");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTID");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<Perinstalmentgrossleftview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PERINSTALMENTGROSSLEFTVIEW");

                entity.Property(e => e.Confirmed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONFIRMED");

                entity.Property(e => e.Deducreasonsval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEDUCREASONSVAL");

                entity.Property(e => e.Earlypayment)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYPAYMENT");

                entity.Property(e => e.Factor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACTOR");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Grossleft)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSLEFT");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Hstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("HSTAMP");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instalmentvalue)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INSTALMENTVALUE");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.Payedfixedval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYEDFIXEDVAL");

                entity.Property(e => e.Penaltyexemptionrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYEXEMPTIONRATE");

                entity.Property(e => e.Punich)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PUNICH");
            });

            modelBuilder.Entity<Perinstalmentgrossleftview2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PERINSTALMENTGROSSLEFTVIEW2");

                entity.Property(e => e.Confirmed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONFIRMED");

                entity.Property(e => e.Deducreasonsval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEDUCREASONSVAL");

                entity.Property(e => e.Earlypayment)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYPAYMENT");

                entity.Property(e => e.Factor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACTOR");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Grossleft)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSLEFT");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instalmentvalue)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INSTALMENTVALUE");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.Payedfixedval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYEDFIXEDVAL");

                entity.Property(e => e.Penaltyexemptionrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYEXEMPTIONRATE");

                entity.Property(e => e.Punich)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PUNICH");
            });

            modelBuilder.Entity<Perinstalmentgrossleftviewmod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PERINSTALMENTGROSSLEFTVIEWMOD");

                entity.Property(e => e.Cashpayed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASHPAYED");

                entity.Property(e => e.Confirmed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONFIRMED");

                entity.Property(e => e.Deducreasonsval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEDUCREASONSVAL");

                entity.Property(e => e.Earlypayment)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYPAYMENT");

                entity.Property(e => e.Factor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACTOR");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Grossleft)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSLEFT");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Hstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("HSTAMP");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instalmentvalue)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INSTALMENTVALUE");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.Payedfixedval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYEDFIXEDVAL");

                entity.Property(e => e.Penaltyexemptionrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYEXEMPTIONRATE");

                entity.Property(e => e.Punich)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PUNICH");
            });

            modelBuilder.Entity<Period>(entity =>
            {
                entity.HasKey(e => e.Period1)
                    .HasName("PERIOD_PK");

                entity.ToTable("PERIOD");

                entity.Property(e => e.Period1)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.FromDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.OpenClose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OPEN_CLOSE")
                    .IsFixedLength(true);

                entity.Property(e => e.ToDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TO_DATE");
            });

            modelBuilder.Entity<Permissoin>(entity =>
            {
                entity.HasKey(e => e.PerId)
                    .HasName("PERMISSOINS_PK");

                entity.ToTable("PERMISSOINS");

                entity.Property(e => e.PerId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PER_ID");

                entity.Property(e => e.Arabicname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ARABICNAME");

                entity.Property(e => e.Controltype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CONTROLTYPE");

                entity.Property(e => e.Englishname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENGLISHNAME");

                entity.Property(e => e.PageId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAGE_ID");

                entity.Property(e => e.PerName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PER_NAME");
            });

            modelBuilder.Entity<Perrentinstalmentgrossleftview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PERRENTINSTALMENTGROSSLEFTVIEW");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Grossleft)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSLEFT");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instalmentvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTVALUE");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");
            });

            modelBuilder.Entity<PortalCateg>(entity =>
            {
                entity.ToTable("PORTAL_CATEG");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Categname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CATEGNAME");
            });

            modelBuilder.Entity<PortalParameterValue>(entity =>
            {
                entity.ToTable("PORTAL_PARAMETER_VALUES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.ContractNo)
                    .HasPrecision(10)
                    .HasColumnName("CONTRACT_NO");

                entity.Property(e => e.FromCostCenter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("FROM_COST_CENTER");

                entity.Property(e => e.FromDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.FromDestination)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FROM_DESTINATION");

                entity.Property(e => e.FromItem)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("FROM_ITEM");

                entity.Property(e => e.FromRoom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FROM_ROOM");

                entity.Property(e => e.ToCostCenter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TO_COST_CENTER");

                entity.Property(e => e.ToDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TO_DATE");

                entity.Property(e => e.ToDestination)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TO_DESTINATION");

                entity.Property(e => e.ToItem)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TO_ITEM");

                entity.Property(e => e.ToRoom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TO_ROOM");
            });

            modelBuilder.Entity<PortalReport>(entity =>
            {
                entity.ToTable("PORTAL_REPORT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Databasename)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DATABASENAME");

                entity.Property(e => e.Reportfilename)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REPORTFILENAME");

                entity.Property(e => e.Reportname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REPORTNAME");

                entity.Property(e => e.Reportnamear)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REPORTNAMEAR");

                entity.Property(e => e.Roleid)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ROLEID");
            });

            modelBuilder.Entity<PortalReportparameter>(entity =>
            {
                entity.ToTable("PORTAL_REPORTPARAMETER");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.Bindedfeild)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BINDEDFEILD");

                entity.Property(e => e.Defaultvalue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULTVALUE");

                entity.Property(e => e.Dependablefield)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DEPENDABLEFIELD");

                entity.Property(e => e.Fieldorder)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FIELDORDER");

                entity.Property(e => e.Hide)
                    .HasPrecision(1)
                    .HasColumnName("HIDE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Parameterfieldname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PARAMETERFIELDNAME");

                entity.Property(e => e.Query)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QUERY");

                entity.Property(e => e.Reportdisplayname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REPORTDISPLAYNAME");

                entity.Property(e => e.Reportid)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("REPORTID");

                entity.Property(e => e.Reportparamname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REPORTPARAMNAME");

                entity.Property(e => e.Reportparamtype)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REPORTPARAMTYPE");
            });

            modelBuilder.Entity<PortalUsercategory>(entity =>
            {
                entity.ToTable("PORTAL_USERCATEGORY");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ID");

                entity.Property(e => e.Usercategname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("USERCATEGNAME");
            });

            modelBuilder.Entity<Postran>(entity =>
            {
                entity.ToTable("POSTRANS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Add1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ADD1");

                entity.Property(e => e.Add2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ADD2");

                entity.Property(e => e.Add3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ADD3");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Committed)
                    .HasPrecision(1)
                    .HasColumnName("COMMITTED");

                entity.Property(e => e.Ctaxdiscv)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CTAXDISCV");

                entity.Property(e => e.Ctaxdiscvperc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CTAXDISCVPERC");

                entity.Property(e => e.Ctaxv)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CTAXV");

                entity.Property(e => e.Ctaxvperc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CTAXVPERC");

                entity.Property(e => e.Discount2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DISCOUNT2");

                entity.Property(e => e.Discount2perc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DISCOUNT2PERC");

                entity.Property(e => e.Discountv)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DISCOUNTV");

                entity.Property(e => e.Discountvperc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DISCOUNTVPERC");

                entity.Property(e => e.Expcontrolno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EXPCONTROLNO");

                entity.Property(e => e.Expexpdate)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EXPEXPDATE");

                entity.Property(e => e.Explocation)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EXPLOCATION");

                entity.Property(e => e.Explotno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EXPLOTNO");

                entity.Property(e => e.Exppatchno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EXPPATCHNO");

                entity.Property(e => e.Expproddate)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EXPPRODDATE");

                entity.Property(e => e.Expprodno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EXPPRODNO");

                entity.Property(e => e.Expqtylist)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EXPQTYLIST");

                entity.Property(e => e.Expunitno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EXPUNITNO");

                entity.Property(e => e.FromCategory)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROM_CATEGORY");

                entity.Property(e => e.Fromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMID");

                entity.Property(e => e.Imei)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IMEI");

                entity.Property(e => e.Itembalanceafter)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMBALANCEAFTER");

                entity.Property(e => e.Itemcurrentbalance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCURRENTBALANCE");

                entity.Property(e => e.Itemgroupid)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMGROUPID");

                entity.Property(e => e.Itemitemid)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMITEMID");

                entity.Property(e => e.Itemprice)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMPRICE");

                entity.Property(e => e.Itemqty)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMQTY");

                entity.Property(e => e.Itemquantity)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMQUANTITY");

                entity.Property(e => e.Itemsaleratio2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMSALERATIO2");

                entity.Property(e => e.Itemsalevalue)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMSALEVALUE");

                entity.Property(e => e.Itemsalevalue2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMSALEVALUE2");

                entity.Property(e => e.Itemsecondprice)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMSECONDPRICE");

                entity.Property(e => e.Itemtaxvalue)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMTAXVALUE");

                entity.Property(e => e.Itemtotal)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMTOTAL");

                entity.Property(e => e.Itemtypes)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMTYPES");

                entity.Property(e => e.Itemtypesgroup)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMTYPESGROUP");

                entity.Property(e => e.Itemuniqueid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMUNIQUEID");

                entity.Property(e => e.Itemunit)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMUNIT");

                entity.Property(e => e.Modifiedby)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MODIFIEDBY");

                entity.Property(e => e.Moduleid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MODULEID");

                entity.Property(e => e.Note1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE1");

                entity.Property(e => e.Note10)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE10");

                entity.Property(e => e.Note2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE2");

                entity.Property(e => e.Note3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE3");

                entity.Property(e => e.Note4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE4");

                entity.Property(e => e.Note5)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE5");

                entity.Property(e => e.Note6)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE6");

                entity.Property(e => e.Note7)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE7");

                entity.Property(e => e.Note8)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE8");

                entity.Property(e => e.Note9)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE9");

                entity.Property(e => e.NotebookNum)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTEBOOK_NUM");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Staxperc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("STAXPERC");

                entity.Property(e => e.Staxv)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("STAXV");

                entity.Property(e => e.Staxvperc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("STAXVPERC");

                entity.Property(e => e.Timetrans)
                    .HasColumnType("DATE")
                    .HasColumnName("TIMETRANS");

                entity.Property(e => e.ToCategory)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TO_CATEGORY");

                entity.Property(e => e.Toid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOID");

                entity.Property(e => e.Transcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TRANSCODE");

                entity.Property(e => e.Transstatus)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TRANSSTATUS");

                entity.Property(e => e.Transuniqueid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSUNIQUEID");

                entity.Property(e => e.Userid)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<Preference>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.Prefcode, e.Preftype })
                    .HasName("SYS_C0018791");

                entity.ToTable("PREFERENCES");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.Property(e => e.Prefcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PREFCODE");

                entity.Property(e => e.Preftype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PREFTYPE");

                entity.Property(e => e.Value)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<PreferencesValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PREFERENCES_VALUES");

                entity.Property(e => e.Descr)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Prefcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PREFCODE");

                entity.Property(e => e.Preftype)
                    .HasPrecision(10)
                    .HasColumnName("PREFTYPE");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<Preferenceview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PREFERENCEVIEW");

                entity.Property(e => e.Descr)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Prefcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PREFCODE");

                entity.Property(e => e.Preftype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PREFTYPE");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.Property(e => e.Value)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<PriceListCustomer>(entity =>
            {
                entity.ToTable("PRICE_LIST_CUSTOMER");

                entity.HasIndex(e => new { e.CustomerId, e.PriceTypeId }, "PRICE_LIST_CUSTOMER_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.PriceTypeId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PRICE_TYPE_ID");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.PriceListCustomers)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("PRICE_LIST_CUSTOMER_R02");

                entity.HasOne(d => d.PriceType)
                    .WithMany(p => p.PriceListCustomers)
                    .HasForeignKey(d => d.PriceTypeId)
                    .HasConstraintName("PRICE_LIST_CUSTOMER_R01");
            });

            modelBuilder.Entity<PriceListCustomerO>(entity =>
            {
                entity.ToTable("PRICE_LIST_CUSTOMER_O");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensionsdetailsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONSDETAILS_ID");

                entity.Property(e => e.Percent)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERCENT");

                entity.Property(e => e.PriceListCustomerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICE_LIST_CUSTOMER_ID");

                entity.HasOne(d => d.Dimensionsdetails)
                    .WithMany(p => p.PriceListCustomerOs)
                    .HasForeignKey(d => d.DimensionsdetailsId)
                    .HasConstraintName("PRICE_LIST_CUSTOMER_O_R02");

                entity.HasOne(d => d.PriceListCustomer)
                    .WithMany(p => p.PriceListCustomerOs)
                    .HasForeignKey(d => d.PriceListCustomerId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("PRICE_LIST_CUSTOMER_O_R01");
            });

            modelBuilder.Entity<PriceListMaxQuantity>(entity =>
            {
                entity.ToTable("PRICE_LIST_MAX_QUANTITY");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Itemchangeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMCHANGEID");

                entity.Property(e => e.MainTypes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAIN_TYPES");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PART_ID");

                entity.Property(e => e.StoreAllsubcodesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ALLSUBCODES_ID");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUE");

                entity.HasOne(d => d.Itemchange)
                    .WithMany(p => p.PriceListMaxQuantities)
                    .HasForeignKey(d => d.Itemchangeid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("PRICE_LIST_MAX_QUANTITY_R01");

                entity.HasOne(d => d.MainTypesNavigation)
                    .WithMany(p => p.PriceListMaxQuantities)
                    .HasForeignKey(d => d.MainTypes)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("PRICE_LIST_MAX_QUANTITY_R03");

                entity.HasOne(d => d.StoreAllsubcodes)
                    .WithMany(p => p.PriceListMaxQuantities)
                    .HasForeignKey(d => d.StoreAllsubcodesId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("PRICE_LIST_MAX_QUANTITY_R02");
            });

            modelBuilder.Entity<PriceListType>(entity =>
            {
                entity.HasKey(e => e.PriceTypeId)
                    .HasName("PRICE_LIST_TYPE_PK");

                entity.ToTable("PRICE_LIST_TYPE");

                entity.HasIndex(e => e.PriceCode, "PRICE_LIST_TYPE_U01")
                    .IsUnique();

                entity.Property(e => e.PriceTypeId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PRICE_TYPE_ID");

                entity.Property(e => e.Descripation)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPATION");

                entity.Property(e => e.Engdesc)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("ENGDESC");

                entity.Property(e => e.PriceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRICE_CODE")
                    .HasDefaultValueSql("0");
            });

            modelBuilder.Entity<Printcheckscontrolsname>(entity =>
            {
                entity.ToTable("PRINTCHECKSCONTROLSNAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Controlidname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTROLIDNAME");

                entity.Property(e => e.Controlname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTROLNAME");
            });

            modelBuilder.Entity<Printcheckssetting>(entity =>
            {
                entity.ToTable("PRINTCHECKSSETTING");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Checklang)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CHECKLANG");

                entity.Property(e => e.Checksettingname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKSETTINGNAME");
            });

            modelBuilder.Entity<Printcheckssettingdetail>(entity =>
            {
                entity.ToTable("PRINTCHECKSSETTINGDETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Controlid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONTROLID");

                entity.Property(e => e.Controlleft)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONTROLLEFT");

                entity.Property(e => e.Controllines)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONTROLLINES");

                entity.Property(e => e.Controltop)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONTROLTOP");

                entity.Property(e => e.Controlvisiable)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONTROLVISIABLE");

                entity.Property(e => e.Controwidth)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONTROWIDTH");

                entity.Property(e => e.Printchecksettingid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRINTCHECKSETTINGID");

                entity.HasOne(d => d.Control)
                    .WithMany(p => p.Printcheckssettingdetails)
                    .HasForeignKey(d => d.Controlid)
                    .HasConstraintName("PRINTCHECKSSETTINGDETAILS_FK2");

                entity.HasOne(d => d.Printchecksetting)
                    .WithMany(p => p.Printcheckssettingdetails)
                    .HasForeignKey(d => d.Printchecksettingid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("PRINTCHECKSSETTINGDETAILS_FK1");
            });

            modelBuilder.Entity<Proceed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PROCEEDS");

                entity.Property(e => e.Flag)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("FLAG")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Producationformla>(entity =>
            {
                entity.ToTable("PRODUCATIONFORMLA");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Creationdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATIONDATE");

                entity.Property(e => e.Defaultitem)
                    .HasPrecision(1)
                    .HasColumnName("DEFAULTITEM");

                entity.Property(e => e.Formlacode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FORMLACODE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QTY");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ITEMS_ID");
            });

            modelBuilder.Entity<Productformladetail>(entity =>
            {
                entity.ToTable("PRODUCTFORMLADETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Factor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACTOR");

                entity.Property(e => e.Producatformlaid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRODUCATFORMLAID");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QTY");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITID");

                entity.HasOne(d => d.Producatformla)
                    .WithMany(p => p.Productformladetails)
                    .HasForeignKey(d => d.Producatformlaid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("PRODUCTFORMLADETAILS_R03");

                entity.HasOne(d => d.StoreItems)
                    .WithMany(p => p.Productformladetails)
                    .HasForeignKey(d => d.StoreItemsId)
                    .HasConstraintName("PRODUCTFORMLADETAILS_R01");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.Productformladetails)
                    .HasForeignKey(d => d.Unitid)
                    .HasConstraintName("PRODUCTFORMLADETAILS_R02");
            });

            modelBuilder.Entity<Productstage>(entity =>
            {
                entity.ToTable("PRODUCTSTAGES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Rank)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RANK");

                entity.Property(e => e.Rate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("RATE");

                entity.Property(e => e.StageId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAGE_ID");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.HasOne(d => d.Stage)
                    .WithMany(p => p.Productstages)
                    .HasForeignKey(d => d.StageId)
                    .HasConstraintName("PRODUCTSTAGES_R02");

                entity.HasOne(d => d.StoreItems)
                    .WithMany(p => p.Productstages)
                    .HasForeignKey(d => d.StoreItemsId)
                    .HasConstraintName("PRODUCTSTAGES_R01");
            });

            modelBuilder.Entity<Progprivilege>(entity =>
            {
                entity.HasKey(e => e.ProprivilegeId)
                    .HasName("PROPRIVILEGE_PK");

                entity.ToTable("PROGPRIVILEGE");

                entity.Property(e => e.ProprivilegeId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PROPRIVILEGE_ID");

                entity.Property(e => e.Createdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATEDATE")
                    .HasDefaultValueSql("sysdate");

                entity.Property(e => e.Flag)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FLAG");

                entity.Property(e => e.Menuid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MENUID");

                entity.Property(e => e.Projectno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PROJECTNO");

                entity.Property(e => e.UsergroupId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("USERGROUP_ID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.Usergroup)
                    .WithMany(p => p.Progprivileges)
                    .HasForeignKey(d => d.UsergroupId)
                    .HasConstraintName("PROGPRIVILEGE_GROUPS_FK2");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Progprivileges)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("PROGPRIVILEGE_USERS_FK1");
            });

            modelBuilder.Entity<Receiptpapersforinstalment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RECEIPTPAPERSFORINSTALMENT");

                entity.Property(e => e.Aname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Fdistaname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FDISTANAME");

                entity.Property(e => e.Fdistename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FDISTENAME");

                entity.Property(e => e.Fdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FDISTID");

                entity.Property(e => e.Financemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEMID");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Grossval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("GROSSVAL");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Netval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("NETVAL");

                entity.Property(e => e.Serialename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALENAME");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.Shortname)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SHORTNAME");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");

                entity.Property(e => e.Trnsno)
                    .HasPrecision(15)
                    .HasColumnName("TRNSNO");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<Receiptpapersforinstalmentmod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RECEIPTPAPERSFORINSTALMENTMOD");

                entity.Property(e => e.Aname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Fdistaname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FDISTANAME");

                entity.Property(e => e.Fdistcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FDISTCODE");

                entity.Property(e => e.Fdistename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FDISTENAME");

                entity.Property(e => e.Fdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FDISTID");

                entity.Property(e => e.Financemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEMID");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Grossval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("GROSSVAL");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Netval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("NETVAL");

                entity.Property(e => e.Serialename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALENAME");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.Shortname)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SHORTNAME");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");

                entity.Property(e => e.Trnsno)
                    .HasPrecision(15)
                    .HasColumnName("TRNSNO");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<Relayto>(entity =>
            {
                entity.ToTable("RELAYTO");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Rentadddeducreason>(entity =>
            {
                entity.ToTable("RENTADDDEDUCREASONS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Affectsalevalue)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("AFFECTSALEVALUE")
                    .HasDefaultValueSql("1                     ");

                entity.Property(e => e.Ename)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Factor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACTOR")
                    .HasDefaultValueSql("1                     ");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NAME");
            });

            modelBuilder.Entity<Rentform>(entity =>
            {
                entity.ToTable("RENTFORM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Actualenddate)
                    .HasColumnType("DATE")
                    .HasColumnName("ACTUALENDDATE");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Canceldate)
                    .HasColumnType("DATE")
                    .HasColumnName("CANCELDATE");

                entity.Property(e => e.Cancelreason)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CANCELREASON");

                entity.Property(e => e.Cancelrent)
                    .HasPrecision(1)
                    .HasColumnName("CANCELRENT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Director)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIRECTOR");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Eownername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EOWNERNAME");

                entity.Property(e => e.Financeguardian)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCEGUARDIAN");

                entity.Property(e => e.Formenddate)
                    .HasColumnType("DATE")
                    .HasColumnName("FORMENDDATE");

                entity.Property(e => e.Formstartdate)
                    .HasColumnType("DATE")
                    .HasColumnName("FORMSTARTDATE");

                entity.Property(e => e.Formstatustypes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMSTATUSTYPES");

                entity.Property(e => e.Fromdate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROMDATE");

                entity.Property(e => e.Issuedate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUEDATE");

                entity.Property(e => e.Itemactivitytype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMACTIVITYTYPE");

                entity.Property(e => e.Ownername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERNAME");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");

                entity.Property(e => e.Renttype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTTYPE");

                entity.Property(e => e.Staff1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF1");

                entity.Property(e => e.Staff2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF2");

                entity.Property(e => e.Submitdate)
                    .HasColumnType("DATE")
                    .HasColumnName("SUBMITDATE");

                entity.Property(e => e.Supervisor1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUPERVISOR1");

                entity.Property(e => e.Supervisor2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUPERVISOR2");

                entity.Property(e => e.Systemdate)
                    .HasColumnType("DATE")
                    .HasColumnName("SYSTEMDATE");

                entity.Property(e => e.Taxvalue)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TAXVALUE");

                entity.Property(e => e.Todate)
                    .HasColumnType("DATE")
                    .HasColumnName("TODATE");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.RentformBranches)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("RENTFORM_FK1");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Rentforms)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("RENTFORM_FK2");

                entity.HasOne(d => d.FinanceguardianNavigation)
                    .WithMany(p => p.Rentforms)
                    .HasForeignKey(d => d.Financeguardian)
                    .HasConstraintName("RENTFORM_FK4");

                entity.HasOne(d => d.FormstatustypesNavigation)
                    .WithMany(p => p.RentformFormstatustypesNavigations)
                    .HasForeignKey(d => d.Formstatustypes)
                    .HasConstraintName("RENTFORM_FK3");

                entity.HasOne(d => d.ItemactivitytypeNavigation)
                    .WithMany(p => p.RentformItemactivitytypeNavigations)
                    .HasForeignKey(d => d.Itemactivitytype)
                    .HasConstraintName("RENTFORM_FK5");

                entity.HasOne(d => d.Period)
                    .WithMany(p => p.Rentforms)
                    .HasForeignKey(d => d.Periodid)
                    .HasConstraintName("RENTFORM_R06");
            });

            modelBuilder.Entity<RentformFinance>(entity =>
            {
                entity.ToTable("RENTFORM_FINANCE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Installmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALLMENTID");

                entity.Property(e => e.Paidamount)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("PAIDAMOUNT");

                entity.Property(e => e.Paytype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PAYTYPE");

                entity.Property(e => e.Trnasid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNASID");

                entity.HasOne(d => d.Check)
                    .WithMany(p => p.RentformFinances)
                    .HasForeignKey(d => d.Checkid)
                    .HasConstraintName("RENTFORM_FINANCE_R03");

                entity.HasOne(d => d.Installment)
                    .WithMany(p => p.RentformFinances)
                    .HasForeignKey(d => d.Installmentid)
                    .HasConstraintName("RENTFORM_FINANCE_R02");

                entity.HasOne(d => d.Trnas)
                    .WithMany(p => p.RentformFinances)
                    .HasForeignKey(d => d.Trnasid)
                    .HasConstraintName("RENTFORM_FINANCE_R01");
            });

            modelBuilder.Entity<RentformFinanceView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RENTFORM_FINANCE_VIEW");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Installmentcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INSTALLMENTCODE");

                entity.Property(e => e.Installmentdate)
                    .HasColumnType("DATE")
                    .HasColumnName("INSTALLMENTDATE");

                entity.Property(e => e.Installmentvalue)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("INSTALLMENTVALUE");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Paidval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAIDVAL");

                entity.Property(e => e.Remainamount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REMAINAMOUNT");

                entity.Property(e => e.StoreAllsubcodesname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STORE_ALLSUBCODESNAME");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<RentformFinanceViewMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RENTFORM_FINANCE_VIEW_MOD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Installmentcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INSTALLMENTCODE");

                entity.Property(e => e.Installmentdate)
                    .HasColumnType("DATE")
                    .HasColumnName("INSTALLMENTDATE");

                entity.Property(e => e.Installmentvalue)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("INSTALLMENTVALUE");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Paidval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAIDVAL");

                entity.Property(e => e.Remainamount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REMAINAMOUNT");

                entity.Property(e => e.StoreAllsubcodesname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STORE_ALLSUBCODESNAME");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<RentformInstitemcomp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RENTFORM_INSTITEMCOMP");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemcompid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMCOMPID");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMVCODE");

                entity.Property(e => e.Madatorename)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MADATORENAME");

                entity.Property(e => e.Uintsize)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("UINTSIZE");

                entity.Property(e => e.Unitfloor)
                    .HasPrecision(15)
                    .HasColumnName("UNITFLOOR");

                entity.Property(e => e.Unitno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UNITNO");

                entity.Property(e => e.Unitrooms)
                    .HasPrecision(15)
                    .HasColumnName("UNITROOMS");

                entity.Property(e => e.Unitscount)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UNITSCOUNT");
            });

            modelBuilder.Entity<RentformInstitemcompMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RENTFORM_INSTITEMCOMP_MOD");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemcompid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMCOMPID");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMVCODE");

                entity.Property(e => e.Madatorename)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MADATORENAME");

                entity.Property(e => e.Madatorenname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MADATORENNAME");

                entity.Property(e => e.Uintsize)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("UINTSIZE");

                entity.Property(e => e.Unitfloor)
                    .HasPrecision(15)
                    .HasColumnName("UNITFLOOR");

                entity.Property(e => e.Unitno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UNITNO");

                entity.Property(e => e.Unitrooms)
                    .HasPrecision(15)
                    .HasColumnName("UNITROOMS");

                entity.Property(e => e.Unitscount)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UNITSCOUNT");
            });

            modelBuilder.Entity<RentformInstitemcompv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RENTFORM_INSTITEMCOMPV");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemcompid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMCOMPID");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMVCODE");

                entity.Property(e => e.Madatorename)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MADATORENAME");

                entity.Property(e => e.Madatoreyenname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MADATOREYENNAME");

                entity.Property(e => e.Uintsize)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("UINTSIZE");

                entity.Property(e => e.Unitcount)
                    .HasPrecision(15)
                    .HasColumnName("UNITCOUNT");

                entity.Property(e => e.Unitfloor)
                    .HasPrecision(15)
                    .HasColumnName("UNITFLOOR");

                entity.Property(e => e.Unitno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UNITNO");

                entity.Property(e => e.Unitrentamount)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("UNITRENTAMOUNT");

                entity.Property(e => e.Unitrooms)
                    .HasPrecision(15)
                    .HasColumnName("UNITROOMS");

                entity.Property(e => e.Unitscount)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UNITSCOUNT");
            });

            modelBuilder.Entity<Rentformcompositeitem>(entity =>
            {
                entity.ToTable("RENTFORMCOMPOSITEITEM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Composititemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITITEMID");

                entity.Property(e => e.Rentformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTFORMID");
            });

            modelBuilder.Entity<Rentformdocattachment>(entity =>
            {
                entity.ToTable("RENTFORMDOCATTACHMENTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Dateadded)
                    .HasColumnType("DATE")
                    .HasColumnName("DATEADDED");

                entity.Property(e => e.Docattachmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOCATTACHMENTID");

                entity.Property(e => e.Docname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNAME");

                entity.Property(e => e.Docuniquename)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DOCUNIQUENAME");

                entity.Property(e => e.Rentformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTFORMID");

                entity.HasOne(d => d.Docattachment)
                    .WithMany(p => p.Rentformdocattachments)
                    .HasForeignKey(d => d.Docattachmentid)
                    .HasConstraintName("RENTFORMDOCATTACHMENTS_R02");

                entity.HasOne(d => d.Rentform)
                    .WithMany(p => p.Rentformdocattachments)
                    .HasForeignKey(d => d.Rentformid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("RENTFORMDOCATTACHMENTS_R01");
            });

            modelBuilder.Entity<Rentformrenew>(entity =>
            {
                entity.ToTable("RENTFORMRENEW");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENTRYDATE");

                entity.Property(e => e.Fromdate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROMDATE");

                entity.Property(e => e.Isrenew)
                    .HasPrecision(1)
                    .HasColumnName("ISRENEW");

                entity.Property(e => e.Rentformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTFORMID");

                entity.Property(e => e.Todate)
                    .HasColumnType("DATE")
                    .HasColumnName("TODATE");

                entity.HasOne(d => d.Rentform)
                    .WithMany(p => p.Rentformrenews)
                    .HasForeignKey(d => d.Rentformid)
                    .HasConstraintName("RENTFORMRENEW_R01");
            });

            modelBuilder.Entity<Rentformrenewdetail>(entity =>
            {
                entity.ToTable("RENTFORMRENEWDETAIL");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Instcompid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCOMPID");

                entity.Property(e => e.Rentformrenewid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTFORMRENEWID");

                entity.Property(e => e.Unitcount)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("UNITCOUNT");

                entity.Property(e => e.Unitrentamount)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("UNITRENTAMOUNT");

                entity.HasOne(d => d.Instcomp)
                    .WithMany(p => p.Rentformrenewdetails)
                    .HasForeignKey(d => d.Instcompid)
                    .HasConstraintName("RENTFORMRENEWDETAIL_R02");

                entity.HasOne(d => d.Rentformrenew)
                    .WithMany(p => p.Rentformrenewdetails)
                    .HasForeignKey(d => d.Rentformrenewid)
                    .HasConstraintName("RENTFORMRENEWDETAIL_R01");
            });

            modelBuilder.Entity<Rentinsatlementsadddeduc>(entity =>
            {
                entity.ToTable("RENTINSATLEMENTSADDDEDUC");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Rentadddeducreasonsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTADDDEDUCREASONSID");

                entity.Property(e => e.Rentformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTFORMID");

                entity.Property(e => e.Rentinstalmenttypesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTINSTALMENTTYPESID");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUE");

                entity.HasOne(d => d.Rentform)
                    .WithMany(p => p.Rentinsatlementsadddeducs)
                    .HasForeignKey(d => d.Rentformid)
                    .HasConstraintName("RENTINSATLEMENTSADDDEDUC_R01");
            });

            modelBuilder.Entity<Rentinstalmentsm>(entity =>
            {
                entity.ToTable("RENTINSTALMENTSM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Advance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADVANCE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Advancerefundvalperinst)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADVANCEREFUNDVALPERINST");

                entity.Property(e => e.Annualincrease)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ANNUALINCREASE");

                entity.Property(e => e.Annualincreasetype)
                    .HasMaxLength(1)
                    .HasColumnName("ANNUALINCREASETYPE");

                entity.Property(e => e.Anuualtype)
                    .HasMaxLength(1)
                    .HasColumnName("ANUUALTYPE");

                entity.Property(e => e.Instalmentenddate)
                    .HasColumnType("DATE")
                    .HasColumnName("INSTALMENTENDDATE");

                entity.Property(e => e.Instalmentsperiod)
                    .HasMaxLength(1)
                    .HasColumnName("INSTALMENTSPERIOD")
                    .HasDefaultValueSql("'M'");

                entity.Property(e => e.Instalmentstartdate)
                    .HasColumnType("DATE")
                    .HasColumnName("INSTALMENTSTARTDATE");

                entity.Property(e => e.Insurance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSURANCE");

                entity.Property(e => e.Insuranceinststratdate)
                    .HasColumnType("DATE")
                    .HasColumnName("INSURANCEINSTSTRATDATE");

                entity.Property(e => e.Insurancerefundvalperinst)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSURANCEREFUNDVALPERINST");

                entity.Property(e => e.Maxtotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAXTOTAL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Notes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Paymentperiod)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYMENTPERIOD");

                entity.Property(e => e.Rentformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTFORMID");

                entity.Property(e => e.Rentinstalmenttypesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTINSTALMENTTYPESID");

                entity.Property(e => e.Rentperiodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTPERIODID");

                entity.Property(e => e.Val)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VAL");

                entity.HasOne(d => d.Rentform)
                    .WithMany(p => p.Rentinstalmentsms)
                    .HasForeignKey(d => d.Rentformid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("RENTINSTALMENTSM_FK1");

                entity.HasOne(d => d.Rentinstalmenttypes)
                    .WithMany(p => p.Rentinstalmentsms)
                    .HasForeignKey(d => d.Rentinstalmenttypesid)
                    .HasConstraintName("RENTINSTALMENTSM_FK3");

                entity.HasOne(d => d.Rentperiod)
                    .WithMany(p => p.Rentinstalmentsms)
                    .HasForeignKey(d => d.Rentperiodid)
                    .HasConstraintName("RENTINSTALMENTSM_FK2");
            });

            modelBuilder.Entity<Rentinstalmentso>(entity =>
            {
                entity.ToTable("RENTINSTALMENTSO");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Notes)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Rentformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTFORMID");

                entity.Property(e => e.Rentinstalmentsmid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTINSTALMENTSMID");

                entity.Property(e => e.Rentinstalmenttypesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTINSTALMENTTYPESID");

                entity.Property(e => e.Tax)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("TAX");

                entity.Property(e => e.Val)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VAL");

                entity.HasOne(d => d.Rentform)
                    .WithMany(p => p.Rentinstalmentsos)
                    .HasForeignKey(d => d.Rentformid)
                    .HasConstraintName("RENTINSTALMENTSO_R01");

                entity.HasOne(d => d.Rentinstalmentsm)
                    .WithMany(p => p.Rentinstalmentsos)
                    .HasForeignKey(d => d.Rentinstalmentsmid)
                    .HasConstraintName("RENTINSTALMENTSO_FK2");
            });

            modelBuilder.Entity<Rentinstalmenttype>(entity =>
            {
                entity.ToTable("RENTINSTALMENTTYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NAME");
            });

            modelBuilder.Entity<Rentperiod>(entity =>
            {
                entity.ToTable("RENTPERIOD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Endrentperiod)
                    .HasColumnType("DATE")
                    .HasColumnName("ENDRENTPERIOD");

                entity.Property(e => e.Startrentperiod)
                    .HasColumnType("DATE")
                    .HasColumnName("STARTRENTPERIOD");
            });

            modelBuilder.Entity<RepcatRepcolumn>(entity =>
            {
                entity.HasKey(e => new { e.Sname, e.Oname, e.Type, e.Cname })
                    .HasName("REPCAT$_REPCOLUMN_PK");

                entity.ToTable("REPCAT$_REPCOLUMN");

                entity.Property(e => e.Sname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SNAME");

                entity.Property(e => e.Oname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ONAME");

                entity.Property(e => e.Type)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TYPE");

                entity.Property(e => e.Cname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CNAME");

                entity.Property(e => e.Charsetform)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHARSETFORM");

                entity.Property(e => e.Charsetid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHARSETID");

                entity.Property(e => e.Clength)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CLENGTH");

                entity.Property(e => e.Ctype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTYPE");

                entity.Property(e => e.CtypeName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CTYPE_NAME");

                entity.Property(e => e.CtypeOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CTYPE_OWNER");

                entity.Property(e => e.Flag)
                    .HasMaxLength(2)
                    .HasColumnName("FLAG")
                    .HasDefaultValueSql("'0000'");

                entity.Property(e => e.Hashcode)
                    .HasMaxLength(17)
                    .HasColumnName("HASHCODE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Lcname)
                    .IsUnicode(false)
                    .HasColumnName("LCNAME");

                entity.Property(e => e.Length)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LENGTH");

                entity.Property(e => e.Null)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NULL$");

                entity.Property(e => e.Pos)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POS");

                entity.Property(e => e.Precision)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRECISION#");

                entity.Property(e => e.Property)
                    .HasMaxLength(4)
                    .HasColumnName("PROPERTY")
                    .HasDefaultValueSql("'00000000'");

                entity.Property(e => e.Scale)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SCALE");

                entity.Property(e => e.Toid).HasColumnName("TOID");

                entity.Property(e => e.Top)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TOP");

                entity.Property(e => e.Version)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VERSION#");
            });

            modelBuilder.Entity<Reschedule>(entity =>
            {
                entity.ToTable("RESCHEDULE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkid2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID2");

                entity.Property(e => e.Reschedvalue)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("RESCHEDVALUE");

                entity.Property(e => e.Trnsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSID");

                entity.HasOne(d => d.Check)
                    .WithMany(p => p.RescheduleChecks)
                    .HasForeignKey(d => d.Checkid)
                    .HasConstraintName("RESCHEDULE_FK1");

                entity.HasOne(d => d.Checkid2Navigation)
                    .WithMany(p => p.RescheduleCheckid2Navigations)
                    .HasForeignKey(d => d.Checkid2)
                    .HasConstraintName("RESCHEDULE_FK3");

                entity.HasOne(d => d.Trns)
                    .WithMany(p => p.Reschedules)
                    .HasForeignKey(d => d.Trnsid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("RESCHEDULE_FK2");
            });

            modelBuilder.Entity<Reservationitem>(entity =>
            {
                entity.ToTable("RESERVATIONITEMS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Reservedqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RESERVEDQTY");

                entity.Property(e => e.StoreAllCodeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ALL_CODEID");

                entity.Property(e => e.StoreItemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ITEM_ID");

                entity.Property(e => e.StoreTrnOid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_TRN_OID");

                entity.HasOne(d => d.StoreAllCode)
                    .WithMany(p => p.Reservationitems)
                    .HasForeignKey(d => d.StoreAllCodeid)
                    .HasConstraintName("RESERVATIONITEMS_R03");

                entity.HasOne(d => d.StoreItem)
                    .WithMany(p => p.Reservationitems)
                    .HasForeignKey(d => d.StoreItemId)
                    .HasConstraintName("RESERVATIONITEMS_R02");

                entity.HasOne(d => d.StoreTrnO)
                    .WithMany(p => p.Reservationitems)
                    .HasForeignKey(d => d.StoreTrnOid)
                    .HasConstraintName("RESERVATIONITEMS_R01");
            });

            modelBuilder.Entity<ReservedUnit>(entity =>
            {
                entity.ToTable("RESERVED_UNITS");

                entity.HasIndex(e => e.Institemid, "RESERVED_UNITS1");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Active)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("'1'\n");

                entity.Property(e => e.AreservedFor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ARESERVED_FOR");

                entity.Property(e => e.Campcode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CAMPCODE");

                entity.Property(e => e.Campresource)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CAMPRESOURCE");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Depositvalue)
                    .HasColumnType("NUMBER(15,5)")
                    .HasColumnName("DEPOSITVALUE");

                entity.Property(e => e.Director)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR");

                entity.Property(e => e.EreservedFor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ERESERVED_FOR");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Instprogid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGID");

                entity.Property(e => e.RegIdFromcrm)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REG_ID_FROMCRM");

                entity.Property(e => e.Rep)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REP");

                entity.Property(e => e.Rep2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REP2");

                entity.Property(e => e.Reservebydeposit)
                    .HasPrecision(1)
                    .HasColumnName("RESERVEBYDEPOSIT");

                entity.Property(e => e.ReservedBy)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RESERVED_BY");

                entity.Property(e => e.Todate)
                    .HasColumnType("DATE")
                    .HasColumnName("TODATE");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.CampcodeNavigation)
                    .WithMany(p => p.ReservedUnitCampcodeNavigations)
                    .HasForeignKey(d => d.Campcode)
                    .HasConstraintName("RESERVED_UNITS_R07");

                entity.HasOne(d => d.CampresourceNavigation)
                    .WithMany(p => p.ReservedUnitCampresourceNavigations)
                    .HasForeignKey(d => d.Campresource)
                    .HasConstraintName("RESERVED_UNITS_R08");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.ReservedUnits)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("RESERVED_UNITS_FK04");

                entity.HasOne(d => d.Instprog)
                    .WithMany(p => p.ReservedUnits)
                    .HasForeignKey(d => d.Instprogid)
                    .HasConstraintName("RESERVED_UNITS_R09");

                entity.HasOne(d => d.RepNavigation)
                    .WithMany(p => p.ReservedUnits)
                    .HasForeignKey(d => d.Rep)
                    .HasConstraintName("RESERVED_UNITS_R05");

                entity.HasOne(d => d.Rep2Navigation)
                    .WithMany(p => p.ReservedUnits)
                    .HasForeignKey(d => d.Rep2)
                    .HasConstraintName("RESERVED_UNITS_R06");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ReservedUnits)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("RESERVED_UNITS_FK2");
            });

            modelBuilder.Entity<Reservedunitsview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RESERVEDUNITSVIEW");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Indatenow)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATENOW");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.ReservedBy)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RESERVED_BY");
            });

            modelBuilder.Entity<Returnfordefaultitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RETURNFORDEFAULTITEM");

                entity.Property(e => e.Aname)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Concentration)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CONCENTRATION");

                entity.Property(e => e.Defaultitemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEFAULTITEMID");

                entity.Property(e => e.IPurchPrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("I_PURCH_PRICE");

                entity.Property(e => e.StoreAllsubcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLSUBCODES_ID");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ITEMS_ID");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("ROLES");

                entity.Property(e => e.RoleId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ROLE_ID");

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_NAME");
            });

            modelBuilder.Entity<RolesPage>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.PageId })
                    .HasName("ROLES_PAGES_PK");

                entity.ToTable("ROLES_PAGES");

                entity.Property(e => e.RoleId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ROLE_ID");

                entity.Property(e => e.PageId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAGE_ID");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RolesPages)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("ROLES_PAGES_R01");
            });

            modelBuilder.Entity<Saleadddeducreason>(entity =>
            {
                entity.ToTable("SALEADDDEDUCREASONS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AffectSaleValue)
                    .HasMaxLength(1)
                    .HasColumnName("AFFECT_SALE_VALUE")
                    .HasDefaultValueSql("1\n");

                entity.Property(e => e.Defaultvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEFAULTVALUE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Factor)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FACTOR")
                    .HasDefaultValueSql("-1");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("NAME");

                entity.Property(e => e.Ontotalform)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ONTOTALFORM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Valueorratio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO");
            });

            modelBuilder.Entity<Saleform>(entity =>
            {
                entity.ToTable("SALEFORM");

                entity.HasIndex(e => e.Allowadjustinstallment, "ALLOWADJUSTINSTINDEX");

                entity.HasIndex(e => e.BranchId, "BRANCH_ID_INDX");

                entity.HasIndex(e => e.FinanceGuardian, "FINANCE_GUARDIAN_INDX");

                entity.HasIndex(e => e.IssueDate, "ISSUE_DATEINDX");

                entity.HasIndex(e => e.DocNo, "SALEFORM_U01")
                    .IsUnique();

                entity.HasIndex(e => e.Staff1, "STAFF1_INDX");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Allowadjustinstallment)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLOWADJUSTINSTALLMENT")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTSVALUE2");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Campcode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CAMPCODE");

                entity.Property(e => e.Campresource)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CAMPRESOURCE");

                entity.Property(e => e.Contractsigndate)
                    .HasColumnType("DATE")
                    .HasColumnName("CONTRACTSIGNDATE");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Deliverbymonth)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DELIVERBYMONTH");

                entity.Property(e => e.Director)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIRECTOR");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Eownername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EOWNERNAME");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURESVALUE2");

                entity.Property(e => e.FinanceGuardian)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCE_GUARDIAN");

                entity.Property(e => e.Formapproved)
                    .HasPrecision(1)
                    .HasColumnName("FORMAPPROVED")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Formstatustypes)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FORMSTATUSTYPES");

                entity.Property(e => e.Formtype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMTYPE");

                entity.Property(e => e.HandoverDateActual)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_ACTUAL");

                entity.Property(e => e.HandoverDateExpected)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_EXPECTED");

                entity.Property(e => e.HandoverDateIn)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_IN");

                entity.Property(e => e.Instprogram)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAM");

                entity.Property(e => e.IsReplacement)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_REPLACEMENT");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Itemactivitytype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMACTIVITYTYPE");

                entity.Property(e => e.NoOfInstalmentMonths)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NO_OF_INSTALMENT_MONTHS");

                entity.Property(e => e.Orgsaleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORGSALEFORMID");

                entity.Property(e => e.Ownername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERNAME");

                entity.Property(e => e.Punich)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PUNICH");

                entity.Property(e => e.Receivingcontract)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RECEIVINGCONTRACT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Rep2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REP2");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICESVALUE2");

                entity.Property(e => e.Staff1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF1");

                entity.Property(e => e.Staff2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF2");

                entity.Property(e => e.Supervisor1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUPERVISOR1");

                entity.Property(e => e.Supervisor2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUPERVISOR2");

                entity.Property(e => e.Systemdate)
                    .HasColumnType("DATE")
                    .HasColumnName("SYSTEMDATE");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Valueofbenefits)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUEOFBENEFITS");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.SaleformBranches)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("SALEFORM_FK1");

                entity.HasOne(d => d.CampcodeNavigation)
                    .WithMany(p => p.SaleformCampcodeNavigations)
                    .HasForeignKey(d => d.Campcode)
                    .HasConstraintName("SALEFORM_R08");

                entity.HasOne(d => d.CampresourceNavigation)
                    .WithMany(p => p.SaleformCampresourceNavigations)
                    .HasForeignKey(d => d.Campresource)
                    .HasConstraintName("SYS_C0019651");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Saleforms)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("SALEFORM_FK4");

                entity.HasOne(d => d.FinanceGuardianNavigation)
                    .WithMany(p => p.Saleforms)
                    .HasForeignKey(d => d.FinanceGuardian)
                    .HasConstraintName("SALEFORM_FK3");

                entity.HasOne(d => d.FormstatustypesNavigation)
                    .WithMany(p => p.SaleformFormstatustypesNavigations)
                    .HasForeignKey(d => d.Formstatustypes)
                    .HasConstraintName("SALEFORM_FK2");

                entity.HasOne(d => d.FormtypeNavigation)
                    .WithMany(p => p.SaleformFormtypeNavigations)
                    .HasForeignKey(d => d.Formtype)
                    .HasConstraintName("SALEFORM_FK6");

                entity.HasOne(d => d.InstprogramNavigation)
                    .WithMany(p => p.Saleforms)
                    .HasForeignKey(d => d.Instprogram)
                    .HasConstraintName("SALEFORM_FK7");

                entity.HasOne(d => d.ItemactivitytypeNavigation)
                    .WithMany(p => p.SaleformItemactivitytypeNavigations)
                    .HasForeignKey(d => d.Itemactivitytype)
                    .HasConstraintName("SALEFORM_FK5");
            });

            modelBuilder.Entity<SaleformAccept>(entity =>
            {
                entity.ToTable("SALEFORM_ACCEPT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AcceptName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCEPT_NAME");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Serial)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERIAL");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.SaleformAccepts)
                    .HasForeignKey(d => d.Saleformid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALEFORM_ACCEPT_R01");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SaleformAccepts)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("SALEFORM_ACCEPT_R02");
            });

            modelBuilder.Entity<SaleformSumPaidIndate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALEFORM_SUM_PAID_INDATE");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<Saleformapplevel>(entity =>
            {
                entity.ToTable("SALEFORMAPPLEVELS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Levelname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("LEVELNAME");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Saleformapplevels)
                    .HasForeignKey(d => d.Saleformid)
                    .HasConstraintName("SALEFORMAPPLEVELS_R02");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Saleformapplevels)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("SALEFORMAPPLEVELS_R01");
            });

            modelBuilder.Entity<Saleformapproval>(entity =>
            {
                entity.ToTable("SALEFORMAPPROVALS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Approvaldate)
                    .HasColumnType("DATE")
                    .HasColumnName("APPROVALDATE");

                entity.Property(e => e.Levelid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LEVELID");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.Level)
                    .WithMany(p => p.Saleformapprovals)
                    .HasForeignKey(d => d.Levelid)
                    .HasConstraintName("SALEFORMAPPROVALS_R02");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Saleformapprovals)
                    .HasForeignKey(d => d.Saleformid)
                    .HasConstraintName("SALEFORMAPPROVALS_R03");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Saleformapprovals)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("SALEFORMAPPROVALS_R01");
            });

            modelBuilder.Entity<Saleformattachmenttmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SALEFORMATTACHMENTTMP");

                entity.Property(e => e.Attachid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHID");

                entity.Property(e => e.Attachmentname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHMENTNAME");

                entity.Property(e => e.Attachmentquantity)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTQUANTITY");

                entity.Property(e => e.Attachmentunitvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTUNITVALUE");

                entity.Property(e => e.Customerid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Cutomeraname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUTOMERANAME");

                entity.Property(e => e.Cutomercode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUTOMERCODE");

                entity.Property(e => e.Cutomerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUTOMERENAME");

                entity.Property(e => e.Docnum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCNUM");

                entity.Property(e => e.Feautersvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEAUTERSVALUE");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMVALUE");

                entity.Property(e => e.InstprogramsId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Layouta)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUTA");

                entity.Property(e => e.Layoute)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUTE");

                entity.Property(e => e.Nameofquantity)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NAMEOFQUANTITY");

                entity.Property(e => e.Ownercompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Saleformdate)
                    .HasColumnType("DATE")
                    .HasColumnName("SALEFORMDATE");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Servicesvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICESVALUE");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS");

                entity.Property(e => e.Totaladditionvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALADDITIONVALUE");

                entity.Property(e => e.Totalattachmentvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALATTACHMENTVALUE");

                entity.Property(e => e.Totaldeducevalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALDEDUCEVALUE");

                entity.Property(e => e.Unitarea)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITAREA");

                entity.Property(e => e.Unitareavalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITAREAVALUE");
            });

            modelBuilder.Entity<Saleformattacnment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALEFORMATTACNMENTS");

                entity.Property(e => e.Attachid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHID");

                entity.Property(e => e.Feautersvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEAUTERSVALUE");

                entity.Property(e => e.InstprogramsId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Ownercompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Servicesvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICESVALUE");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1");
            });

            modelBuilder.Entity<SaleformattacnmentsMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALEFORMATTACNMENTS_MOD");

                entity.Property(e => e.Attachid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHID");

                entity.Property(e => e.Attachmentname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHMENTNAME");

                entity.Property(e => e.Attachmentquantity)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTQUANTITY");

                entity.Property(e => e.Attachmentunitvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTUNITVALUE");

                entity.Property(e => e.Customerid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Cutomeraname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUTOMERANAME");

                entity.Property(e => e.Cutomercode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUTOMERCODE");

                entity.Property(e => e.Cutomerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUTOMERENAME");

                entity.Property(e => e.Docnum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCNUM");

                entity.Property(e => e.Feautersvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEAUTERSVALUE");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE");

                entity.Property(e => e.InstprogramsId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Layouta)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUTA");

                entity.Property(e => e.Layoute)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUTE");

                entity.Property(e => e.Nameofquantity)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NAMEOFQUANTITY");

                entity.Property(e => e.Ownercompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Saleformdate)
                    .HasColumnType("DATE")
                    .HasColumnName("SALEFORMDATE");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Servicesvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICESVALUE");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS");

                entity.Property(e => e.Totaladditionvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALADDITIONVALUE");

                entity.Property(e => e.Totalattachmentvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALATTACHMENTVALUE");

                entity.Property(e => e.Totaldeducevalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALDEDUCEVALUE");

                entity.Property(e => e.Unitarea)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITAREA");

                entity.Property(e => e.Unitareavalue)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("UNITAREAVALUE");
            });

            modelBuilder.Entity<Saleformdataview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALEFORMDATAVIEW");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Financeaname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FINANCEANAME");

                entity.Property(e => e.Financecode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FINANCECODE");

                entity.Property(e => e.Financeename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FINANCEENAME");

                entity.Property(e => e.Grossleft)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSLEFT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Penaltyexemptionrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYEXEMPTIONRATE");

                entity.Property(e => e.Punich)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PUNICH");

                entity.Property(e => e.Val)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("VAL");
            });

            modelBuilder.Entity<Saleformdeliverunit>(entity =>
            {
                entity.ToTable("SALEFORMDELIVERUNITS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Deliverdate)
                    .HasColumnType("DATE")
                    .HasColumnName("DELIVERDATE");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Saleformdeliverunits)
                    .HasForeignKey(d => d.Saleformid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALEFORMDELIVERUNITS_FK1");
            });

            modelBuilder.Entity<Saleformdocattachment>(entity =>
            {
                entity.ToTable("SALEFORMDOCATTACHMENTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Docattachmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOCATTACHMENTID");

                entity.Property(e => e.Docname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNAME");

                entity.Property(e => e.Docuniquename)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DOCUNIQUENAME");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.HasOne(d => d.Docattachment)
                    .WithMany(p => p.Saleformdocattachments)
                    .HasForeignKey(d => d.Docattachmentid)
                    .HasConstraintName("SALEFORMDOCATTACHMENTS_R02");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Saleformdocattachments)
                    .HasForeignKey(d => d.Saleformid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALEFORMDOCATTACHMENTS_R01");
            });

            modelBuilder.Entity<Saleformfeature>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALEFORMFEATURES");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.InstprogramsId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Ownercompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");
            });

            modelBuilder.Entity<Saleforminsprogram>(entity =>
            {
                entity.ToTable("SALEFORMINSPROGRAM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Instprogramid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMID");

                entity.Property(e => e.Noofmonths)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NOOFMONTHS");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.HasOne(d => d.Instprogram)
                    .WithMany(p => p.Saleforminsprograms)
                    .HasForeignKey(d => d.Instprogramid)
                    .HasConstraintName("SALEFORMINSPROGRAM_FK2");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Saleforminsprograms)
                    .HasForeignKey(d => d.Saleformid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALEFORMINSPROGRAM_FK1");
            });

            modelBuilder.Entity<Saleforminstalmentrule>(entity =>
            {
                entity.ToTable("SALEFORMINSTALMENTRULES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AffectContract)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFFECT_CONTRACT")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.AffectEnd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFFECT_END")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.AffectOthers)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFFECT_OTHERS")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.AffectReserve)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AFFECT_RESERVE")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.ApplyTo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APPLY_TO");

                entity.Property(e => e.Businessid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BUSINESSID");

                entity.Property(e => e.Cancelvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CANCELVALUE");

                entity.Property(e => e.Cancelvalueafcontract)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CANCELVALUEAFCONTRACT");

                entity.Property(e => e.Cancelvalueorratio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CANCELVALUEORRATIO");

                entity.Property(e => e.Cancelvalueorratioafcontract)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CANCELVALUEORRATIOAFCONTRACT");

                entity.Property(e => e.DefaultYears)
                    .HasPrecision(2)
                    .HasColumnName("DEFAULT_YEARS");

                entity.Property(e => e.Earlypayment)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYPAYMENT");

                entity.Property(e => e.FromDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Instalmentrulesaname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTRULESANAME");

                entity.Property(e => e.Instalmentrulescode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTRULESCODE");

                entity.Property(e => e.Instalmentrulesename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTRULESENAME");

                entity.Property(e => e.MaxYears)
                    .HasPrecision(2)
                    .HasColumnName("MAX_YEARS");

                entity.Property(e => e.MinRatioContrcact)
                    .HasColumnType("NUMBER(5,3)")
                    .HasColumnName("MIN_RATIO_CONTRCACT");

                entity.Property(e => e.MinRatioEnd)
                    .HasColumnType("NUMBER(5,3)")
                    .HasColumnName("MIN_RATIO_END");

                entity.Property(e => e.MinRatioReserve)
                    .HasColumnType("NUMBER(5,3)")
                    .HasColumnName("MIN_RATIO_RESERVE");

                entity.Property(e => e.ProfitRatio)
                    .HasColumnType("NUMBER(7,4)")
                    .HasColumnName("PROFIT_RATIO");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.ToDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TO_DATE");

                entity.Property(e => e.Waivervalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("WAIVERVALUE");

                entity.Property(e => e.Waivervalueafcontract)
                    .HasColumnType("NUMBER")
                    .HasColumnName("WAIVERVALUEAFCONTRACT");

                entity.Property(e => e.Waivervalueorratio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WAIVERVALUEORRATIO");

                entity.Property(e => e.Waivervalueorratioafcontract)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("WAIVERVALUEORRATIOAFCONTRACT");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Saleforminstalmentrules)
                    .HasForeignKey(d => d.Saleformid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALEFORMINSTALMENTRULES_FK1");
            });

            modelBuilder.Entity<Saleforminstalmentsm>(entity =>
            {
                entity.ToTable("SALEFORMINSTALMENTSM");

                entity.HasIndex(e => new { e.Tableflag, e.Saleformid, e.Tableid }, "SALEFORMINSTALMENTSM_6");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Externalbegintype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNALBEGINTYPE");

                entity.Property(e => e.Externalinterval)
                    .HasPrecision(5)
                    .HasColumnName("EXTERNALINTERVAL");

                entity.Property(e => e.Externalintervaltype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNALINTERVALTYPE");

                entity.Property(e => e.Instalmentpartid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTPARTID");

                entity.Property(e => e.Instcount)
                    .HasPrecision(3)
                    .HasColumnName("INSTCOUNT");

                entity.Property(e => e.Instpercent)
                    .HasColumnType("NUMBER(15,5)")
                    .HasColumnName("INSTPERCENT");

                entity.Property(e => e.Insttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INSTTYPE");

                entity.Property(e => e.Internalinterval)
                    .HasPrecision(5)
                    .HasColumnName("INTERNALINTERVAL");

                entity.Property(e => e.Internalintervaltype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("INTERNALINTERVALTYPE");

                entity.Property(e => e.Noofmonths)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NOOFMONTHS");

                entity.Property(e => e.Rank)
                    .HasPrecision(4)
                    .HasColumnName("RANK");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Saleforminsprogramid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMINSPROGRAMID");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.HasOne(d => d.Instalmentpart)
                    .WithMany(p => p.Saleforminstalmentsms)
                    .HasForeignKey(d => d.Instalmentpartid)
                    .HasConstraintName("SALEFORMINSTALMENTSM_FK2");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Saleforminstalmentsms)
                    .HasForeignKey(d => d.Saleformid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALEFORMINSTALMENTSM_FK1");
            });

            modelBuilder.Entity<Saleforminstpenaltyrule>(entity =>
            {
                entity.ToTable("SALEFORMINSTPENALTYRULES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ApplyTo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APPLY_TO");

                entity.Property(e => e.Businessid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BUSINESSID");

                entity.Property(e => e.Cratio)
                    .HasColumnType("NUMBER(9,5)")
                    .HasColumnName("CRATIO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Fixedcost)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("FIXEDCOST");

                entity.Property(e => e.Freeperiod)
                    .HasPrecision(4)
                    .HasColumnName("FREEPERIOD");

                entity.Property(e => e.FromDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Mincharge)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("MINCHARGE");

                entity.Property(e => e.Penaltycount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYCOUNT");

                entity.Property(e => e.Penaltytype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PENALTYTYPE");

                entity.Property(e => e.Periodtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PERIODTYPE");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.ToDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TO_DATE");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Saleforminstpenaltyrules)
                    .HasForeignKey(d => d.Saleformid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALEFORMINSTPENALTYRULES_FK1");
            });

            modelBuilder.Entity<Saleformreport>(entity =>
            {
                entity.ToTable("SALEFORMREPORTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Userreportid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERREPORTID");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Saleformreports)
                    .HasForeignKey(d => d.Saleformid)
                    .HasConstraintName("SALEFORMREPORTS_R01");

                entity.HasOne(d => d.Userreport)
                    .WithMany(p => p.Saleformreports)
                    .HasForeignKey(d => d.Userreportid)
                    .HasConstraintName("SYS_C0019721");
            });

            modelBuilder.Entity<Saleformservice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALEFORMSERVICES");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.InstprogramsId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Ownercompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");
            });

            modelBuilder.Entity<Saleformsstatementview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALEFORMSSTATEMENTVIEW");

                entity.Property(e => e.ApartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME1");

                entity.Property(e => e.ApartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME2");

                entity.Property(e => e.ApartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME3");

                entity.Property(e => e.ApartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME4");

                entity.Property(e => e.ApartName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME5");

                entity.Property(e => e.ApartName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME6");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTSVALUE2");

                entity.Property(e => e.Attachvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHVALUE");

                entity.Property(e => e.Branchaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHANAME");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Customercode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERCODE");

                entity.Property(e => e.Customerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERENAME");

                entity.Property(e => e.Customerid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Customername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.DateActual)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_ACTUAL");

                entity.Property(e => e.DateExpected)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_EXPECTED");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Description)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Edescription)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("EDESCRIPTION");

                entity.Property(e => e.Elayout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ELAYOUT");

                entity.Property(e => e.EpartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME1");

                entity.Property(e => e.EpartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME2");

                entity.Property(e => e.EpartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME3");

                entity.Property(e => e.EpartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME4");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURESVALUE2");

                entity.Property(e => e.Featurevalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATUREVALUE");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Originaldesc)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ORIGINALDESC");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.PartCode1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE1");

                entity.Property(e => e.PartCode2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE2");

                entity.Property(e => e.PartCode3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE3");

                entity.Property(e => e.PartCode4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE4");

                entity.Property(e => e.PartCode5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE5");

                entity.Property(e => e.PartCode6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE6");

                entity.Property(e => e.PartCodeEname1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME1");

                entity.Property(e => e.PartCodeEname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME2");

                entity.Property(e => e.PartCodeEname3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME3");

                entity.Property(e => e.PartCodeEname4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME4");

                entity.Property(e => e.PartCodeName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME1");

                entity.Property(e => e.PartCodeName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME10");

                entity.Property(e => e.PartCodeName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME2");

                entity.Property(e => e.PartCodeName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME3");

                entity.Property(e => e.PartCodeName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME4");

                entity.Property(e => e.PartCodeName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME5");

                entity.Property(e => e.PartCodeName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME6");

                entity.Property(e => e.PartCodeName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME7");

                entity.Property(e => e.PartCodeName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME8");

                entity.Property(e => e.PartCodeName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME9");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedFixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_FIXEDCOST");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Saleformbenfets)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMBENFETS");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Saleformid1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID1");

                entity.Property(e => e.Saleformvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMVALUE");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICESVALUE2");

                entity.Property(e => e.Servicevalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICEVALUE");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Trnsnum)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TRNSNUM");

                entity.Property(e => e.Val2benfets)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VAL2BENFETS");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<Saleformtype>(entity =>
            {
                entity.ToTable("SALEFORMTYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Saleformview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALEFORMVIEW");

                entity.Property(e => e.Activityaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYANAME");

                entity.Property(e => e.Activityename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYENAME");

                entity.Property(e => e.Acurrency)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ACURRENCY");

                entity.Property(e => e.ApartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME1");

                entity.Property(e => e.ApartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME2");

                entity.Property(e => e.ApartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME3");

                entity.Property(e => e.ApartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME4");

                entity.Property(e => e.ApartName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME5");

                entity.Property(e => e.ApartName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME6");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTSVALUE2");

                entity.Property(e => e.Attachvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHVALUE");

                entity.Property(e => e.Branchaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHANAME");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Cancelformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CANCELFORMID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Customercode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERCODE");

                entity.Property(e => e.Customerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERENAME");

                entity.Property(e => e.Customerid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Customername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.DateActual)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_ACTUAL");

                entity.Property(e => e.DateExpected)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_EXPECTED");

                entity.Property(e => e.DateIn)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_IN");

                entity.Property(e => e.Delegateename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELEGATEENAME");

                entity.Property(e => e.Delegatename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELEGATENAME");

                entity.Property(e => e.Deliverbymonth)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DELIVERBYMONTH");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Ecurrency)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ECURRENCY");

                entity.Property(e => e.Elayout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ELAYOUT");

                entity.Property(e => e.EpartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME1");

                entity.Property(e => e.EpartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME2");

                entity.Property(e => e.EpartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME3");

                entity.Property(e => e.EpartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME4");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURESVALUE2");

                entity.Property(e => e.Featurevalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATUREVALUE");

                entity.Property(e => e.Formstatustypes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMSTATUSTYPES");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.Inststatus)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTSTATUS");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.MaxClevel)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_CLEVEL");

                entity.Property(e => e.Ownername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERNAME");

                entity.Property(e => e.PartCode1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE1");

                entity.Property(e => e.PartCode2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE2");

                entity.Property(e => e.PartCode3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE3");

                entity.Property(e => e.PartCode4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE4");

                entity.Property(e => e.PartCode5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE5");

                entity.Property(e => e.PartCode6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE6");

                entity.Property(e => e.PartCodeEname1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME1");

                entity.Property(e => e.PartCodeEname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME2");

                entity.Property(e => e.PartCodeEname3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME3");

                entity.Property(e => e.PartCodeEname4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME4");

                entity.Property(e => e.PartCodeName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME1");

                entity.Property(e => e.PartCodeName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME10");

                entity.Property(e => e.PartCodeName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME2");

                entity.Property(e => e.PartCodeName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME3");

                entity.Property(e => e.PartCodeName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME4");

                entity.Property(e => e.PartCodeName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME5");

                entity.Property(e => e.PartCodeName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME6");

                entity.Property(e => e.PartCodeName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME7");

                entity.Property(e => e.PartCodeName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME8");

                entity.Property(e => e.PartCodeName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME9");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2");

                entity.Property(e => e.Saleformbenfets)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMBENFETS");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Saleformvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMVALUE");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICESVALUE2");

                entity.Property(e => e.Servicevalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICEVALUE");

                entity.Property(e => e.SfDelivunitdate)
                    .HasColumnType("DATE")
                    .HasColumnName("SF_DELIVUNITDATE");

                entity.Property(e => e.Staff1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF1");

                entity.Property(e => e.Staff2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF2");

                entity.Property(e => e.Staff2ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFF2ENAME");

                entity.Property(e => e.Staff2name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFF2NAME");

                entity.Property(e => e.Statue)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("STATUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE2");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL1");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL2");

                entity.Property(e => e.Val2benfets)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VAL2BENFETS");
            });

            modelBuilder.Entity<Saleformview1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALEFORMVIEWS");

                entity.Property(e => e.Activityaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYANAME");

                entity.Property(e => e.Activityename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYENAME");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTSVALUE2");

                entity.Property(e => e.Attachvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHVALUE");

                entity.Property(e => e.Branchaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHANAME");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Cancelformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CANCELFORMID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Customercode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERCODE");

                entity.Property(e => e.Customerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERENAME");

                entity.Property(e => e.Customerid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Customername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.DateActual)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_ACTUAL");

                entity.Property(e => e.DateExpected)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_EXPECTED");

                entity.Property(e => e.DateIn)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_IN");

                entity.Property(e => e.Delegateename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELEGATEENAME");

                entity.Property(e => e.Delegatename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELEGATENAME");

                entity.Property(e => e.Deliverbymonth)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DELIVERBYMONTH");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Elayout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ELAYOUT");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURESVALUE2");

                entity.Property(e => e.Featurevalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATUREVALUE");

                entity.Property(e => e.Formstatustypes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMSTATUSTYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.MaxClevel)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_CLEVEL");

                entity.Property(e => e.Ownername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERNAME");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2");

                entity.Property(e => e.Saleformbenfets)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMBENFETS");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Saleformvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMVALUE");

                entity.Property(e => e.Sdelunit)
                    .HasColumnType("DATE")
                    .HasColumnName("SDELUNIT");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICESVALUE2");

                entity.Property(e => e.Servicevalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICEVALUE");

                entity.Property(e => e.Staff1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF1");

                entity.Property(e => e.Staff2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF2");

                entity.Property(e => e.Staff2ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFF2ENAME");

                entity.Property(e => e.Staff2name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFF2NAME");

                entity.Property(e => e.Statue)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("STATUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE2");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL1");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL2");

                entity.Property(e => e.Val2benfets)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VAL2BENFETS");
            });

            modelBuilder.Entity<Saleformviewmod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALEFORMVIEWMOD");

                entity.Property(e => e.Activityaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYANAME");

                entity.Property(e => e.Activityename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYENAME");

                entity.Property(e => e.Acurrency)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ACURRENCY");

                entity.Property(e => e.ApartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME1");

                entity.Property(e => e.ApartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME2");

                entity.Property(e => e.ApartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME3");

                entity.Property(e => e.ApartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME4");

                entity.Property(e => e.ApartName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME5");

                entity.Property(e => e.ApartName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME6");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTSVALUE2");

                entity.Property(e => e.Attachvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHVALUE");

                entity.Property(e => e.Branchaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHANAME");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Cancelformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CANCELFORMID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Customercode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERCODE");

                entity.Property(e => e.Customerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERENAME");

                entity.Property(e => e.Customerid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Customername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.DateActual)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_ACTUAL");

                entity.Property(e => e.DateExpected)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_EXPECTED");

                entity.Property(e => e.DateIn)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_IN");

                entity.Property(e => e.Delegateename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELEGATEENAME");

                entity.Property(e => e.Delegatename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELEGATENAME");

                entity.Property(e => e.Deliverbymonth)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DELIVERBYMONTH");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Ecurrency)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ECURRENCY");

                entity.Property(e => e.Elayout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ELAYOUT");

                entity.Property(e => e.EpartName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME1");

                entity.Property(e => e.EpartName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME2");

                entity.Property(e => e.EpartName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME3");

                entity.Property(e => e.EpartName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME4");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURESVALUE2");

                entity.Property(e => e.Featurevalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATUREVALUE");

                entity.Property(e => e.Formstatustypes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMSTATUSTYPES");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.Inststatus)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTSTATUS");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.MaxClevel)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_CLEVEL");

                entity.Property(e => e.Ownername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERNAME");

                entity.Property(e => e.PartCode1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE1");

                entity.Property(e => e.PartCode2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE2");

                entity.Property(e => e.PartCode3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE3");

                entity.Property(e => e.PartCode4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE4");

                entity.Property(e => e.PartCode5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE5");

                entity.Property(e => e.PartCode6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE6");

                entity.Property(e => e.PartCodeEname1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME1");

                entity.Property(e => e.PartCodeEname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME2");

                entity.Property(e => e.PartCodeEname3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME3");

                entity.Property(e => e.PartCodeEname4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME4");

                entity.Property(e => e.PartCodeName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME1");

                entity.Property(e => e.PartCodeName10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME10");

                entity.Property(e => e.PartCodeName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME2");

                entity.Property(e => e.PartCodeName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME3");

                entity.Property(e => e.PartCodeName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME4");

                entity.Property(e => e.PartCodeName5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME5");

                entity.Property(e => e.PartCodeName6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME6");

                entity.Property(e => e.PartCodeName7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME7");

                entity.Property(e => e.PartCodeName8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME8");

                entity.Property(e => e.PartCodeName9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME9");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY2");

                entity.Property(e => e.Saleformbenfets)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMBENFETS");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Saleformvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMVALUE");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICESVALUE2");

                entity.Property(e => e.Servicevalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICEVALUE");

                entity.Property(e => e.SfDelivunitdate)
                    .HasColumnType("DATE")
                    .HasColumnName("SF_DELIVUNITDATE");

                entity.Property(e => e.Staff1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF1");

                entity.Property(e => e.Staff2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF2");

                entity.Property(e => e.Staff2ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFF2ENAME");

                entity.Property(e => e.Staff2name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFF2NAME");

                entity.Property(e => e.Statue)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("STATUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE2");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITVAL1");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITVAL2");

                entity.Property(e => e.Val2benfets)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VAL2BENFETS");
            });

            modelBuilder.Entity<Saleformviewsmod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALEFORMVIEWSMOD");

                entity.Property(e => e.Activityaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYANAME");

                entity.Property(e => e.Activityename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITYENAME");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTSVALUE2");

                entity.Property(e => e.Attachvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHVALUE");

                entity.Property(e => e.Branchaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHANAME");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Cancelformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CANCELFORMID");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Customercode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERCODE");

                entity.Property(e => e.Customerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERENAME");

                entity.Property(e => e.Customerid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Customername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.DateActual)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_ACTUAL");

                entity.Property(e => e.DateExpected)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_EXPECTED");

                entity.Property(e => e.DateIn)
                    .HasColumnType("DATE")
                    .HasColumnName("DATE_IN");

                entity.Property(e => e.Delegateename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELEGATEENAME");

                entity.Property(e => e.Delegatename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELEGATENAME");

                entity.Property(e => e.Deliverbymonth)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DELIVERBYMONTH");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Elayout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ELAYOUT");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURESVALUE2");

                entity.Property(e => e.Featurevalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATUREVALUE");

                entity.Property(e => e.Formstatustypes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMSTATUSTYPES");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.MaxClevel)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_CLEVEL");

                entity.Property(e => e.Ownername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OWNERNAME");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY2");

                entity.Property(e => e.Saleformbenfets)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMBENFETS");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Saleformvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMVALUE");

                entity.Property(e => e.Sdelunit)
                    .HasColumnType("DATE")
                    .HasColumnName("SDELUNIT");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICESVALUE2");

                entity.Property(e => e.Servicevalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICEVALUE");

                entity.Property(e => e.Staff1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF1");

                entity.Property(e => e.Staff2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF2");

                entity.Property(e => e.Staff2ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFF2ENAME");

                entity.Property(e => e.Staff2name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFF2NAME");

                entity.Property(e => e.Statue)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("STATUE")
                    .IsFixedLength(true);

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE2");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITVAL1");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITVAL2");

                entity.Property(e => e.Val2benfets)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VAL2BENFETS");
            });

            modelBuilder.Entity<Saleinsatlementsadddeduc>(entity =>
            {
                entity.ToTable("SALEINSATLEMENTSADDDEDUC");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Saleadddeducreasonsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEADDDEDUCREASONSID");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Saleinstalmenttypesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEINSTALMENTTYPESID");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUE");

                entity.Property(e => e.Valuetype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUETYPE");

                entity.HasOne(d => d.Saleadddeducreasons)
                    .WithMany(p => p.Saleinsatlementsadddeducs)
                    .HasForeignKey(d => d.Saleadddeducreasonsid)
                    .HasConstraintName("SALEINSATLEMENTSADDDEDUC_FK2");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Saleinsatlementsadddeducs)
                    .HasForeignKey(d => d.Saleformid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALEINSATLEMENTSADDDEDUC_R01");

                entity.HasOne(d => d.Saleinstalmenttypes)
                    .WithMany(p => p.Saleinsatlementsadddeducs)
                    .HasForeignKey(d => d.Saleinstalmenttypesid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALEINSATLEMENTSADDDEDUC_R03");
            });

            modelBuilder.Entity<Saleinstalmentsm>(entity =>
            {
                entity.ToTable("SALEINSTALMENTSM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Advance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADVANCE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Annualincrease)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ANNUALINCREASE");

                entity.Property(e => e.Instalmentenddate)
                    .HasColumnType("DATE")
                    .HasColumnName("INSTALMENTENDDATE");

                entity.Property(e => e.Instalmentsperiod)
                    .HasMaxLength(1)
                    .HasColumnName("INSTALMENTSPERIOD")
                    .HasDefaultValueSql("'M'");

                entity.Property(e => e.Instalmentstartdate)
                    .HasColumnType("DATE")
                    .HasColumnName("INSTALMENTSTARTDATE");

                entity.Property(e => e.Maxtotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAXTOTAL")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Paymentperiod)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYMENTPERIOD");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Saleinstalmenttypesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEINSTALMENTTYPESID");

                entity.Property(e => e.Val)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VAL");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Saleinstalmentsms)
                    .HasForeignKey(d => d.Saleformid)
                    .HasConstraintName("SALEINSTALMENTSM_R01");
            });

            modelBuilder.Entity<Saleinstalmentso>(entity =>
            {
                entity.ToTable("SALEINSTALMENTSO");

                entity.HasIndex(e => e.Indate, "INDATE_INDEX");

                entity.HasIndex(e => e.Instalmentownerid, "OWNER_INDEX");

                entity.HasIndex(e => e.Saleformid, "SALEINSTALMENTOSALEFORMID_INDX");

                entity.HasIndex(e => e.Saleforminstalmentsmid, "SALEINSTALMENTSO6");

                entity.HasIndex(e => new { e.Tableflag, e.Saleformid, e.Tableid }, "SALEINSTALMENTSO7");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Increaseval)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INCREASEVAL");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentbenfitvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTBENFITVALUE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instalmentownerid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTOWNERID");

                entity.Property(e => e.Instalmentpartsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTPARTSID");

                entity.Property(e => e.Instalmentvalueonly)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTVALUEONLY");

                entity.Property(e => e.Instprogramid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMID");

                entity.Property(e => e.Noofmonths)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NOOFMONTHS");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Penaltyexemptionrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYEXEMPTIONRATE");

                entity.Property(e => e.Punich)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PUNICH");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Saleforminstalmentsmid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMINSTALMENTSMID");

                entity.Property(e => e.Serialename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALENAME");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.Subserial)
                    .HasPrecision(4)
                    .HasColumnName("SUBSERIAL");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Val)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("VAL");

                entity.HasOne(d => d.Instalmentparts)
                    .WithMany(p => p.Saleinstalmentsos)
                    .HasForeignKey(d => d.Instalmentpartsid)
                    .HasConstraintName("SALEINSTALMENTSO_FK2");

                entity.HasOne(d => d.Instprogram)
                    .WithMany(p => p.Saleinstalmentsos)
                    .HasForeignKey(d => d.Instprogramid)
                    .HasConstraintName("SALEINSTALMENTSO_FK4");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Saleinstalmentsos)
                    .HasForeignKey(d => d.Saleformid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALEINSTALMENTSO_FK1");

                entity.HasOne(d => d.Saleforminstalmentsm)
                    .WithMany(p => p.Saleinstalmentsos)
                    .HasForeignKey(d => d.Saleforminstalmentsmid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALEINSTALMENTSO_FK3");
            });

            modelBuilder.Entity<Salerentcompositeitem>(entity =>
            {
                entity.ToTable("SALERENTCOMPOSITEITEM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Composititemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITITEMID");

                entity.Property(e => e.Rentformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTFORMID");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.HasOne(d => d.Rentform)
                    .WithMany(p => p.Salerentcompositeitems)
                    .HasForeignKey(d => d.Rentformid)
                    .HasConstraintName("SALERENTCOMPOSITEITEM_FK2");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Salerentcompositeitems)
                    .HasForeignKey(d => d.Saleformid)
                    .HasConstraintName("SALERENTCOMPOSITEITEM_FK1");
            });

            modelBuilder.Entity<Salerentinstattatchmentfeature>(entity =>
            {
                entity.ToTable("SALERENTINSTATTATCHMENTFEATURE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttatchmentId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTATCHMENT_ID");

                entity.Property(e => e.FeatureId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURE_ID");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(10,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Valueorratio1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO1");

                entity.Property(e => e.Valueorratio2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO2");

                entity.Property(e => e.Valueorratio3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO3");

                entity.HasOne(d => d.Attatchment)
                    .WithMany(p => p.Salerentinstattatchmentfeatures)
                    .HasForeignKey(d => d.AttatchmentId)
                    .HasConstraintName("SALERENTINSTATTATCHMENTFEA_FK2");

                entity.HasOne(d => d.Feature)
                    .WithMany(p => p.Salerentinstattatchmentfeatures)
                    .HasForeignKey(d => d.FeatureId)
                    .HasConstraintName("SALERENTINSTATTATCHMENTFEA_FK3");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Salerentinstattatchmentfeatures)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("SALERENINSTATCHMENTFEATURE_R01");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Salerentinstattatchmentfeatures)
                    .HasForeignKey(d => d.InstitemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALERENTINSTATTATCHMENTFEA_FK1");
            });

            modelBuilder.Entity<Salerentinstattatchmentservice>(entity =>
            {
                entity.ToTable("SALERENTINSTATTATCHMENTSERVICE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttatchmentId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTATCHMENT_ID");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(10,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ServiceId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICE_ID");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Valueorratio1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO1");

                entity.Property(e => e.Valueorratio2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO2");

                entity.Property(e => e.Valueorratio3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO3");

                entity.HasOne(d => d.Attatchment)
                    .WithMany(p => p.Salerentinstattatchmentservices)
                    .HasForeignKey(d => d.AttatchmentId)
                    .HasConstraintName("SALERENTINSTATTATCHSERV_FK2");

                entity.HasOne(d => d.AttatchmentNavigation)
                    .WithMany(p => p.Salerentinstattatchmentservices)
                    .HasForeignKey(d => d.AttatchmentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALERENTINSTATTATCHSERV_R02");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Salerentinstattatchmentservices)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("SALERENINSTATCHMENTSERVICE_R01");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Salerentinstattatchmentservices)
                    .HasForeignKey(d => d.InstitemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALERENTINSTATTATCHSERV_FK1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Salerentinstattatchmentservices)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("SALERENTINSTATTATCHSERV_R03");
            });

            modelBuilder.Entity<Salerentinstitem>(entity =>
            {
                entity.ToTable("SALERENTINSTITEM");

                entity.HasIndex(e => e.Compositeid, "COMID_INDX");

                entity.HasIndex(e => e.Institemid, "INSTITEMID_INDX");

                entity.HasIndex(e => e.Saleformid, "SALEFORMID_INDX");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Attachmentsvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTSVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTSVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID")
                    .HasDefaultValueSql("NULL");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Featuresvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATURESVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATURESVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.HandoverDateActualDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_ACTUAL_DATE");

                entity.Property(e => e.HandoverDateExpectedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_EXPECTED_DATE");

                entity.Property(e => e.HandoverDateInDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_IN_DATE");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Mandatoryid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORYID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Rentformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTFORMID");

                entity.Property(e => e.Rentval)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("RENTVAL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Rentvalperiod)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RENTVALPERIOD")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Servicesvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.InstitemMainTypes)
                    .WithMany(p => p.Salerentinstitems)
                    .HasForeignKey(d => d.InstitemMainTypesId)
                    .HasConstraintName("SALERENTINSTITEM_FK3");

                entity.HasOne(d => d.Rentform)
                    .WithMany(p => p.Salerentinstitems)
                    .HasForeignKey(d => d.Rentformid)
                    .HasConstraintName("SYS_C0019880");

                entity.HasOne(d => d.Saleform)
                    .WithMany(p => p.Salerentinstitems)
                    .HasForeignKey(d => d.Saleformid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALERENTINSTITEM_FK1");
            });

            modelBuilder.Entity<Salerentinstitemattatchment>(entity =>
            {
                entity.ToTable("SALERENTINSTITEMATTATCHMENTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AttatchmentId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTATCHMENT_ID");

                entity.Property(e => e.Feautersvalue)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEAUTERSVALUE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.InstprogramsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Servicesvalue)
                    .HasColumnType("NUMBER(10,2)")
                    .HasColumnName("SERVICESVALUE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS")
                    .HasDefaultValueSql("'2'\n");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Attatchment)
                    .WithMany(p => p.Salerentinstitemattatchments)
                    .HasForeignKey(d => d.AttatchmentId)
                    .HasConstraintName("SALERENTINSTITEMATTATCHMEN_FK2");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Salerentinstitemattatchments)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("SALERENINSTITEMATATCHMENTS_R01");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Salerentinstitemattatchments)
                    .HasForeignKey(d => d.InstitemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALERENTINSTITEMATTATCHMEN_FK1");
            });

            modelBuilder.Entity<Salerentinstitemfeature>(entity =>
            {
                entity.ToTable("SALERENTINSTITEMFEATURES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.FeatureId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FEATURE_ID");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.InstprogramsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS")
                    .HasDefaultValueSql("'2'\n");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Feature)
                    .WithMany(p => p.Salerentinstitemfeatures)
                    .HasForeignKey(d => d.FeatureId)
                    .HasConstraintName("SALERENTINSTITEMFEATURES_FK2");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Salerentinstitemfeatures)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("SALERENTINSTITEMFEATURES_R01");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Salerentinstitemfeatures)
                    .HasForeignKey(d => d.InstitemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALERENTINSTITEMFEATURES_FK1");
            });

            modelBuilder.Entity<Salerentinstitemproperty>(entity =>
            {
                entity.ToTable("SALERENTINSTITEMPROPERTIES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Allsubid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLSUBID");

                entity.Property(e => e.Data)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DATA");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.ProertyId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PROERTY_ID");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Salerentinstitemproperties)
                    .HasForeignKey(d => d.InstitemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALERENTINSTITEMPROPERTIES_FK1");

                entity.HasOne(d => d.Proerty)
                    .WithMany(p => p.Salerentinstitemproperties)
                    .HasForeignKey(d => d.ProertyId)
                    .HasConstraintName("SALERENTINSTITEMPROPERTIES_FK2");
            });

            modelBuilder.Entity<Salerentinstitemservice>(entity =>
            {
                entity.ToTable("SALERENTINSTITEMSERVICES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.InstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_ID");

                entity.Property(e => e.InstprogramsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMS_ID");

                entity.Property(e => e.Ownercompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OWNERCOMPANY");

                entity.Property(e => e.Pricelistsubject)
                    .HasMaxLength(1)
                    .HasColumnName("PRICELISTSUBJECT");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ServiceId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICE_ID");

                entity.Property(e => e.Sperateinstalments)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPERATEINSTALMENTS")
                    .HasDefaultValueSql("'2'\n");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("UNITVAL3")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Salerentinstitemservices)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("SALERENTINSTITEMSERVICES_R01");

                entity.HasOne(d => d.Institem)
                    .WithMany(p => p.Salerentinstitemservices)
                    .HasForeignKey(d => d.InstitemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SALERENTINSTITEMSERVICES_FK1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Salerentinstitemservices)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("SALERENTINSTITEMSERVICES_FK2");
            });

            modelBuilder.Entity<SalesCommisionTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SALES_COMMISION_TEMP");

                entity.Property(e => e.ApartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APARTMENT_CODE");

                entity.Property(e => e.ApplyTo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APPLY_TO")
                    .IsFixedLength(true);

                entity.Property(e => e.Buildingname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BUILDINGNAME");

                entity.Property(e => e.Commision)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMISION");

                entity.Property(e => e.FromDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.Id)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ID")
                    .IsFixedLength(true);

                entity.Property(e => e.SlideMId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SLIDE_M_ID");

                entity.Property(e => e.StaffId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF_ID");

                entity.Property(e => e.Stagename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAGENAME");

                entity.Property(e => e.SumTotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUM_TOTAL");

                entity.Property(e => e.Todate)
                    .HasColumnType("DATE")
                    .HasColumnName("TODATE");
            });

            modelBuilder.Entity<SalesformviewTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SALESFORMVIEW_TEMP");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME")
                    .IsFixedLength(true);

                entity.Property(e => e.ApartName4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APART_NAME4")
                    .IsFixedLength(true);

                entity.Property(e => e.Apartmentcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APARTMENTCODE");

                entity.Property(e => e.Building)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BUILDING");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODE")
                    .IsFixedLength(true);

                entity.Property(e => e.ConcateCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CONCATE_CODE");

                entity.Property(e => e.Customerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERENAME")
                    .IsFixedLength(true);

                entity.Property(e => e.Customername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME")
                    .IsFixedLength(true);

                entity.Property(e => e.DocNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME")
                    .IsFixedLength(true);

                entity.Property(e => e.EpartName4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EPART_NAME4")
                    .IsFixedLength(true);

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAG")
                    .IsFixedLength(true);

                entity.Property(e => e.Id)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ID")
                    .IsFixedLength(true);

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTID");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.PartCode1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE1")
                    .IsFixedLength(true);

                entity.Property(e => e.PartCode2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE2")
                    .IsFixedLength(true);

                entity.Property(e => e.PartCode3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE3")
                    .IsFixedLength(true);

                entity.Property(e => e.PartCode4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE4")
                    .IsFixedLength(true);

                entity.Property(e => e.PartCode5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE5")
                    .IsFixedLength(true);

                entity.Property(e => e.PartCode6)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE6")
                    .IsFixedLength(true);

                entity.Property(e => e.PartCodeEname4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME4")
                    .IsFixedLength(true);

                entity.Property(e => e.PartCodeName4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME4")
                    .IsFixedLength(true);

                entity.Property(e => e.Rcustomeraname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RCUSTOMERANAME")
                    .IsFixedLength(true);

                entity.Property(e => e.Rcustomerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RCUSTOMERENAME")
                    .IsFixedLength(true);

                entity.Property(e => e.Staff1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF1");

                entity.Property(e => e.Staff2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFF2");

                entity.Property(e => e.Stage)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAGE");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE1");
            });

            modelBuilder.Entity<Salesview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALESVIEW");
            });

            modelBuilder.Entity<Salesview2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALESVIEW2");
            });

            modelBuilder.Entity<SecControl>(entity =>
            {
                entity.ToTable("SEC_CONTROLS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.ControlId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTROL_ID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");
            });

            modelBuilder.Entity<SecPageDatum>(entity =>
            {
                entity.ToTable("SEC_PAGE_DATA");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ApplicationId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("APPLICATION_ID");

                entity.Property(e => e.Dataid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DATAID");

                entity.Property(e => e.Pageid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAGEID");

                entity.Property(e => e.RoleId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ROLE_ID");

                entity.Property(e => e.SecRoleId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SEC_ROLE_ID");
            });

            modelBuilder.Entity<SecPagesControl>(entity =>
            {
                entity.ToTable("SEC_PAGES_CONTROLS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ControlId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONTROL_ID");

                entity.Property(e => e.PageId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAGE_ID");

                entity.Property(e => e.Pagedataid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAGEDATAID");

                entity.HasOne(d => d.Control)
                    .WithMany(p => p.SecPagesControls)
                    .HasForeignKey(d => d.ControlId)
                    .HasConstraintName("SEC_PAGES_CONTROLS_R02");

                entity.HasOne(d => d.Pagedata)
                    .WithMany(p => p.SecPagesControls)
                    .HasForeignKey(d => d.Pagedataid)
                    .HasConstraintName("SEC_PAGES_CONTROLS_R03");
            });

            modelBuilder.Entity<SecRole>(entity =>
            {
                entity.ToTable("SEC_ROLES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<SecRolesOnPage>(entity =>
            {
                entity.ToTable("SEC_ROLES_ON_PAGES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ApplicationId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("APPLICATION_ID");

                entity.Property(e => e.PageId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAGE_ID");

                entity.Property(e => e.RoleId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ROLE_ID");

                entity.Property(e => e.SecRoleId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SEC_ROLE_ID");
            });

            modelBuilder.Entity<SecRolesOnPagesControl>(entity =>
            {
                entity.ToTable("SEC_ROLES_ON_PAGES_CONTROLS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ApplicationId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("APPLICATION_ID");

                entity.Property(e => e.Maxiamrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAXIAMRATE");

                entity.Property(e => e.PageControlId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAGE_CONTROL_ID");

                entity.Property(e => e.RoleId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ROLE_ID");

                entity.Property(e => e.SecRoleId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SEC_ROLE_ID");

                entity.HasOne(d => d.PageControl)
                    .WithMany(p => p.SecRolesOnPagesControls)
                    .HasForeignKey(d => d.PageControlId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SEC_ROLES_ON_PAGES_CONTROLSR09");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.SecRolesOnPagesControls)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("SEC_ROLES_ON_PAGES_CONTROLSR02");

                entity.HasOne(d => d.SecRole)
                    .WithMany(p => p.SecRolesOnPagesControls)
                    .HasForeignKey(d => d.SecRoleId)
                    .HasConstraintName("SEC_ROLES_ON_PAGES_CONTROLSR03");
            });

            modelBuilder.Entity<Security>(entity =>
            {
                entity.ToTable("SECURITY");

                entity.Property(e => e.Securityid)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SECURITYID");

                entity.Property(e => e.Pageid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PAGEID");

                entity.Property(e => e.Permission)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PERMISSION");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Securities)
                    .HasForeignKey(d => d.Userid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SECURITY_USER_FK");
            });

            modelBuilder.Entity<SecurityApplication>(entity =>
            {
                entity.ToTable("SECURITY_APPLICATIONS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Defaultpage)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULTPAGE");

                entity.Property(e => e.DisplayInGl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DISPLAY_IN_GL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ACTIVE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.MessageKey)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MESSAGE_KEY");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Position)
                    .HasPrecision(10)
                    .HasColumnName("POSITION");
            });

            modelBuilder.Entity<SecurityField>(entity =>
            {
                entity.ToTable("SECURITY_FIELDS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Application)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("APPLICATION");

                entity.Property(e => e.Flag)
                    .HasPrecision(10)
                    .HasColumnName("FLAG");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Parentid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PARENTID");
            });

            modelBuilder.Entity<SecurityLevel>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("SYS_C0018921");

                entity.ToTable("SECURITY_LEVELS");

                entity.Property(e => e.Code)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<SecurityPermission>(entity =>
            {
                entity.ToTable("SECURITY_PERMISSIONS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Fieldid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FIELDID");

                entity.Property(e => e.Permessionname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERMESSIONNAME");

                entity.Property(e => e.Permissiondescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PERMISSIONDESCRIPTION");

                entity.Property(e => e.Selected)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SELECTED");
            });

            modelBuilder.Entity<SecurityRole>(entity =>
            {
                entity.ToTable("SECURITY_ROLES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Application)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("APPLICATION");

                entity.Property(e => e.Defaultpage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULTPAGE");

                entity.Property(e => e.Rolename)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ROLENAME");
            });

            modelBuilder.Entity<SecurityRolePermission>(entity =>
            {
                entity.HasKey(e => new { e.Role, e.Permission })
                    .HasName("SECURITY_ROLE_PERMISSIONS_ROLE");

                entity.ToTable("SECURITY_ROLE_PERMISSIONS");

                entity.Property(e => e.Role)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ROLE");

                entity.Property(e => e.Permission)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("PERMISSION");
            });

            modelBuilder.Entity<SecurityUser>(entity =>
            {
                entity.ToTable("SECURITY_USERS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.ActiveStore)
                    .HasPrecision(10)
                    .HasColumnName("ACTIVE_STORE");

                entity.Property(e => e.Defaultapplication)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("DEFAULTAPPLICATION");

                entity.Property(e => e.Defaultlocale)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("DEFAULTLOCALE");

                entity.Property(e => e.Isactive)
                    .HasPrecision(1)
                    .HasColumnName("ISACTIVE");

                entity.Property(e => e.Password)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<SecurityUserBranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SECURITY_USER_BRANCH");

                entity.Property(e => e.Branch)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Userprivilege)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("USERPRIVILEGE");
            });

            modelBuilder.Entity<SecurityUserPrivilege>(entity =>
            {
                entity.ToTable("SECURITY_USER_PRIVILEGE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.AddBasic)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADD_BASIC");

                entity.Property(e => e.AddTrans)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADD_TRANS");

                entity.Property(e => e.DelBasic)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEL_BASIC");

                entity.Property(e => e.DelTrans)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEL_TRANS");

                entity.Property(e => e.EditBranch)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EDIT_BRANCH")
                    .HasDefaultValueSql("0                     ");

                entity.Property(e => e.EditContract)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EDIT_CONTRACT")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.EditTransNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("EDIT_TRANS_NUMBER");

                entity.Property(e => e.SelectStoreDb)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SELECT_STORE_DB");

                entity.Property(e => e.UpdateBasic)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("UPDATE_BASIC");

                entity.Property(e => e.UpdateTrans)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("UPDATE_TRANS");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("USER_ID");

                entity.Property(e => e.ViewMenuSpecs)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIEW_MENU_SPECS");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SecurityUserPrivileges)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_USER_PRIVILEGE");
            });

            modelBuilder.Entity<SecurityUserRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SECURITY_USER_ROLES");

                entity.Property(e => e.Role)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("ROLE");

                entity.Property(e => e.Users)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("USERS");
            });

            modelBuilder.Entity<SecurityUserTransType>(entity =>
            {
                entity.ToTable("SECURITY_USER_TRANS_TYPE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Transtype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRANSTYPE");

                entity.Property(e => e.Userprivilege)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("USERPRIVILEGE");
            });

            modelBuilder.Entity<Selectcheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SELECTCHECKS");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Beneficiary)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BENEFICIARY");

                entity.Property(e => e.Branch)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkserial)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKSERIAL");

                entity.Property(e => e.Checktype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKTYPE");

                entity.Property(e => e.Checktypeename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKTYPEENAME");

                entity.Property(e => e.Checktypename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKTYPENAME");

                entity.Property(e => e.Curraname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRANAME");

                entity.Property(e => e.Currename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENAME");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Debtorename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEBTORENAME");

                entity.Property(e => e.Debtorid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBTORID");

                entity.Property(e => e.Debtorname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEBTORNAME");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Fdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FDISTID");

                entity.Property(e => e.Financemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEMID");

                entity.Property(e => e.Fromename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMENAME");

                entity.Property(e => e.Fromname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMNAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Trnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSCODE");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("VALUE");

                entity.Property(e => e.Valuelocal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUELOCAL");

                entity.Property(e => e.Valuetrns)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUETRNS");

                entity.Property(e => e.Vendorid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VENDORID");
            });

            modelBuilder.Entity<SerialName>(entity =>
            {
                entity.ToTable("SERIAL_NAME");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Serial)
                    .HasPrecision(4)
                    .HasColumnName("SERIAL");
            });

            modelBuilder.Entity<Services4initialRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SERVICES_4INITIAL_REQUESTS");

                entity.Property(e => e.Build)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BUILD");

                entity.Property(e => e.BuildCode)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BUILD_CODE");

                entity.Property(e => e.CalculationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CALCULATION_DATE");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ADDRESS");

                entity.Property(e => e.CustomerAname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CODE");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.DepositMaintenanceDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEPOSIT_MAINTENANCE_DATE");

                entity.Property(e => e.DepositMaintenanceRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_RATIO");

                entity.Property(e => e.DepositMaintenanceValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_VALUE");

                entity.Property(e => e.FinanceFval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FINANCE_FVAL");

                entity.Property(e => e.Floor)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FLOOR");

                entity.Property(e => e.FloorCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FLOOR_CODE");

                entity.Property(e => e.GardenSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GARDEN_SPACE");

                entity.Property(e => e.HandoverDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE");

                entity.Property(e => e.IndateFrom)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE_FROM");

                entity.Property(e => e.IndateTo)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE_TO");

                entity.Property(e => e.InitialRequest)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INITIAL_REQUEST");

                entity.Property(e => e.InstitemValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_VALUE");

                entity.Property(e => e.IsDebtor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_DEBTOR");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.LayoutName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT_NAME");

                entity.Property(e => e.MandatoryCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORY_CODE");

                entity.Property(e => e.MandatoryId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORY_ID");

                entity.Property(e => e.OrderIdx)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORDER_IDX");

                entity.Property(e => e.PaymentRequestsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYMENT_REQUESTS_ID");

                entity.Property(e => e.Project)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.Requestm2Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REQUESTM2_ID");

                entity.Property(e => e.RequestmId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REQUESTM_ID");

                entity.Property(e => e.ServicesFinanceId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_FINANCE_ID");

                entity.Property(e => e.Stag)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAG");

                entity.Property(e => e.Stagecode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STAGECODE");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_CODE");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID");

                entity.Property(e => e.UnitSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_SPACE");

                entity.Property(e => e.Unitcode1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNITCODE");
            });

            modelBuilder.Entity<ServicesBenefit>(entity =>
            {
                entity.ToTable("SERVICES_BENEFITS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.CalculationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CALCULATION_DATE");

                entity.Property(e => e.DepositBenefitsRetio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_BENEFITS_RETIO");

                entity.Property(e => e.MDelay)
                    .HasColumnType("NUMBER")
                    .HasColumnName("M_DELAY");
            });

            modelBuilder.Entity<ServicesBillSummaryTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SERVICES_BILL_SUMMARY_TEMP");

                entity.Property(e => e.BuildCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BUILD_CODE");

                entity.Property(e => e.BuildName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BUILD_NAME");

                entity.Property(e => e.CustomerAname)
                    .HasMaxLength(200)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.FloorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FLOOR_CODE");

                entity.Property(e => e.FloorName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FLOOR_NAME");

                entity.Property(e => e.LayoutName)
                    .HasMaxLength(50)
                    .HasColumnName("LAYOUT_NAME");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROJECT_NAME");

                entity.Property(e => e.StageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STAGE_CODE");

                entity.Property(e => e.StageName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STAGE_NAME");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(100)
                    .HasColumnName("UNIQUE_ID");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(50)
                    .HasColumnName("UNIT_CODE");
            });

            modelBuilder.Entity<ServicesBillTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SERVICES_BILL_TEMP");

                entity.Property(e => e.ActualIndateTo)
                    .HasColumnType("DATE")
                    .HasColumnName("ACTUAL_INDATE_TO");

                entity.Property(e => e.Aservname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASERVNAME");

                entity.Property(e => e.Column)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("COLUMN_");

                entity.Property(e => e.Column1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("COLUMN_1");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER(22,3)")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ADDRESS");

                entity.Property(e => e.CustomerAname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CODE");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER(22,3)")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.FinanceRemark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("FINANCE_REMARK");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.IndateTo)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE_TO");

                entity.Property(e => e.IsDebtor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_DEBTOR");

                entity.Property(e => e.LayoutName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT_NAME");

                entity.Property(e => e.Percname)
                    .HasColumnType("NUMBER(22,4)")
                    .HasColumnName("PERCNAME");

                entity.Property(e => e.ServicesInstitemServTypeId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_INSTITEM_SERV_TYPE_ID");

                entity.Property(e => e.Stagename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("STAGENAME");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNIQUE_ID");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_CODE");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID");
            });

            modelBuilder.Entity<ServicesDeposit>(entity =>
            {
                entity.ToTable("SERVICES_DEPOSIT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Depositratio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSITRATIO");

                entity.Property(e => e.Fromdate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROMDATE");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITID");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ServicesDeposits)
                    .HasForeignKey(d => d.Unitid)
                    .HasConstraintName("SERVICES_DEPOSIT_R01");
            });

            modelBuilder.Entity<ServicesFinance>(entity =>
            {
                entity.ToTable("SERVICES_FINANCE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.CustId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUST_ID");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Paytype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAYTYPE");

                entity.Property(e => e.ServPaymentRequestsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERV_PAYMENT_REQUESTS_ID");

                entity.Property(e => e.ServPaymentRequestsmId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERV_PAYMENT_REQUESTSM_ID");

                entity.Property(e => e.Trnsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSID");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID");

                entity.HasOne(d => d.ServPaymentRequests)
                    .WithMany(p => p.ServicesFinances)
                    .HasForeignKey(d => d.ServPaymentRequestsId)
                    .HasConstraintName("SYS_C0019504");

                entity.HasOne(d => d.ServPaymentRequestsm)
                    .WithMany(p => p.ServicesFinances)
                    .HasForeignKey(d => d.ServPaymentRequestsmId)
                    .HasConstraintName("SERVICES_FINANCE_R01");

                entity.HasOne(d => d.Trns)
                    .WithMany(p => p.ServicesFinances)
                    .HasForeignKey(d => d.Trnsid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SERVICES_FINANCE_R02");
            });

            modelBuilder.Entity<ServicesFine>(entity =>
            {
                entity.ToTable("SERVICES_FINES");

                entity.HasIndex(e => e.Aname, "SERVICES_FINES_U02")
                    .IsUnique();

                entity.HasIndex(e => e.Ename, "SERVICES_FINES_U03")
                    .IsUnique();

                entity.HasIndex(e => e.Code, "SERVICES_FINES_U05")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.IsActive)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Ratio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RATIO");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("UPDATED_DATE");

                entity.Property(e => e.UpdatedUser)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UPDATED_USER");
            });

            modelBuilder.Entity<ServicesHold>(entity =>
            {
                entity.ToTable("SERVICES_HOLD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Servicesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICESID");

                entity.Property(e => e.Transdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSDATE");

                entity.Property(e => e.Transtype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TRANSTYPE");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITID");

                entity.HasOne(d => d.Services)
                    .WithMany(p => p.ServicesHolds)
                    .HasForeignKey(d => d.Servicesid)
                    .HasConstraintName("SERVICES_HOLD_R01");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ServicesHolds)
                    .HasForeignKey(d => d.Unitid)
                    .HasConstraintName("SERVICES_HOLD_R02");
            });

            modelBuilder.Entity<ServicesInstitem>(entity =>
            {
                entity.ToTable("SERVICES_INSTITEM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.CalculationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CALCULATION_DATE")
                    .HasDefaultValueSql("null ");

                entity.Property(e => e.CustStoreAllcodesIdnew)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUST_STORE_ALLCODES_IDNEW");

                entity.Property(e => e.CustStoreAllcodesIdoriginal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUST_STORE_ALLCODES_IDORIGINAL");

                entity.Property(e => e.DepositBenefitsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEPOSIT_BENEFITS_DATE")
                    .HasDefaultValueSql("null ");

                entity.Property(e => e.DepositBenefitsRetio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_BENEFITS_RETIO");

                entity.Property(e => e.DepositMaintenanceValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_VALUE");

                entity.Property(e => e.GardenSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GARDEN_SPACE");

                entity.Property(e => e.HandoverDateActual)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_ACTUAL");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.InstitemmaintypesId1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMMAINTYPES_ID");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.Mandatoryid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORYID");

                entity.Property(e => e.OrderIdx)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORDER_IDX")
                    .HasDefaultValueSql("9999 ");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Salesdate)
                    .HasColumnType("DATE")
                    .HasColumnName("SALESDATE");

                entity.HasOne(d => d.CustStoreAllcodesIdnewNavigation)
                    .WithMany(p => p.ServicesInstitemCustStoreAllcodesIdnewNavigations)
                    .HasForeignKey(d => d.CustStoreAllcodesIdnew)
                    .HasConstraintName("SERVICES_INSTITEM_R02");

                entity.HasOne(d => d.InstitemMainTypes)
                    .WithMany(p => p.ServicesInstitemInstitemMainTypes)
                    .HasForeignKey(d => d.InstitemMainTypesId)
                    .HasConstraintName("SERVICES_INSTITEM_R04");

                entity.HasOne(d => d.InstitemmaintypesId1Navigation)
                    .WithMany(p => p.ServicesInstitemInstitemmaintypesId1Navigations)
                    .HasForeignKey(d => d.InstitemmaintypesId1)
                    .HasConstraintName("SERVICES_INSTITEM_R06");

                entity.HasOne(d => d.LayoutNavigation)
                    .WithMany(p => p.ServicesInstitems)
                    .HasForeignKey(d => d.Layout)
                    .HasConstraintName("SERVICES_INSTITEM_R03");

                entity.HasOne(d => d.Mandatory)
                    .WithMany(p => p.ServicesInstitemMandatories)
                    .HasForeignKey(d => d.Mandatoryid)
                    .HasConstraintName("SERVICES_INSTITEM_R05");
            });

            modelBuilder.Entity<ServicesInstitemServiceType>(entity =>
            {
                entity.ToTable("SERVICES_INSTITEM_SERVICE_TYPE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ServicesInstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_INSTITEM_ID");

                entity.Property(e => e.ServicesTypeId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_TYPE_ID");

                entity.Property(e => e.Servicesstatus)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SERVICESSTATUS");

                entity.HasOne(d => d.ServicesType)
                    .WithMany(p => p.ServicesInstitemServiceTypes)
                    .HasForeignKey(d => d.ServicesTypeId)
                    .HasConstraintName("SERVICES_INSTITEM_SERVICE__R01");
            });

            modelBuilder.Entity<ServicesInstitemView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SERVICES_INSTITEM_VIEW");

                entity.Property(e => e.BenefitsValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BENEFITS_VALUE");

                entity.Property(e => e.CalculationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CALCULATION_DATE");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ADDRESS");

                entity.Property(e => e.CustomerAname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CODE");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.DepositMaintenanceDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEPOSIT_MAINTENANCE_DATE");

                entity.Property(e => e.DepositMaintenanceRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_RATIO");

                entity.Property(e => e.DepositMaintenanceValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_VALUE");

                entity.Property(e => e.GardenSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GARDEN_SPACE");

                entity.Property(e => e.HandoverDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE");

                entity.Property(e => e.InstitemValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_VALUE");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.LayoutName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT_NAME");

                entity.Property(e => e.MandatoryCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORY_CODE");

                entity.Property(e => e.MandatoryId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORY_ID");

                entity.Property(e => e.OrderIdx)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORDER_IDX");

                entity.Property(e => e.StageCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STAGE_CODE");

                entity.Property(e => e.StageName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAGE_NAME");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_CODE");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID");

                entity.Property(e => e.UnitSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_SPACE");
            });

            modelBuilder.Entity<ServicesInstitemViewMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SERVICES_INSTITEM_VIEW_MOD");

                entity.Property(e => e.BenefitsValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BENEFITS_VALUE");

                entity.Property(e => e.CalculationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CALCULATION_DATE");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ADDRESS");

                entity.Property(e => e.CustomerAname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CODE");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.DepositMaintenanceDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEPOSIT_MAINTENANCE_DATE");

                entity.Property(e => e.DepositMaintenanceRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_RATIO");

                entity.Property(e => e.DepositMaintenanceValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_VALUE");

                entity.Property(e => e.DepositRequestDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEPOSIT_REQUEST_DATE");

                entity.Property(e => e.GardenSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GARDEN_SPACE");

                entity.Property(e => e.HandoverDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE");

                entity.Property(e => e.InstitemValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_VALUE");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.LayoutName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT_NAME");

                entity.Property(e => e.MandatoryCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORY_CODE");

                entity.Property(e => e.MandatoryId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORY_ID");

                entity.Property(e => e.OrderIdx)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORDER_IDX");

                entity.Property(e => e.ServicesDepositDate)
                    .HasColumnType("DATE")
                    .HasColumnName("SERVICES_DEPOSIT_DATE");

                entity.Property(e => e.ServicesDepositRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_DEPOSIT_RATIO");

                entity.Property(e => e.StageCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STAGE_CODE");

                entity.Property(e => e.StageName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAGE_NAME");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_CODE");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID");

                entity.Property(e => e.UnitSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_SPACE");
            });

            modelBuilder.Entity<ServicesIntergrationsetting>(entity =>
            {
                entity.ToTable("SERVICES_INTERGRATIONSETTING");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Currentdatabasename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENTDATABASENAME");

                entity.Property(e => e.Databasename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DATABASENAME");

                entity.Property(e => e.Dblinkname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DBLINKNAME");

                entity.Property(e => e.Integrationtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INTEGRATIONTYPE");

                entity.Property(e => e.Schemaname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SCHEMANAME");
            });

            modelBuilder.Entity<ServicesMeterRedingsTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SERVICES_METER_REDINGS_TEMP");

                entity.Property(e => e.Consumed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONSUMED");

                entity.Property(e => e.CurrentIslastReading)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_ISLAST_READING");

                entity.Property(e => e.CurrentReading)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENT_READING");

                entity.Property(e => e.CustStoreAllcodesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUST_STORE_ALLCODES_ID");

                entity.Property(e => e.InDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IN_DATE");

                entity.Property(e => e.IsAverageReading)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_AVERAGE_READING");

                entity.Property(e => e.PreviousIsaverage)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PREVIOUS_ISAVERAGE");

                entity.Property(e => e.PreviousLastavgReading)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PREVIOUS_LASTAVG_READING");

                entity.Property(e => e.PreviousReading)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PREVIOUS_READING");

                entity.Property(e => e.PreviousReadingIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("PREVIOUS_READING_INDATE");

                entity.Property(e => e.ServicesEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERVICES_ENAME");

                entity.Property(e => e.ServicesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_ID");

                entity.Property(e => e.ServicesInstitemServTypeId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_INSTITEM_SERV_TYPE_ID");

                entity.Property(e => e.ServicesName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERVICES_NAME");

                entity.Property(e => e.Stage)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAGE");

                entity.Property(e => e.TotalPrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_PRICE");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNIQUE_ID");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_PRICE");
            });

            modelBuilder.Entity<ServicesMetersReading>(entity =>
            {
                entity.ToTable("SERVICES_METERS_READINGS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.CustStoreAllcodesIdnew)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUST_STORE_ALLCODES_IDNEW");

                entity.Property(e => e.InDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IN_DATE");

                entity.Property(e => e.InsertDate)
                    .HasColumnType("DATE")
                    .HasColumnName("INSERT_DATE");

                entity.Property(e => e.IsAverageReading)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_AVERAGE_READING");

                entity.Property(e => e.MeterReading)
                    .HasColumnType("NUMBER")
                    .HasColumnName("METER_READING");

                entity.Property(e => e.ServicesInstitemServTypeId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_INSTITEM_SERV_TYPE_ID");

                entity.HasOne(d => d.CustStoreAllcodesIdnewNavigation)
                    .WithMany(p => p.ServicesMetersReadings)
                    .HasForeignKey(d => d.CustStoreAllcodesIdnew)
                    .HasConstraintName("SERVICES_METERS_READINGS_R02");

                entity.HasOne(d => d.ServicesInstitemServType)
                    .WithMany(p => p.ServicesMetersReadings)
                    .HasForeignKey(d => d.ServicesInstitemServTypeId)
                    .HasConstraintName("SERVICES_METERS_READINGS_R01");
            });

            modelBuilder.Entity<ServicesPaymenRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SERVICES_PAYMEN_REQUESTS");

                entity.Property(e => e.Amount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENT_VALUE");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ADDRESS");

                entity.Property(e => e.CustomerAname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CODE");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.IndateFrom)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE_FROM");

                entity.Property(e => e.IndateTo)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE_TO");

                entity.Property(e => e.IsdepositBenefits)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISDEPOSIT_BENEFITS");

                entity.Property(e => e.JoinId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("JOIN_ID");

                entity.Property(e => e.MeasureUnit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEASURE_UNIT");

                entity.Property(e => e.MeasureUnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MEASURE_UNIT_ID");

                entity.Property(e => e.PaymentrequestsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYMENTREQUESTS_ID");

                entity.Property(e => e.PaymentrequestsmId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYMENTREQUESTSM_ID");

                entity.Property(e => e.PreviousValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PREVIOUS_VALUE");

                entity.Property(e => e.ServicePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICE_PRICE");

                entity.Property(e => e.ServiceType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERVICE_TYPE");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_CODE");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID");
            });

            modelBuilder.Entity<ServicesPaymentRequest>(entity =>
            {
                entity.ToTable("SERVICES_PAYMENT_REQUESTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ActualIndateTo)
                    .HasColumnType("DATE")
                    .HasColumnName("ACTUAL_INDATE_TO");

                entity.Property(e => e.Amount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CurrentValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENT_VALUE");

                entity.Property(e => e.DepositBenefits)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEPOSIT_BENEFITS")
                    .HasDefaultValueSql("null ");

                entity.Property(e => e.IndateFrom)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE_FROM");

                entity.Property(e => e.IndateTo)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE_TO");

                entity.Property(e => e.IsAverageReading)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_AVERAGE_READING");

                entity.Property(e => e.IsDebtor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_DEBTOR");

                entity.Property(e => e.IsInitial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_INITIAL")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.LastEdit)
                    .HasColumnType("DATE")
                    .HasColumnName("LAST_EDIT");

                entity.Property(e => e.MDelay)
                    .HasColumnType("NUMBER")
                    .HasColumnName("M_DELAY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.PreviousValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PREVIOUS_VALUE");

                entity.Property(e => e.RecordingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RECORDING_DATE");

                entity.Property(e => e.ServicePrice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICE_PRICE");

                entity.Property(e => e.ServicesInstitemServTypeId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_INSTITEM_SERV_TYPE_ID");

                entity.Property(e => e.ServicesPaymentRequestsmId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_PAYMENT_REQUESTSM_ID")
                    .HasDefaultValueSql("null ");

                entity.Property(e => e.Servtype)
                    .HasMaxLength(1)
                    .HasColumnName("SERVTYPE");

                entity.Property(e => e.ServunitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVUNIT_ID");

                entity.HasOne(d => d.ServicesInstitemServType)
                    .WithMany(p => p.ServicesPaymentRequests)
                    .HasForeignKey(d => d.ServicesInstitemServTypeId)
                    .HasConstraintName("SERVICES_PAYMENT_REQUESTS_R01");

                entity.HasOne(d => d.ServicesPaymentRequestsm)
                    .WithMany(p => p.ServicesPaymentRequests)
                    .HasForeignKey(d => d.ServicesPaymentRequestsmId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SERVICES_PAYMENT_REQUESTS_R02");
            });

            modelBuilder.Entity<ServicesPaymentRequestsm>(entity =>
            {
                entity.ToTable("SERVICES_PAYMENT_REQUESTSM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.CustId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUST_ID")
                    .HasDefaultValueSql("null ");

                entity.Property(e => e.InDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IN_DATE");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_AMOUNT");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID")
                    .HasDefaultValueSql("null ");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ServicesPaymentRequestsms)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("SERVICES_PAYMENT_REQUESTSM_R01");
            });

            modelBuilder.Entity<ServicesPrice>(entity =>
            {
                entity.ToTable("SERVICES_PRICE");

                entity.HasIndex(e => new { e.ServicesTypeId, e.Layout, e.PartId }, "SERVICES_PRICE_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE");

                entity.Property(e => e.PartId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PART_ID");

                entity.Property(e => e.PartType)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PART_TYPE");

                entity.Property(e => e.Price)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICE");

                entity.Property(e => e.ServicesTypeId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_TYPE_ID");

                entity.HasOne(d => d.LayoutNavigation)
                    .WithMany(p => p.ServicesPriceLayoutNavigations)
                    .HasForeignKey(d => d.Layout)
                    .HasConstraintName("SERVICES_PRICE_R02");

                entity.HasOne(d => d.Part)
                    .WithMany(p => p.ServicesPriceParts)
                    .HasForeignKey(d => d.PartId)
                    .HasConstraintName("SYS_C0019659");

                entity.HasOne(d => d.ServicesType)
                    .WithMany(p => p.ServicesPrices)
                    .HasForeignKey(d => d.ServicesTypeId)
                    .HasConstraintName("SERVICES_PRICE_R01");
            });

            modelBuilder.Entity<ServicesRequestsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SERVICES_REQUESTS_VIEW");

                entity.Property(e => e.Aservname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASERVNAME");

                entity.Property(e => e.Benefits)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BENEFITS");

                entity.Property(e => e.CalculationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CALCULATION_DATE");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ADDRESS");

                entity.Property(e => e.CustomerAname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CODE");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.DepositMaintenanceDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEPOSIT_MAINTENANCE_DATE");

                entity.Property(e => e.DepositMaintenanceRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_RATIO");

                entity.Property(e => e.DepositMaintenanceValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_VALUE");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Fvalforservice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVALFORSERVICE");

                entity.Property(e => e.GardenSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GARDEN_SPACE");

                entity.Property(e => e.HandoverDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE");

                entity.Property(e => e.InDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IN_DATE");

                entity.Property(e => e.InstitemValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_VALUE");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.LayoutName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT_NAME");

                entity.Property(e => e.MandatoryCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORY_CODE");

                entity.Property(e => e.MandatoryId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORY_ID");

                entity.Property(e => e.Oid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OID");

                entity.Property(e => e.RequestmId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REQUESTM_ID");

                entity.Property(e => e.RequirdValue)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRD_VALUE");

                entity.Property(e => e.Servicesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SERVICESID");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_CODE");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID");

                entity.Property(e => e.UnitSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_SPACE");
            });

            modelBuilder.Entity<ServicesRequestsViewb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SERVICES_REQUESTS_VIEWB");

                entity.Property(e => e.Aservname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASERVNAME");

                entity.Property(e => e.Benefits)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BENEFITS");

                entity.Property(e => e.CalculationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CALCULATION_DATE");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ADDRESS");

                entity.Property(e => e.CustomerAname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CODE");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.DepositMaintenanceDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEPOSIT_MAINTENANCE_DATE");

                entity.Property(e => e.DepositMaintenanceRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_RATIO");

                entity.Property(e => e.DepositMaintenanceValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_VALUE");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Fvalforservice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVALFORSERVICE");

                entity.Property(e => e.GardenSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GARDEN_SPACE");

                entity.Property(e => e.HandoverDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE");

                entity.Property(e => e.InDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IN_DATE");

                entity.Property(e => e.InstitemValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_VALUE");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.LayoutName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT_NAME");

                entity.Property(e => e.MandatoryCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORY_CODE");

                entity.Property(e => e.MandatoryId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORY_ID");

                entity.Property(e => e.Oid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OID");

                entity.Property(e => e.Remainamount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REMAINAMOUNT");

                entity.Property(e => e.RequestmId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REQUESTM_ID");

                entity.Property(e => e.RequirdValue)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRD_VALUE");

                entity.Property(e => e.Servicesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SERVICESID");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_CODE");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID");

                entity.Property(e => e.UnitSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_SPACE");
            });

            modelBuilder.Entity<ServicesRequestsmFine>(entity =>
            {
                entity.ToTable("SERVICES_REQUESTSM_FINES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.CalculationRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CALCULATION_RATIO");

                entity.Property(e => e.IndateTo)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE_TO");

                entity.Property(e => e.RecordingDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RECORDING_DATE");

                entity.Property(e => e.ServicesFinesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_FINES_ID");

                entity.Property(e => e.ServicesPaymentRequestsmId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_PAYMENT_REQUESTSM_ID");

                entity.Property(e => e.TotalDebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_DEBIT");

                entity.HasOne(d => d.ServicesFines)
                    .WithMany(p => p.ServicesRequestsmFines)
                    .HasForeignKey(d => d.ServicesFinesId)
                    .HasConstraintName("SERVICES_REQUESTSM_FINES_R02");

                entity.HasOne(d => d.ServicesPaymentRequestsm)
                    .WithMany(p => p.ServicesRequestsmFines)
                    .HasForeignKey(d => d.ServicesPaymentRequestsmId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SERVICES_REQUESTSM_FINES_R01");
            });

            modelBuilder.Entity<ServicesRequestsmView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SERVICES_REQUESTSM_VIEW");

                entity.Property(e => e.Benefits)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BENEFITS");

                entity.Property(e => e.CalculationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CALCULATION_DATE");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ADDRESS");

                entity.Property(e => e.CustomerAname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CODE");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.DepositMaintenanceDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEPOSIT_MAINTENANCE_DATE");

                entity.Property(e => e.DepositMaintenanceRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_RATIO");

                entity.Property(e => e.DepositMaintenanceValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_VALUE");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVAL");

                entity.Property(e => e.GardenSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GARDEN_SPACE");

                entity.Property(e => e.HandoverDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE");

                entity.Property(e => e.InDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IN_DATE");

                entity.Property(e => e.InstitemValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_VALUE");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.LayoutName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT_NAME");

                entity.Property(e => e.MandatoryCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORY_CODE");

                entity.Property(e => e.MandatoryId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORY_ID");

                entity.Property(e => e.RequestmId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REQUESTM_ID");

                entity.Property(e => e.RequirdValue)
                    .IsUnicode(false)
                    .HasColumnName("REQUIRD_VALUE");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_CODE");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID");

                entity.Property(e => e.UnitSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_SPACE");
            });

            modelBuilder.Entity<ServicesRequestsonunitsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SERVICES_REQUESTSONUNITS_VIEW");

                entity.Property(e => e.Benefits)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BENEFITS");

                entity.Property(e => e.CalculationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CALCULATION_DATE");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ADDRESS");

                entity.Property(e => e.CustomerAname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CODE");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.DepositMaintenanceDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEPOSIT_MAINTENANCE_DATE");

                entity.Property(e => e.DepositMaintenanceRatio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_RATIO");

                entity.Property(e => e.DepositMaintenanceValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPOSIT_MAINTENANCE_VALUE");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVAL");

                entity.Property(e => e.GardenSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GARDEN_SPACE");

                entity.Property(e => e.HandoverDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE");

                entity.Property(e => e.InstitemValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_VALUE");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.LayoutName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT_NAME");

                entity.Property(e => e.MandatoryCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORY_CODE");

                entity.Property(e => e.MandatoryId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORY_ID");

                entity.Property(e => e.RequirdValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REQUIRD_VALUE");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_CODE");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID");

                entity.Property(e => e.UnitSpace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_SPACE");
            });

            modelBuilder.Entity<ServicesType>(entity =>
            {
                entity.HasKey(e => e.Servicesid)
                    .HasName("SERVICES_TYPE_PK");

                entity.ToTable("SERVICES_TYPE");

                entity.Property(e => e.Servicesid)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SERVICESID");

                entity.Property(e => e.Aservname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASERVNAME");

                entity.Property(e => e.DependOnUnitArea)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEPEND_ON_UNIT_AREA")
                    .HasDefaultValueSql("null ");

                entity.Property(e => e.Eservname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ESERVNAME");

                entity.Property(e => e.IsAnnualMintinance)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_ANNUAL_MINTINANCE");

                entity.Property(e => e.IsDeposit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IS_DEPOSIT");

                entity.Property(e => e.IsInitial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_INITIAL")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.MDelay)
                    .HasColumnType("NUMBER")
                    .HasColumnName("M_DELAY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Servcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SERVCODE");

                entity.Property(e => e.Servcounter)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVCOUNTER");

                entity.Property(e => e.Servtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SERVTYPE");

                entity.Property(e => e.Servunit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVUNIT");

                entity.HasOne(d => d.ServunitNavigation)
                    .WithMany(p => p.ServicesTypes)
                    .HasForeignKey(d => d.Servunit)
                    .HasConstraintName("SERVICES_TYPE_R01");
            });

            modelBuilder.Entity<Servicesdatesmonthlytmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SERVICESDATESMONTHLYTMP");

                entity.Property(e => e.Aservname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASERVNAME");

                entity.Property(e => e.BenefitsValue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BENEFITS_VALUE");

                entity.Property(e => e.CustomerAname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CODE");

                entity.Property(e => e.Fvalforservice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVALFORSERVICE");

                entity.Property(e => e.InDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IN_DATE");

                entity.Property(e => e.LayoutName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT_NAME");

                entity.Property(e => e.Servicevalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICEVALUE");

                entity.Property(e => e.Stagename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAGENAME");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL");

                entity.Property(e => e.Totalrequestsdebitprev)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALREQUESTSDEBITPREV");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_CODE");
            });

            modelBuilder.Entity<Servicetrnstype>(entity =>
            {
                entity.ToTable("SERVICETRNSTYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Servicetype>(entity =>
            {
                entity.ToTable("SERVICETYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Defaultprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEFAULTPRICE");

                entity.Property(e => e.Defaultprice2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEFAULTPRICE2");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.InstcalcmethodId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTCALCMETHOD_ID");

                entity.Property(e => e.Institem1ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM1ENAME");

                entity.Property(e => e.Institem1name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM1NAME");

                entity.Property(e => e.Institem2ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM2ENAME");

                entity.Property(e => e.Institem2name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM2NAME");

                entity.Property(e => e.Institem3ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM3ENAME");

                entity.Property(e => e.Institem3name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM3NAME");

                entity.Property(e => e.Linkedtoparent1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LINKEDTOPARENT1");

                entity.Property(e => e.Linkedtoparent2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LINKEDTOPARENT2");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Use1stpricepolicy1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE1STPRICEPOLICY1");

                entity.Property(e => e.Use1stpricepolicy2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE1STPRICEPOLICY2");

                entity.Property(e => e.Use2ndpricepolicy1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE2NDPRICEPOLICY1");

                entity.Property(e => e.Use2ndpricepolicy2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE2NDPRICEPOLICY2");

                entity.Property(e => e.UseInstitem1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM1");

                entity.Property(e => e.UseInstitem1q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM1Q");

                entity.Property(e => e.UseInstitem2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM2");

                entity.Property(e => e.UseInstitem2q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM2Q");

                entity.Property(e => e.UseInstitem3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM3");

                entity.Property(e => e.UseInstitem3q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USE_INSTITEM3Q");

                entity.Property(e => e.Useallpricepolicy1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEALLPRICEPOLICY1");

                entity.Property(e => e.Useallpricepolicy2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEALLPRICEPOLICY2");

                entity.Property(e => e.Usedinmaintain)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("USEDINMAINTAIN");

                entity.Property(e => e.Valueorratio1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO1");

                entity.Property(e => e.Valueorratio2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VALUEORRATIO2");

                entity.HasOne(d => d.Instcalcmethod)
                    .WithMany(p => p.Servicetypes)
                    .HasForeignKey(d => d.InstcalcmethodId)
                    .HasConstraintName("SERVICETYPES_R01");
            });

            modelBuilder.Entity<Shipping>(entity =>
            {
                entity.ToTable("SHIPPING");

                entity.Property(e => e.Shippingid)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SHIPPINGID");

                entity.Property(e => e.Approval)
                    .HasPrecision(1)
                    .HasColumnName("APPROVAL");

                entity.Property(e => e.Carid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CARID");

                entity.Property(e => e.Carnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CARNUMBER");

                entity.Property(e => e.Carowner)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CAROWNER");

                entity.Property(e => e.Cartype)
                    .HasPrecision(10)
                    .HasColumnName("CARTYPE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Driverid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DRIVERID");

                entity.Property(e => e.Drivername)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DRIVERNAME");

                entity.Property(e => e.Fromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMID");

                entity.Property(e => e.Licnumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("LICNUMBER");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Phonenumber)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("PHONENUMBER");

                entity.Property(e => e.Shipcode)
                    .HasPrecision(10)
                    .HasColumnName("SHIPCODE");

                entity.Property(e => e.Shippingcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPPINGCOST");

                entity.Property(e => e.Shippingcustomerid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SHIPPINGCUSTOMERID");

                entity.Property(e => e.Shippingholderid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SHIPPINGHOLDERID");

                entity.Property(e => e.Shippingtaxratio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPPINGTAXRATIO");

                entity.Property(e => e.Shippingtaxvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPPINGTAXVALUE");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.Toid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOID");

                entity.Property(e => e.Totalshippingcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALSHIPPINGCOST");

                entity.HasOne(d => d.StoreTrnsM)
                    .WithMany(p => p.Shippings)
                    .HasForeignKey(d => d.StoreTrnsMId)
                    .HasConstraintName("SHIPPING_R01");
            });

            modelBuilder.Entity<ShippingSpec>(entity =>
            {
                entity.ToTable("SHIPPING_SPEC");

                entity.HasIndex(e => e.TransCode, "SHIPPING_SPEC_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Areainform)
                    .HasPrecision(1)
                    .HasColumnName("AREAINFORM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Areainformcode)
                    .HasPrecision(10)
                    .HasColumnName("AREAINFORMCODE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Carinform)
                    .HasPrecision(1)
                    .HasColumnName("CARINFORM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Costcode)
                    .HasPrecision(10)
                    .HasColumnName("COSTCODE")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Customercode)
                    .HasPrecision(1)
                    .HasColumnName("CUSTOMERCODE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Driverinform)
                    .HasPrecision(1)
                    .HasColumnName("DRIVERINFORM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Issidschange)
                    .HasPrecision(1)
                    .HasColumnName("ISSIDSCHANGE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.MainTypeId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAIN_TYPE_ID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Moreshipmove)
                    .HasPrecision(1)
                    .HasColumnName("MORESHIPMOVE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Otherdriverinform)
                    .HasPrecision(1)
                    .HasColumnName("OTHERDRIVERINFORM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Priceinship)
                    .HasPrecision(1)
                    .HasColumnName("PRICEINSHIP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Shippingnotes)
                    .HasPrecision(1)
                    .HasColumnName("SHIPPINGNOTES")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Shippingvalue)
                    .HasPrecision(1)
                    .HasColumnName("SHIPPINGVALUE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Taximpact)
                    .HasPrecision(10)
                    .HasColumnName("TAXIMPACT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Taxshipping)
                    .HasPrecision(1)
                    .HasColumnName("TAXSHIPPING")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.TransCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRANS_CODE");

                entity.HasOne(d => d.TransCodeNavigation)
                    .WithOne(p => p.ShippingSpec)
                    .HasForeignKey<ShippingSpec>(d => d.TransCode)
                    .HasConstraintName("SHIPPING_SPEC_R01");
            });

            modelBuilder.Entity<ShippingTemp>(entity =>
            {
                entity.HasKey(e => e.Shippingid)
                    .HasName("SHIPPING_TEMP_PK");

                entity.ToTable("SHIPPING_TEMP");

                entity.Property(e => e.Shippingid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SHIPPINGID");

                entity.Property(e => e.Approval)
                    .HasPrecision(1)
                    .HasColumnName("APPROVAL");

                entity.Property(e => e.Carid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CARID");

                entity.Property(e => e.Carnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CARNUMBER");

                entity.Property(e => e.Carowner)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CAROWNER");

                entity.Property(e => e.Cartype)
                    .HasPrecision(10)
                    .HasColumnName("CARTYPE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1\n");

                entity.Property(e => e.Driverid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DRIVERID");

                entity.Property(e => e.Drivername)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DRIVERNAME");

                entity.Property(e => e.Fromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMID");

                entity.Property(e => e.Licnumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("LICNUMBER");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Phonenumber)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("PHONENUMBER");

                entity.Property(e => e.Rowstate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROWSTATE");

                entity.Property(e => e.Shipcode)
                    .HasPrecision(10)
                    .HasColumnName("SHIPCODE");

                entity.Property(e => e.Shippingcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPPINGCOST");

                entity.Property(e => e.Shippingcustomerid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SHIPPINGCUSTOMERID");

                entity.Property(e => e.Shippingholderid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SHIPPINGHOLDERID");

                entity.Property(e => e.Shippingtaxratio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPPINGTAXRATIO");

                entity.Property(e => e.Shippingtaxvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPPINGTAXVALUE");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.Toid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOID");

                entity.Property(e => e.Totalshippingcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALSHIPPINGCOST");

                entity.HasOne(d => d.StoreTrnsM)
                    .WithMany(p => p.ShippingTemps)
                    .HasForeignKey(d => d.StoreTrnsMId)
                    .HasConstraintName("SHIPPING_TEMP_R01");
            });

            modelBuilder.Entity<Shippingcotype>(entity =>
            {
                entity.ToTable("SHIPPINGCOTYPES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Companycode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYCODE");

                entity.Property(e => e.Companytype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYTYPE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<Simaphore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SIMAPHORE");

                entity.HasIndex(e => e.Code, "UNIQUE_CODE")
                    .IsUnique();

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Sessionid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SESSIONID");
            });

            modelBuilder.Entity<Simplesaleformview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SIMPLESALEFORMVIEW");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Customerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERENAME");

                entity.Property(e => e.Customerid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Customername)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Formstatustypes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMSTATUSTYPES");

                entity.Property(e => e.InstitemMainTypesEname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_ENAME");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.InstitemMainTypesName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEM_MAIN_TYPES_NAME");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Layout)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.PartCode1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE1");

                entity.Property(e => e.PartCode2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE2");

                entity.Property(e => e.PartCode3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE3");

                entity.Property(e => e.PartCode4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE4");

                entity.Property(e => e.PartCodeEname1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME1");

                entity.Property(e => e.PartCodeEname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME2");

                entity.Property(e => e.PartCodeEname3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME3");

                entity.Property(e => e.PartCodeEname4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_ENAME4");

                entity.Property(e => e.PartCodeName1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME1");

                entity.Property(e => e.PartCodeName2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME2");

                entity.Property(e => e.PartCodeName3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME3");

                entity.Property(e => e.PartCodeName4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PART_CODE_NAME4");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Staff1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFF1");

                entity.Property(e => e.Staff1id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STAFF1ID");

                entity.Property(e => e.Staff2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFF2");

                entity.Property(e => e.Staff2id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STAFF2ID");
            });

            modelBuilder.Entity<SlidesM>(entity =>
            {
                entity.ToTable("SLIDES_M");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AmountType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AMOUNT_TYPE");

                entity.Property(e => e.Aname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.MaxAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAX_AMOUNT");

                entity.Property(e => e.MiniAmount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MINI_AMOUNT");

                entity.Property(e => e.SlideLength)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SLIDE_LENGTH");
            });

            modelBuilder.Entity<SlidesO>(entity =>
            {
                entity.ToTable("SLIDES_O");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AmounFrom)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUN_FROM");

                entity.Property(e => e.Amount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.AmountTo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT_TO");

                entity.Property(e => e.AmountType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AMOUNT_TYPE");

                entity.Property(e => e.SlidesMId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SLIDES_M_ID");
            });

            modelBuilder.Entity<SlidesStaff>(entity =>
            {
                entity.ToTable("SLIDES_STAFF");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ApplyTo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APPLY_TO");

                entity.Property(e => e.FromDate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.SlidesMId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SLIDES_M_ID");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.ToDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TO_DATE");

                entity.HasOne(d => d.StoreAllcodes)
                    .WithMany(p => p.SlidesStaffs)
                    .HasForeignKey(d => d.StoreAllcodesId)
                    .HasConstraintName("SYS_C0019604");
            });

            modelBuilder.Entity<Sperateinstalment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPERATEINSTALMENTS");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Serialename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALENAME");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Val)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("VAL");
            });

            modelBuilder.Entity<Staffclass>(entity =>
            {
                entity.ToTable("STAFFCLASSES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NAME");
            });

            modelBuilder.Entity<Staffcust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STAFFCUST");

                entity.Property(e => e.Custcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTCODE");

                entity.Property(e => e.Custename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTENAME");

                entity.Property(e => e.Custname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTNAME");

                entity.Property(e => e.Staffcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("STAFFCODE");

                entity.Property(e => e.Staffename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFFENAME");

                entity.Property(e => e.Staffid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STAFFID");

                entity.Property(e => e.Staffname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAFFNAME");

                entity.Property(e => e.Storecustid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORECUSTID");
            });

            modelBuilder.Entity<Stafflevel>(entity =>
            {
                entity.ToTable("STAFFLEVELS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Stafflevel1)
                    .HasPrecision(1)
                    .HasColumnName("STAFFLEVEL");
            });

            modelBuilder.Entity<Staffsalesview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STAFFSALESVIEW");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Reservedunitsnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RESERVEDUNITSNUM");

                entity.Property(e => e.Saleformnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMNUM");
            });

            modelBuilder.Entity<Staffsubclass>(entity =>
            {
                entity.ToTable("STAFFSUBCLASSES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NAME");
            });

            modelBuilder.Entity<Staffunit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STAFFUNITS");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTID");

                entity.Property(e => e.Rcustomeraname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RCUSTOMERANAME");

                entity.Property(e => e.Rcustomerename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RCUSTOMERENAME");
            });

            modelBuilder.Entity<Stage>(entity =>
            {
                entity.ToTable("STAGES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Friday)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FRIDAY");

                entity.Property(e => e.Monday)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MONDAY");

                entity.Property(e => e.Rank)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RANK");

                entity.Property(e => e.Saturday)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SATURDAY");

                entity.Property(e => e.Speed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SPEED");

                entity.Property(e => e.Sunday)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUNDAY");

                entity.Property(e => e.Thursday)
                    .HasColumnType("NUMBER")
                    .HasColumnName("THURSDAY");

                entity.Property(e => e.Tuesday)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TUESDAY");

                entity.Property(e => e.Wednesday)
                    .HasColumnType("NUMBER")
                    .HasColumnName("WEDNESDAY");
            });

            modelBuilder.Entity<StageCost>(entity =>
            {
                entity.ToTable("STAGE_COST");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Accountid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCOUNTID");

                entity.Property(e => e.Cost)
                    .HasColumnType("NUMBER(24,9)")
                    .HasColumnName("COST");

                entity.Property(e => e.Costtype)
                    .HasPrecision(1)
                    .HasColumnName("COSTTYPE");

                entity.Property(e => e.Stageid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STAGEID");
            });

            modelBuilder.Entity<StageCostacc>(entity =>
            {
                entity.ToTable("STAGE_COSTACCS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Cost)
                    .HasColumnType("NUMBER(24,9)")
                    .HasColumnName("COST");

                entity.Property(e => e.Costtype)
                    .HasPrecision(1)
                    .HasColumnName("COSTTYPE");

                entity.Property(e => e.StageCostaccid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STAGE_COSTACCID");

                entity.Property(e => e.StageCostid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STAGE_COSTID");

                entity.HasOne(d => d.StageCostaccNavigation)
                    .WithMany(p => p.StageCostaccs)
                    .HasForeignKey(d => d.StageCostaccid)
                    .HasConstraintName("STAGE_COSTACCS_R02");

                entity.HasOne(d => d.StageCost)
                    .WithMany(p => p.StageCostaccs)
                    .HasForeignKey(d => d.StageCostid)
                    .HasConstraintName("STAGE_COSTACCS_R01");
            });

            modelBuilder.Entity<StoreAllcode>(entity =>
            {
                entity.HasKey(e => e.StoreAllcodesId)
                    .HasName("STORE_ALLCODES_PK");

                entity.ToTable("STORE_ALLCODES");

                entity.HasIndex(e => new { e.Code, e.GroupfId }, "STORE_ALLCODES_U01")
                    .IsUnique();

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Availableforreservation)
                    .HasPrecision(1)
                    .HasColumnName("AVAILABLEFORRESERVATION");

                entity.Property(e => e.CashBeginCredit)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("CASH_BEGIN_CREDIT");

                entity.Property(e => e.CashBeginDebit)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("CASH_BEGIN_DEBIT");

                entity.Property(e => e.Cashlimit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASHLIMIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CheckBeginCredit)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("CHECK_BEGIN_CREDIT");

                entity.Property(e => e.CheckBeginDebit)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("CHECK_BEGIN_DEBIT");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Createdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATEDATE");

                entity.Property(e => e.Discdepend)
                    .HasPrecision(1)
                    .HasColumnName("DISCDEPEND")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Discount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISCOUNT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Isbalanced)
                    .HasPrecision(1)
                    .HasColumnName("ISBALANCED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Isstoped)
                    .HasPrecision(1)
                    .HasColumnName("ISSTOPED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Istax)
                    .HasPrecision(1)
                    .HasColumnName("ISTAX")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.PeriodLimit)
                    .HasPrecision(10)
                    .HasColumnName("PERIOD_LIMIT")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Salestax)
                    .HasColumnType("NUMBER(20)")
                    .HasColumnName("SALESTAX")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Stoppednotes)
                    .IsUnicode(false)
                    .HasColumnName("STOPPEDNOTES");

                entity.Property(e => e.Storage)
                    .HasPrecision(1)
                    .HasColumnName("STORAGE");

                entity.Property(e => e.Storageid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORAGEID");

                entity.Property(e => e.StoreAllcodesIdCrm)
                    .HasColumnType("NUMBER(35)")
                    .HasColumnName("STORE_ALLCODES_ID_CRM");

                entity.Property(e => e.StoreAllcodesOriginalId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ALLCODES_ORIGINAL_ID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.Groupf)
                    .WithMany(p => p.StoreAllcodes)
                    .HasForeignKey(d => d.GroupfId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ALLCODES_FK");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.StoreAllcodes)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("STORE_ALLCODES_R02");
            });

            modelBuilder.Entity<StoreAllcodesBegin>(entity =>
            {
                entity.ToTable("STORE_ALLCODES_BEGIN");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Allcodesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLCODESID");

                entity.Property(e => e.CashBeginCredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_BEGIN_CREDIT");

                entity.Property(e => e.CashBeginDebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CASH_BEGIN_DEBIT");

                entity.Property(e => e.CheckBeginCredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_BEGIN_CREDIT");

                entity.Property(e => e.CheckBeginDebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECK_BEGIN_DEBIT");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRRATE");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIOD");

                entity.HasOne(d => d.Allcodes)
                    .WithMany(p => p.StoreAllcodesBegins)
                    .HasForeignKey(d => d.Allcodesid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ALLCODES_BEGIN_R01");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.StoreAllcodesBegins)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("STORE_ALLCODES_BEGIN_FK3");

                entity.HasOne(d => d.PeriodNavigation)
                    .WithMany(p => p.StoreAllcodesBegins)
                    .HasForeignKey(d => d.Period)
                    .HasConstraintName("STORE_ALLCODES_BEGIN_R02");
            });

            modelBuilder.Entity<StoreAllsubcode>(entity =>
            {
                entity.HasKey(e => e.StoreAllsubcodesId)
                    .HasName("STORE_ALLSUBCODES_PK");

                entity.ToTable("STORE_ALLSUBCODES");

                entity.HasIndex(e => e.Ename, "ENAMEINDEX");

                entity.HasIndex(e => new { e.Codetype, e.Code }, "STORE_ALLSUBCODES_U01")
                    .IsUnique();

                entity.Property(e => e.StoreAllsubcodesId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_ALLSUBCODES_ID");

                entity.Property(e => e.Address).HasColumnName("ADDRESS");

                entity.Property(e => e.Addresse).HasColumnName("ADDRESSE");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Codetype)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CODETYPE");

                entity.Property(e => e.Defaultitemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEFAULTITEMID");

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Faxno)
                    .HasMaxLength(200)
                    .HasColumnName("FAXNO");

                entity.Property(e => e.FullCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FULL_CODE");

                entity.Property(e => e.Note1).HasColumnName("NOTE1");

                entity.Property(e => e.Note1e).HasColumnName("NOTE1E");

                entity.Property(e => e.Note2).HasColumnName("NOTE2");

                entity.Property(e => e.Note2e).HasColumnName("NOTE2E");

                entity.Property(e => e.Phoneno)
                    .HasMaxLength(200)
                    .HasColumnName("PHONENO");

                entity.Property(e => e.Rep)
                    .HasMaxLength(200)
                    .HasColumnName("REP");

                entity.Property(e => e.Repe)
                    .HasMaxLength(200)
                    .HasColumnName("REPE");

                entity.Property(e => e.StoreAllsubcodesOriginalId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ALLSUBCODES_ORIGINAL_ID");

                entity.HasOne(d => d.CodetypeNavigation)
                    .WithMany(p => p.StoreAllsubcodes)
                    .HasForeignKey(d => d.Codetype)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("STORE_ALLSUBCODES_R01");

                entity.HasOne(d => d.Defaultitem)
                    .WithMany(p => p.StoreAllsubcodes)
                    .HasForeignKey(d => d.Defaultitemid)
                    .HasConstraintName("STORE_ALLSUBCODES_R02");
            });

            modelBuilder.Entity<StoreCustDeposit>(entity =>
            {
                entity.ToTable("STORE_CUST_DEPOSIT");

                entity.HasIndex(e => new { e.StoreId, e.CustId }, "STORE_CUST_DEPOSIT_U01")
                    .IsUnique();

                entity.Property(e => e.StoreCustDepositId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_CUST_DEPOSIT_ID");

                entity.Property(e => e.CustId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUST_ID");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.HasOne(d => d.Cust)
                    .WithMany(p => p.StoreCustDepositCusts)
                    .HasForeignKey(d => d.CustId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_CUST_DEPOSIT_R01");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StoreCustDepositStores)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_CUST_DEPOSIT_R02");
            });

            modelBuilder.Entity<StoreDepSpec>(entity =>
            {
                entity.HasKey(e => e.StoreDepSpecsId)
                    .HasName("SYS_C0019096");

                entity.ToTable("STORE_DEP_SPECS");

                entity.Property(e => e.StoreDepSpecsId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_DEP_SPECS_ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.DepVal)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("DEP_VAL")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Groupno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROUPNO");

                entity.Property(e => e.Trnscode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSCODE");

                entity.HasOne(d => d.TrnscodeNavigation)
                    .WithMany(p => p.StoreDepSpecs)
                    .HasForeignKey(d => d.Trnscode)
                    .HasConstraintName("STORE_DEP_SPECS_FK1");
            });

            modelBuilder.Entity<StoreDepSpecsDetail>(entity =>
            {
                entity.HasKey(e => e.StoreDepSpecsDetailsId)
                    .HasName("SYS_C0019103");

                entity.ToTable("STORE_DEP_SPECS_DETAILS");

                entity.Property(e => e.StoreDepSpecsDetailsId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_DEP_SPECS_DETAILS_ID");

                entity.Property(e => e.AdditemOutDep)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDITEM_OUT_DEP")
                    .HasDefaultValueSql("0                     ");

                entity.Property(e => e.Adjustdeponprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADJUSTDEPONPRICE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Autodep)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AUTODEP");

                entity.Property(e => e.Autodepcode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AUTODEPCODE");

                entity.Property(e => e.CollectItem)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COLLECT_ITEM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ctax)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAX")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ctaxdisc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAXDISC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DepList)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEP_LIST")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DepMaincostcent)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEP_MAINCOSTCENT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DepMust)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEP_MUST")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DepOnTrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEP_ON_TRNS_CODE");

                entity.Property(e => e.DepPricType)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEP_PRIC_TYPE")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.DepShipinfo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEP_SHIPINFO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DepType)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEP_TYPE");

                entity.Property(e => e.Depmainacc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPMAINACC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Deponpricecost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPONPRICECOST")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Depqtyratio)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPQTYRATIO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Depquantities)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEPQUANTITIES");

                entity.Property(e => e.Depsign)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPSIGN")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Depslot)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPSLOT");

                entity.Property(e => e.FromFilter)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FROM_FILTER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.GetFrom)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GET_FROM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.GetTo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GET_TO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Getcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GETCOST")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Getdepoacc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GETDEPOACC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Getdepocostcent)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GETDEPOCOSTCENT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Getdesc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GETDESC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Getdocno)
                    .HasPrecision(1)
                    .HasColumnName("GETDOCNO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Getitems)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GETITEMS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.GroupId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUP_ID");

                entity.Property(e => e.Hasextras)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HASEXTRAS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Onlyonedep)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ONLYONEDEP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Payrevers)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYREVERS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Salesrep)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALESREP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Stax)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAX")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Sumqtyonitems)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUMQTYONITEMS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ToFilter)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TO_FILTER")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.DepOnTrnsCodeNavigation)
                    .WithMany(p => p.StoreDepSpecsDetails)
                    .HasForeignKey(d => d.DepOnTrnsCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("STORE_DEP_SPECS_DETAILS_FK2");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.StoreDepSpecsDetails)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("STORE_DEP_SPECS_DETAILS_FK1");
            });

            modelBuilder.Entity<StoreInventoryM>(entity =>
            {
                entity.ToTable("STORE_INVENTORY_M");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.InventoryDate)
                    .HasColumnType("DATE")
                    .HasColumnName("INVENTORY_DATE");

                entity.Property(e => e.InventoryNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INVENTORY_NUM");

                entity.Property(e => e.Notes)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.StoreInventoryMs)
                    .HasForeignKey(d => d.Branchid)
                    .HasConstraintName("SYS_C0019663");

                entity.HasOne(d => d.Period)
                    .WithMany(p => p.StoreInventoryMs)
                    .HasForeignKey(d => d.Periodid)
                    .HasConstraintName("SYS_C0019373");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StoreInventoryMs)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("STORE_INVENTORY_R01");
            });

            modelBuilder.Entity<StoreInventoryO>(entity =>
            {
                entity.HasKey(e => e.Invoid)
                    .HasName("STORE_INVENTORY_O_PK");

                entity.ToTable("STORE_INVENTORY_O");

                entity.Property(e => e.Invoid)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INVOID");

                entity.Property(e => e.Cost)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("COST")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.InventoryMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("INVENTORY_M_ID");

                entity.Property(e => e.ItemBalance)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ITEM_BALANCE");

                entity.Property(e => e.ItemId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEM_ID");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("QTY");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNIT_ID");

                entity.HasOne(d => d.InventoryM)
                    .WithMany(p => p.StoreInventoryOs)
                    .HasForeignKey(d => d.InventoryMId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_INVENTORY_O_R01");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StoreInventoryOs)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("STORE_INVENTORY_O_R02");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.StoreInventoryOs)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("STORE_INVENTORY_O_R03");
            });

            modelBuilder.Entity<StoreInventoryView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STORE_INVENTORY_VIEW");

                entity.Property(e => e.Cost)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("COST");

                entity.Property(e => e.InventoryDate)
                    .HasColumnType("DATE")
                    .HasColumnName("INVENTORY_DATE");

                entity.Property(e => e.InventoryNote)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_NOTE");

                entity.Property(e => e.InventoryNum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INVENTORY_NUM");

                entity.Property(e => e.Inventoryqtydifference)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INVENTORYQTYDIFFERENCE");

                entity.Property(e => e.Itemaname)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEMANAME");

                entity.Property(e => e.Itembalance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMBALANCE");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemename)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEMENAME");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QTY");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.Storeaname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STOREANAME");

                entity.Property(e => e.Storeename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STOREENAME");

                entity.Property(e => e.Unitaname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNITANAME");

                entity.Property(e => e.Unitename)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNITENAME");
            });

            modelBuilder.Entity<StoreItem>(entity =>
            {
                entity.HasKey(e => e.StoreItemsId)
                    .HasName("STORE_ITEMS_PK");

                entity.ToTable("STORE_ITEMS");

                entity.HasIndex(e => new { e.StoreItemfromsSpecsId, e.ItemCode }, "STORE_ITEMS_U02")
                    .IsUnique();

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_ITEMS_ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.BranchPrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("BRANCH_PRICE");

                entity.Property(e => e.DealPrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("DEAL_PRICE");

                entity.Property(e => e.Discount)
                    .HasColumnType("NUMBER(5,2)")
                    .HasColumnName("DISCOUNT");

                entity.Property(e => e.Ename)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.IPurchPrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("I_PURCH_PRICE");

                entity.Property(e => e.Isstoped)
                    .HasPrecision(1)
                    .HasColumnName("ISSTOPED")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_CODE");

                entity.Property(e => e.Itembarcode)
                    .HasMaxLength(1000)
                    .HasColumnName("ITEMBARCODE");

                entity.Property(e => e.Notes).HasColumnName("NOTES");

                entity.Property(e => e.Notese).HasColumnName("NOTESE");

                entity.Property(e => e.RetailPrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("RETAIL_PRICE");

                entity.Property(e => e.SalePrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("SALE_PRICE");

                entity.Property(e => e.SalesTaxPercent)
                    .HasColumnType("NUMBER(10,3)")
                    .HasColumnName("SALES_TAX_PERCENT");

                entity.Property(e => e.Saname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SANAME");

                entity.Property(e => e.Sename)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SENAME");

                entity.Property(e => e.StoreItemfromsSpecsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ITEMFROMS_SPECS_ID");

                entity.HasOne(d => d.StoreItemfromsSpecs)
                    .WithMany(p => p.StoreItems)
                    .HasForeignKey(d => d.StoreItemfromsSpecsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEMS_FK");
            });

            modelBuilder.Entity<StoreItemBranchPrice>(entity =>
            {
                entity.HasKey(e => e.SiBranchPricesId)
                    .HasName("STORE_ITEM_BRANCH_PRICES_PK");

                entity.ToTable("STORE_ITEM_BRANCH_PRICES");

                entity.HasIndex(e => new { e.BranchId, e.StoreItemsId }, "STORE_ITEM_BRANCH_PRICES_U01")
                    .IsUnique();

                entity.Property(e => e.SiBranchPricesId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SI_BRANCH_PRICES_ID");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.IPurchPrice)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("I_PURCH_PRICE");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.StoreItemBranchPrices)
                    .HasForeignKey(d => d.BranchId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEM_BRANCH_PRICES_FK2");

                entity.HasOne(d => d.StoreItems)
                    .WithMany(p => p.StoreItemBranchPrices)
                    .HasForeignKey(d => d.StoreItemsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEM_BRANCH_PRICES_FK1");
            });

            modelBuilder.Entity<StoreItemPrice>(entity =>
            {
                entity.ToTable("STORE_ITEM_PRICE");

                entity.HasIndex(e => new { e.Itemid, e.Period }, "STORE_ITEM_PRICE_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Ipurchprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IPURCHPRICE");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIOD");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StoreItemPrices)
                    .HasForeignKey(d => d.Itemid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEM_PRICE_R01");

                entity.HasOne(d => d.PeriodNavigation)
                    .WithMany(p => p.StoreItemPrices)
                    .HasForeignKey(d => d.Period)
                    .HasConstraintName("STORE_ITEM_PRICE_R02");
            });

            modelBuilder.Entity<StoreItemUnit>(entity =>
            {
                entity.HasKey(e => e.StoreItemUnitsId)
                    .HasName("STORE_ITEM_UNITS_PK");

                entity.ToTable("STORE_ITEM_UNITS");

                entity.HasIndex(e => new { e.StoreItemsId, e.Unitid }, "STORE_ITEM_UNITS_U02")
                    .IsUnique();

                entity.Property(e => e.StoreItemUnitsId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_ITEM_UNITS_ID");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.BasicUnit)
                    .HasPrecision(1)
                    .HasColumnName("BASIC_UNIT");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.Property(e => e.UnitRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("UNIT_RATE");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNITID");

                entity.HasOne(d => d.StoreItems)
                    .WithMany(p => p.StoreItemUnits)
                    .HasForeignKey(d => d.StoreItemsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEM_UNITS_FK1");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.StoreItemUnits)
                    .HasForeignKey(d => d.Unitid)
                    .HasConstraintName("STORE_ITEM_UNITS_FK2");
            });

            modelBuilder.Entity<StoreItemformUnit>(entity =>
            {
                entity.HasKey(e => e.StoreItemformUnitsId)
                    .HasName("STORE_ITEMFORM_UNITS_PK");

                entity.ToTable("STORE_ITEMFORM_UNITS");

                entity.HasIndex(e => new { e.Unitid, e.StoreItemformSpecsId }, "STORE_ITEMFORM_UNITS_U02")
                    .IsUnique();

                entity.Property(e => e.StoreItemformUnitsId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_ITEMFORM_UNITS_ID");

                entity.Property(e => e.BasicUnit)
                    .HasPrecision(1)
                    .HasColumnName("BASIC_UNIT");

                entity.Property(e => e.StoreItemformSpecsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ITEMFORM_SPECS_ID");

                entity.Property(e => e.UnitRate)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("UNIT_RATE");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNITID");

                entity.HasOne(d => d.StoreItemformSpecs)
                    .WithMany(p => p.StoreItemformUnits)
                    .HasForeignKey(d => d.StoreItemformSpecsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEMFORM_UNITS_FK1");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.StoreItemformUnits)
                    .HasForeignKey(d => d.Unitid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEMFORM_UNITS_FK2");
            });

            modelBuilder.Entity<StoreItemformsSpec>(entity =>
            {
                entity.HasKey(e => e.StoreItemfromsSpecsId)
                    .HasName("STORE_ITEMFORMS_SPECS_PK");

                entity.ToTable("STORE_ITEMFORMS_SPECS");

                entity.HasIndex(e => e.GroupfId, "STORE_ITEMFORMS_SPECS_U02")
                    .IsUnique();

                entity.Property(e => e.StoreItemfromsSpecsId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_ITEMFROMS_SPECS_ID");

                entity.Property(e => e.Controlno)
                    .HasPrecision(1)
                    .HasColumnName("CONTROLNO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Dateprod)
                    .HasPrecision(1)
                    .HasColumnName("DATEPROD")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Datevalidity)
                    .HasPrecision(1)
                    .HasColumnName("DATEVALIDITY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Datewarning)
                    .HasPrecision(1)
                    .HasColumnName("DATEWARNING")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DecimalSystem)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DECIMAL_SYSTEM");

                entity.Property(e => e.Field10aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD10ANAME");

                entity.Property(e => e.Field10ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD10ENAME");

                entity.Property(e => e.Field10rank)
                    .HasPrecision(2)
                    .HasColumnName("FIELD10RANK");

                entity.Property(e => e.Field1aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD1ANAME");

                entity.Property(e => e.Field1ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD1ENAME");

                entity.Property(e => e.Field1rank)
                    .HasPrecision(2)
                    .HasColumnName("FIELD1RANK");

                entity.Property(e => e.Field2aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD2ANAME");

                entity.Property(e => e.Field2ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD2ENAME");

                entity.Property(e => e.Field2rank)
                    .HasPrecision(2)
                    .HasColumnName("FIELD2RANK");

                entity.Property(e => e.Field3aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD3ANAME");

                entity.Property(e => e.Field3ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD3ENAME");

                entity.Property(e => e.Field3rank)
                    .HasPrecision(2)
                    .HasColumnName("FIELD3RANK");

                entity.Property(e => e.Field4aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD4ANAME");

                entity.Property(e => e.Field4ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD4ENAME");

                entity.Property(e => e.Field4rank)
                    .HasPrecision(2)
                    .HasColumnName("FIELD4RANK");

                entity.Property(e => e.Field5aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD5ANAME");

                entity.Property(e => e.Field5ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD5ENAME");

                entity.Property(e => e.Field5rank)
                    .HasPrecision(2)
                    .HasColumnName("FIELD5RANK");

                entity.Property(e => e.Field6aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD6ANAME");

                entity.Property(e => e.Field6ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD6ENAME");

                entity.Property(e => e.Field6rank)
                    .HasPrecision(2)
                    .HasColumnName("FIELD6RANK");

                entity.Property(e => e.Field7aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD7ANAME");

                entity.Property(e => e.Field7ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD7ENAME");

                entity.Property(e => e.Field7rank)
                    .HasPrecision(2)
                    .HasColumnName("FIELD7RANK");

                entity.Property(e => e.Field8aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD8ANAME");

                entity.Property(e => e.Field8ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD8ENAME");

                entity.Property(e => e.Field8rank)
                    .HasPrecision(2)
                    .HasColumnName("FIELD8RANK");

                entity.Property(e => e.Field9aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD9ANAME");

                entity.Property(e => e.Field9ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIELD9ENAME");

                entity.Property(e => e.Field9rank)
                    .HasPrecision(2)
                    .HasColumnName("FIELD9RANK");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.Lotno)
                    .HasPrecision(1)
                    .HasColumnName("LOTNO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Place)
                    .HasPrecision(1)
                    .HasColumnName("PLACE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.PricingPolicy)
                    .HasPrecision(2)
                    .HasColumnName("PRICING_POLICY");

                entity.Property(e => e.Serial)
                    .HasPrecision(1)
                    .HasColumnName("SERIAL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Seriesno)
                    .HasPrecision(1)
                    .HasColumnName("SERIESNO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Warningtime)
                    .HasColumnType("NUMBER")
                    .HasColumnName("WARNINGTIME")
                    .HasDefaultValueSql("0\n");

                entity.HasOne(d => d.Groupf)
                    .WithOne(p => p.StoreItemformsSpec)
                    .HasForeignKey<StoreItemformsSpec>(d => d.GroupfId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEMFORMS_SPECS_FK");
            });

            modelBuilder.Entity<StoreItemsBal>(entity =>
            {
                entity.ToTable("STORE_ITEMS_BAL");

                entity.HasIndex(e => new { e.Period, e.StoreItemsId, e.StoreAllcodesId, e.UnitId }, "STORE_ITEMS_BAL_U01")
                    .IsUnique();

                entity.Property(e => e.StoreItemsBalId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_ITEMS_BAL_ID");

                entity.Property(e => e.DealPrice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DEAL_PRICE");

                entity.Property(e => e.IPurchPrice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("I_PURCH_PRICE");

                entity.Property(e => e.IQty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("I_QTY");

                entity.Property(e => e.Maximumorder)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAXIMUMORDER");

                entity.Property(e => e.Minimumorder)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MINIMUMORDER");

                entity.Property(e => e.Orderlimit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORDERLIMIT");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.SalePrice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("SALE_PRICE");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNIT_ID");

                entity.HasOne(d => d.StoreAllcodes)
                    .WithMany(p => p.StoreItemsBals)
                    .HasForeignKey(d => d.StoreAllcodesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEMS_BAL_FK2");

                entity.HasOne(d => d.StoreItems)
                    .WithMany(p => p.StoreItemsBals)
                    .HasForeignKey(d => d.StoreItemsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEMS_BAL_FK1");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.StoreItemsBals)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEMS_BAL_FK3");
            });

            modelBuilder.Entity<StoreItemsBalExp>(entity =>
            {
                entity.HasKey(e => e.BalExpId)
                    .HasName("STORE_ITEMS_BAL_EXP_PK");

                entity.ToTable("STORE_ITEMS_BAL_EXP");

                entity.Property(e => e.BalExpId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BAL_EXP_ID");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.ControlNo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTROL_NO");

                entity.Property(e => e.ExpDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EXP_DATE");

                entity.Property(e => e.Iqty)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("IQTY");

                entity.Property(e => e.Location)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.LotNo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("LOT_NO");

                entity.Property(e => e.Poolid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POOLID");

                entity.Property(e => e.ProdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PROD_DATE");

                entity.Property(e => e.ProdNo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("PROD_NO");

                entity.Property(e => e.StoreItemsBalId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ITEMS_BAL_ID");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNITID");

                entity.HasOne(d => d.StoreItemsBal)
                    .WithMany(p => p.StoreItemsBalExps)
                    .HasForeignKey(d => d.StoreItemsBalId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEMS_BAL_EXP_FK01");
            });

            modelBuilder.Entity<StoreItemsDocattachment>(entity =>
            {
                entity.ToTable("STORE_ITEMS_DOCATTACHMENTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Docattachmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOCATTACHMENTID");

                entity.Property(e => e.Docattachmentlogo)
                    .HasPrecision(1)
                    .HasColumnName("DOCATTACHMENTLOGO");

                entity.Property(e => e.Docname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNAME");

                entity.Property(e => e.Docuniquename)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DOCUNIQUENAME");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.HasOne(d => d.Docattachment)
                    .WithMany(p => p.StoreItemsDocattachments)
                    .HasForeignKey(d => d.Docattachmentid)
                    .HasConstraintName("STORE_ITEMS_DOCATTACHMENTS_R02");

                entity.HasOne(d => d.StoreItems)
                    .WithMany(p => p.StoreItemsDocattachments)
                    .HasForeignKey(d => d.StoreItemsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEMS_DOCATTACHMENTS_R01");
            });

            modelBuilder.Entity<StoreItemsKind>(entity =>
            {
                entity.ToTable("STORE_ITEMS_KIND");

                entity.Property(e => e.StoreItemsKindId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_ITEMS_KIND_ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<StoreItemsSpec>(entity =>
            {
                entity.ToTable("STORE_ITEMS_SPEC");

                entity.Property(e => e.StoreItemsSpecId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_ITEMS_SPEC_ID");

                entity.Property(e => e.Attribute)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ATTRIBUTE");

                entity.Property(e => e.GroupBasicId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROUP_BASIC_ID");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.Property(e => e.Value)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALUE");

                entity.HasOne(d => d.StoreItems)
                    .WithMany(p => p.StoreItemsSpecs)
                    .HasForeignKey(d => d.StoreItemsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_ITEMS_SPEC_R01");
            });

            modelBuilder.Entity<StoreItemsT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STORE_ITEMS_T");

                entity.Property(e => e.Aname)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.IQty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("I_QTY");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_CODE");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.StoreItemfromsSpecsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ITEMFROMS_SPECS_ID");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNIT_ID");
            });

            modelBuilder.Entity<StoreItemsingred>(entity =>
            {
                entity.ToTable("STORE_ITEMSINGRED");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Concentration)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CONCENTRATION");

                entity.Property(e => e.Mrl)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MRL");

                entity.Property(e => e.Processtype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSTYPE");

                entity.Property(e => e.Storeallsubcodeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREALLSUBCODEID");

                entity.Property(e => e.Storeitemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREITEMID");

                entity.HasOne(d => d.Storeallsubcode)
                    .WithMany(p => p.StoreItemsingreds)
                    .HasForeignKey(d => d.Storeallsubcodeid)
                    .HasConstraintName("STORE_ITEMSINGRED_R02");

                entity.HasOne(d => d.Storeitem)
                    .WithMany(p => p.StoreItemsingreds)
                    .HasForeignKey(d => d.Storeitemid)
                    .HasConstraintName("STORE_ITEMSINGRED_R01");
            });

            modelBuilder.Entity<StoreSubCodeSpec>(entity =>
            {
                entity.HasKey(e => e.SscsId)
                    .HasName("STORE_SUB_CODE_SPEC_PK");

                entity.ToTable("STORE_SUB_CODE_SPEC");

                entity.Property(e => e.SscsId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SSCS_ID");

                entity.Property(e => e.Attribute)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ATTRIBUTE");

                entity.Property(e => e.Attributeen)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ATTRIBUTEEN");

                entity.Property(e => e.GroupBasicId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUP_BASIC_ID");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.Value)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALUE");

                entity.HasOne(d => d.StoreAllcodes)
                    .WithMany(p => p.StoreSubCodeSpecs)
                    .HasForeignKey(d => d.StoreAllcodesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_SUB_CODE_SPEC_R01");
            });

            modelBuilder.Entity<StoreTrn>(entity =>
            {
                entity.HasKey(e => e.TrnsCode)
                    .HasName("STTRNSPK");

                entity.ToTable("STORE_TRNS");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.Acceptcount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCEPTCOUNT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Actualspace)
                    .HasPrecision(1)
                    .HasColumnName("ACTUALSPACE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ageid)
                    .HasPrecision(1)
                    .HasColumnName("AGEID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Agridata)
                    .HasPrecision(1)
                    .HasColumnName("AGRIDATA")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Agridataid)
                    .HasPrecision(1)
                    .HasColumnName("AGRIDATAID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Agriid)
                    .HasPrecision(1)
                    .HasColumnName("AGRIID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Agriitems)
                    .HasPrecision(1)
                    .HasColumnName("AGRIITEMS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Agrinorepeat)
                    .HasPrecision(1)
                    .HasColumnName("AGRINOREPEAT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Agriqty)
                    .HasPrecision(1)
                    .HasColumnName("AGRIQTY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.AllowanceDateType)
                    .HasPrecision(1)
                    .HasColumnName("ALLOWANCE_DATE_TYPE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Allowqtyedit)
                    .HasPrecision(1)
                    .HasColumnName("ALLOWQTYEDIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Approvedvendor)
                    .HasPrecision(1)
                    .HasColumnName("APPROVEDVENDOR");

                entity.Property(e => e.Arrivalport)
                    .HasPrecision(1)
                    .HasColumnName("ARRIVALPORT");

                entity.Property(e => e.Begintime)
                    .HasPrecision(1)
                    .HasColumnName("BEGINTIME");

                entity.Property(e => e.Cargoactually)
                    .HasPrecision(1)
                    .HasColumnName("CARGOACTUALLY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Cargoexpected)
                    .HasPrecision(1)
                    .HasColumnName("CARGOEXPECTED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Cargopaper)
                    .HasPrecision(1)
                    .HasColumnName("CARGOPAPER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Cashid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CASHID");

                entity.Property(e => e.Choicereason)
                    .HasPrecision(1)
                    .HasColumnName("CHOICEREASON");

                entity.Property(e => e.Clearanceco)
                    .HasPrecision(1)
                    .HasColumnName("CLEARANCECO");

                entity.Property(e => e.Committee)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITTEE");

                entity.Property(e => e.Committeeexist)
                    .HasPrecision(1)
                    .HasColumnName("COMMITTEEEXIST");

                entity.Property(e => e.Costcentereffect)
                    .HasPrecision(1)
                    .HasColumnName("COSTCENTEREFFECT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Createitems)
                    .HasPrecision(1)
                    .HasColumnName("CREATEITEMS");

                entity.Property(e => e.Ctax)
                    .HasPrecision(1)
                    .HasColumnName("CTAX");

                entity.Property(e => e.CtaxDisc)
                    .HasPrecision(1)
                    .HasColumnName("CTAX_DISC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CtaxDiscRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CTAX_DISC_RATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CtaxRate)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("CTAX_RATE");

                entity.Property(e => e.CustmorCtax)
                    .HasPrecision(1)
                    .HasColumnName("CUSTMOR_CTAX")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CustmorDisc)
                    .HasPrecision(1)
                    .HasColumnName("CUSTMOR_DISC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Customdocno)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMDOCNO");

                entity.Property(e => e.Customdocnoar)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMDOCNOAR");

                entity.Property(e => e.Customdocnoshow)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMDOCNOSHOW")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Deliveryplace)
                    .HasPrecision(1)
                    .HasColumnName("DELIVERYPLACE");

                entity.Property(e => e.DepositFlag)
                    .HasPrecision(1)
                    .HasColumnName("DEPOSIT_FLAG")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DetailAccount)
                    .HasPrecision(1)
                    .HasColumnName("DETAIL_ACCOUNT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DetailCostCenter)
                    .HasPrecision(1)
                    .HasColumnName("DETAIL_COST_CENTER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Detentionrev)
                    .HasPrecision(1)
                    .HasColumnName("DETENTIONREV")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DocnumCreation)
                    .HasPrecision(1)
                    .HasColumnName("DOCNUM_CREATION")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DocnumEdit)
                    .HasPrecision(1)
                    .HasColumnName("DOCNUM_EDIT")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.DocnumRepeat)
                    .HasPrecision(1)
                    .HasColumnName("DOCNUM_REPEAT")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Docrepeatonperiod)
                    .HasPrecision(1)
                    .HasColumnName("DOCREPEATONPERIOD")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Dstdetailstype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DSTDETAILSTYPE");

                entity.Property(e => e.Dstindetails)
                    .HasPrecision(1)
                    .HasColumnName("DSTINDETAILS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Dsttype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DSTTYPE");

                entity.Property(e => e.Employeeno)
                    .HasPrecision(1)
                    .HasColumnName("EMPLOYEENO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Endtime)
                    .HasPrecision(1)
                    .HasColumnName("ENDTIME");

                entity.Property(e => e.Enginepressure)
                    .HasPrecision(1)
                    .HasColumnName("ENGINEPRESSURE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Execperco)
                    .HasPrecision(1)
                    .HasColumnName("EXECPERCO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ExpensesCurr)
                    .HasPrecision(1)
                    .HasColumnName("EXPENSES_CURR");

                entity.Property(e => e.ExpensesDist)
                    .HasPrecision(1)
                    .HasColumnName("EXPENSES_DIST");

                entity.Property(e => e.ExpensesEffect)
                    .HasPrecision(1)
                    .HasColumnName("EXPENSES_EFFECT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ExpensesRate)
                    .HasPrecision(1)
                    .HasColumnName("EXPENSES_RATE");

                entity.Property(e => e.Fertunit)
                    .HasPrecision(1)
                    .HasColumnName("FERTUNIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Financedistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEDISTID");

                entity.Property(e => e.Financetranscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCETRANSCODE");

                entity.Property(e => e.Freeitem)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FREEITEM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.FromStoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROM_STORE_ALLCODES_ID");

                entity.Property(e => e.Fromrequired)
                    .HasPrecision(1)
                    .HasColumnName("FROMREQUIRED");

                entity.Property(e => e.Fromtime)
                    .HasPrecision(1)
                    .HasColumnName("FROMTIME")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Fromtodate)
                    .HasPrecision(1)
                    .HasColumnName("FROMTODATE");

                entity.Property(e => e.GetPricelist)
                    .HasPrecision(1)
                    .HasColumnName("GET_PRICELIST");

                entity.Property(e => e.Getdisclist)
                    .HasPrecision(1)
                    .HasColumnName("GETDISCLIST")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Getdisclist2)
                    .HasPrecision(1)
                    .HasColumnName("GETDISCLIST2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.HasEndDate)
                    .HasPrecision(1)
                    .HasColumnName("HAS_END_DATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.HasStartDate)
                    .HasPrecision(1)
                    .HasColumnName("HAS_START_DATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Hasattachments)
                    .HasPrecision(1)
                    .HasColumnName("HASATTACHMENTS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Hascashpayment)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HASCASHPAYMENT");

                entity.Property(e => e.Hasexpenses)
                    .HasPrecision(1)
                    .HasColumnName("HASEXPENSES")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Hasproductiondata)
                    .HasPrecision(1)
                    .HasColumnName("HASPRODUCTIONDATA");

                entity.Property(e => e.Injureid)
                    .HasPrecision(1)
                    .HasColumnName("INJUREID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Inttradespec)
                    .HasPrecision(1)
                    .HasColumnName("INTTRADESPEC");

                entity.Property(e => e.Irrigatemachine)
                    .HasPrecision(1)
                    .HasColumnName("IRRIGATEMACHINE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Irrigationempshow)
                    .HasPrecision(1)
                    .HasColumnName("IRRIGATIONEMPSHOW")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Irrigationneed)
                    .HasPrecision(1)
                    .HasColumnName("IRRIGATIONNEED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Item2nddisc)
                    .HasPrecision(1)
                    .HasColumnName("ITEM_2NDDISC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Item2ndprice)
                    .HasPrecision(2)
                    .HasColumnName("ITEM_2NDPRICE");

                entity.Property(e => e.Item2ndpriceEffect)
                    .HasPrecision(1)
                    .HasColumnName("ITEM_2NDPRICE_EFFECT");

                entity.Property(e => e.ItemDisc)
                    .HasPrecision(1)
                    .HasColumnName("ITEM_DISC");

                entity.Property(e => e.ItemDisclistId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEM_DISCLIST_ID");

                entity.Property(e => e.ItemPrice)
                    .HasPrecision(2)
                    .HasColumnName("ITEM_PRICE");

                entity.Property(e => e.ItemPricelistId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEM_PRICELIST_ID");

                entity.Property(e => e.ItemStax)
                    .HasPrecision(1)
                    .HasColumnName("ITEM_STAX");

                entity.Property(e => e.Itemapproved)
                    .HasPrecision(1)
                    .HasColumnName("ITEMAPPROVED");

                entity.Property(e => e.Itemclone)
                    .HasPrecision(1)
                    .HasColumnName("ITEMCLONE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Itempriceavg)
                    .HasPrecision(1)
                    .HasColumnName("ITEMPRICEAVG")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Licensedate)
                    .HasPrecision(1)
                    .HasColumnName("LICENSEDATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Licenseno)
                    .HasPrecision(1)
                    .HasColumnName("LICENSENO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Lotasdocno)
                    .HasPrecision(1)
                    .HasColumnName("LOTASDOCNO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.MainAccount)
                    .HasPrecision(1)
                    .HasColumnName("MAIN_ACCOUNT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.MainCostCenter)
                    .HasPrecision(1)
                    .HasColumnName("MAIN_COST_CENTER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Managername)
                    .HasPrecision(1)
                    .HasColumnName("MANAGERNAME")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Mobiletrans)
                    .HasPrecision(1)
                    .HasColumnName("MOBILETRANS");

                entity.Property(e => e.Multycurrency)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MULTYCURRENCY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Mustaccount)
                    .HasPrecision(1)
                    .HasColumnName("MUSTACCOUNT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Mustdimension)
                    .HasPrecision(1)
                    .HasColumnName("MUSTDIMENSION")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Mustdsttype)
                    .HasPrecision(1)
                    .HasColumnName("MUSTDSTTYPE")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Needaccept)
                    .HasPrecision(1)
                    .HasColumnName("NEEDACCEPT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Noduplicateserial)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NODUPLICATESERIAL");

                entity.Property(e => e.Patchno)
                    .HasPrecision(1)
                    .HasColumnName("PATCHNO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.PayEffect)
                    .HasPrecision(1)
                    .HasColumnName("PAY_EFFECT");

                entity.Property(e => e.Paymentspec)
                    .HasPrecision(1)
                    .HasColumnName("PAYMENTSPEC");

                entity.Property(e => e.Paymenttype)
                    .HasPrecision(1)
                    .HasColumnName("PAYMENTTYPE");

                entity.Property(e => e.Phi)
                    .HasPrecision(1)
                    .HasColumnName("PHI")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Pool)
                    .HasPrecision(1)
                    .HasColumnName("POOL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Portarrival)
                    .HasPrecision(1)
                    .HasColumnName("PORTARRIVAL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Prevperc)
                    .HasPrecision(1)
                    .HasColumnName("PREVPERC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.PriceEffect)
                    .HasPrecision(1)
                    .HasColumnName("PRICE_EFFECT");

                entity.Property(e => e.Pricedecpoints)
                    .HasPrecision(10)
                    .HasColumnName("PRICEDECPOINTS");

                entity.Property(e => e.Printcostprice)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PRINTCOSTPRICE");

                entity.Property(e => e.Processid)
                    .HasPrecision(1)
                    .HasColumnName("PROCESSID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Purpose)
                    .HasPrecision(1)
                    .HasColumnName("PURPOSE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.QtyEffect)
                    .HasPrecision(1)
                    .HasColumnName("QTY_EFFECT");

                entity.Property(e => e.Receivedate)
                    .HasPrecision(1)
                    .HasColumnName("RECEIVEDATE");

                entity.Property(e => e.Releasetype)
                    .HasPrecision(1)
                    .HasColumnName("RELEASETYPE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Requiredprocedure)
                    .HasPrecision(1)
                    .HasColumnName("REQUIREDPROCEDURE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Reservation)
                    .HasPrecision(1)
                    .HasColumnName("RESERVATION");

                entity.Property(e => e.Restrictionperiod)
                    .HasPrecision(1)
                    .HasColumnName("RESTRICTIONPERIOD")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Safeperiod)
                    .HasPrecision(1)
                    .HasColumnName("SAFEPERIOD");

                entity.Property(e => e.SalesRep)
                    .HasPrecision(1)
                    .HasColumnName("SALES_REP");

                entity.Property(e => e.Shipboat)
                    .HasPrecision(1)
                    .HasColumnName("SHIPBOAT");

                entity.Property(e => e.Shipco)
                    .HasPrecision(1)
                    .HasColumnName("SHIPCO");

                entity.Property(e => e.Shiplotno)
                    .HasPrecision(1)
                    .HasColumnName("SHIPLOTNO");

                entity.Property(e => e.Shippingeffectonholder)
                    .HasPrecision(1)
                    .HasColumnName("SHIPPINGEFFECTONHOLDER");

                entity.Property(e => e.Shippingspecs)
                    .HasPrecision(1)
                    .HasColumnName("SHIPPINGSPECS");

                entity.Property(e => e.Shippolino)
                    .HasPrecision(1)
                    .HasColumnName("SHIPPOLINO");

                entity.Property(e => e.Shipport)
                    .HasPrecision(1)
                    .HasColumnName("SHIPPORT");

                entity.Property(e => e.Shiptrns)
                    .HasPrecision(1)
                    .HasColumnName("SHIPTRNS");

                entity.Property(e => e.Shipweekno)
                    .HasPrecision(1)
                    .HasColumnName("SHIPWEEKNO");

                entity.Property(e => e.Show2ndprice)
                    .HasPrecision(1)
                    .HasColumnName("SHOW_2NDPRICE");

                entity.Property(e => e.ShowBal)
                    .HasPrecision(1)
                    .HasColumnName("SHOW_BAL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ShowPrice)
                    .HasPrecision(1)
                    .HasColumnName("SHOW_PRICE");

                entity.Property(e => e.Showagricontainer)
                    .HasPrecision(1)
                    .HasColumnName("SHOWAGRICONTAINER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Showcargo)
                    .HasPrecision(1)
                    .HasColumnName("SHOWCARGO");

                entity.Property(e => e.Showdependdoc)
                    .HasPrecision(1)
                    .HasColumnName("SHOWDEPENDDOC");

                entity.Property(e => e.Showeditbtn)
                    .HasPrecision(1)
                    .HasColumnName("SHOWEDITBTN")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Showexpchoose)
                    .HasPrecision(1)
                    .HasColumnName("SHOWEXPCHOOSE");

                entity.Property(e => e.Showexptype)
                    .HasPrecision(1)
                    .HasColumnName("SHOWEXPTYPE");

                entity.Property(e => e.Showfarm)
                    .HasPrecision(1)
                    .HasColumnName("SHOWFARM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Showlc)
                    .HasPrecision(1)
                    .HasColumnName("SHOWLC");

                entity.Property(e => e.Showpopprice)
                    .HasPrecision(1)
                    .HasColumnName("SHOWPOPPRICE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Showprodstage)
                    .HasPrecision(1)
                    .HasColumnName("SHOWPRODSTAGE");

                entity.Property(e => e.Showrequireddocument)
                    .HasPrecision(1)
                    .HasColumnName("SHOWREQUIREDDOCUMENT");

                entity.Property(e => e.Showsupplyorderstatus)
                    .HasPrecision(1)
                    .HasColumnName("SHOWSUPPLYORDERSTATUS");

                entity.Property(e => e.Showtax41)
                    .HasPrecision(1)
                    .HasColumnName("SHOWTAX41");

                entity.Property(e => e.Showtermsofpayment)
                    .HasPrecision(1)
                    .HasColumnName("SHOWTERMSOFPAYMENT");

                entity.Property(e => e.Soilcond)
                    .HasPrecision(1)
                    .HasColumnName("SOILCOND")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Stage)
                    .HasPrecision(1)
                    .HasColumnName("STAGE");

                entity.Property(e => e.Stax)
                    .HasPrecision(1)
                    .HasColumnName("STAX");

                entity.Property(e => e.StaxRate)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("STAX_RATE");

                entity.Property(e => e.StoreItemfromsSpecsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ITEMFROMS_SPECS_ID");

                entity.Property(e => e.Taxdiscprnt)
                    .HasPrecision(1)
                    .HasColumnName("TAXDISCPRNT");

                entity.Property(e => e.ToStoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TO_STORE_ALLCODES_ID");

                entity.Property(e => e.Torequired)
                    .HasPrecision(1)
                    .HasColumnName("TOREQUIRED");

                entity.Property(e => e.Totime)
                    .HasPrecision(1)
                    .HasColumnName("TOTIME")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.TransferCostType)
                    .HasPrecision(1)
                    .HasColumnName("TRANSFER_COST_TYPE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Transrepeatonperiod)
                    .HasPrecision(1)
                    .HasColumnName("TRANSREPEATONPERIOD")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.TrnsDisc)
                    .HasPrecision(1)
                    .HasColumnName("TRNS_DISC");

                entity.Property(e => e.TrnsDiscRate)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("TRNS_DISC_RATE");

                entity.Property(e => e.TrnsNature)
                    .HasPrecision(2)
                    .HasColumnName("TRNS_NATURE");

                entity.Property(e => e.TrnsType)
                    .HasPrecision(2)
                    .HasColumnName("TRNS_TYPE");

                entity.Property(e => e.TrnsnoCreation)
                    .HasPrecision(1)
                    .HasColumnName("TRNSNO_CREATION")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.TrnsnoEdit)
                    .HasPrecision(1)
                    .HasColumnName("TRNSNO_EDIT")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.TrnsnoRepeat)
                    .HasPrecision(1)
                    .HasColumnName("TRNSNO_REPEAT")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Typeid)
                    .HasPrecision(1)
                    .HasColumnName("TYPEID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Usebarcode)
                    .HasPrecision(1)
                    .HasColumnName("USEBARCODE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Waterpressure)
                    .HasPrecision(1)
                    .HasColumnName("WATERPRESSURE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Watervolume)
                    .HasPrecision(1)
                    .HasColumnName("WATERVOLUME")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Weathercond)
                    .HasPrecision(1)
                    .HasColumnName("WEATHERCOND")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Weekno)
                    .HasPrecision(1)
                    .HasColumnName("WEEKNO");

                entity.Property(e => e.Workingtime)
                    .HasPrecision(1)
                    .HasColumnName("WORKINGTIME")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.StoreTrnCashes)
                    .HasForeignKey(d => d.Cashid)
                    .HasConstraintName("STORE_TRNS_FK5");

                entity.HasOne(d => d.DstdetailstypeNavigation)
                    .WithMany(p => p.StoreTrns)
                    .HasForeignKey(d => d.Dstdetailstype)
                    .HasConstraintName("STORE_TRNS_R06");

                entity.HasOne(d => d.FinancetranscodeNavigation)
                    .WithMany(p => p.StoreTrns)
                    .HasForeignKey(d => d.Financetranscode)
                    .HasConstraintName("STORE_TRNS_FK4");

                entity.HasOne(d => d.FromStoreAllcodes)
                    .WithMany(p => p.StoreTrnFromStoreAllcodes)
                    .HasForeignKey(d => d.FromStoreAllcodesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_FK2");

                entity.HasOne(d => d.StoreItemfromsSpecs)
                    .WithMany(p => p.StoreTrns)
                    .HasForeignKey(d => d.StoreItemfromsSpecsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_FK1");

                entity.HasOne(d => d.ToStoreAllcodes)
                    .WithMany(p => p.StoreTrnToStoreAllcodes)
                    .HasForeignKey(d => d.ToStoreAllcodesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_FK3");
            });

            modelBuilder.Entity<StoreTrnsAccept>(entity =>
            {
                entity.HasKey(e => e.AcceptId)
                    .HasName("STORE_TRNS_ACCEPT_PK");

                entity.ToTable("STORE_TRNS_ACCEPT");

                entity.HasIndex(e => new { e.AcceptSerial, e.TrnsCode }, "STORE_TRNS_ACCEPT_U01")
                    .IsUnique();

                entity.Property(e => e.AcceptId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ACCEPT_ID");

                entity.Property(e => e.AcceptName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ACCEPT_NAME");

                entity.Property(e => e.AcceptSerial)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCEPT_SERIAL");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.HasOne(d => d.TrnsCodeNavigation)
                    .WithMany(p => p.StoreTrnsAccepts)
                    .HasForeignKey(d => d.TrnsCode)
                    .HasConstraintName("STORE_TRNS_ACCEPT_R01");
            });

            modelBuilder.Entity<StoreTrnsCreation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STORE_TRNS_CREATION");

                entity.Property(e => e.StoreTrnsCreatFromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_CREAT_FROMID");

                entity.Property(e => e.StoreTrnsCreatId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_TRNS_CREAT_ID");

                entity.Property(e => e.StoreTrnsCreatMaterials)
                    .HasPrecision(1)
                    .HasColumnName("STORE_TRNS_CREAT_MATERIALS");

                entity.Property(e => e.StoreTrnsCreatQunatity)
                    .HasPrecision(10)
                    .HasColumnName("STORE_TRNS_CREAT_QUNATITY");

                entity.Property(e => e.StoreTrnsCreatReserv)
                    .HasPrecision(1)
                    .HasColumnName("STORE_TRNS_CREAT_RESERV");

                entity.Property(e => e.StoreTrnsCreatReverse)
                    .HasPrecision(1)
                    .HasColumnName("STORE_TRNS_CREAT_REVERSE");

                entity.Property(e => e.StoreTrnsCreatSamedep)
                    .HasPrecision(1)
                    .HasColumnName("STORE_TRNS_CREAT_SAMEDEP");

                entity.Property(e => e.StoreTrnsCreatSametrns)
                    .HasPrecision(1)
                    .HasColumnName("STORE_TRNS_CREAT_SAMETRNS");

                entity.Property(e => e.StoreTrnsCreatToid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_CREAT_TOID");

                entity.Property(e => e.StoreTrnsCreatTrnsmcode)
                    .HasMaxLength(200)
                    .HasColumnName("STORE_TRNS_CREAT_TRNSMCODE");

                entity.Property(e => e.StoreTrnsCreatTrnsmpcode)
                    .HasMaxLength(200)
                    .HasColumnName("STORE_TRNS_CREAT_TRNSMPCODE");
            });

            modelBuilder.Entity<StoreTrnsCreationO>(entity =>
            {
                entity.ToTable("STORE_TRNS_CREATION_O");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.NewOId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEW_O_ID");

                entity.Property(e => e.NewResId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEW_RES_ID");

                entity.Property(e => e.NewTrnsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("NEW_TRNS_ID");

                entity.Property(e => e.OriginalTrnsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ORIGINAL_TRNS_ID");
            });

            modelBuilder.Entity<StoreTrnsDep>(entity =>
            {
                entity.ToTable("STORE_TRNS_DEP");

                entity.Property(e => e.StoreTrnsDepId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_TRNS_DEP_ID");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Ctrnsrowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CTRNSROWID");

                entity.Property(e => e.Depdetailsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEPDETAILSID");

                entity.Property(e => e.Depslot)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPSLOT");

                entity.Property(e => e.Deptrnspayback)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEPTRNSPAYBACK");

                entity.Property(e => e.Groupid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPID");

                entity.Property(e => e.Ptransrowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PTRANSROWID");

                entity.HasOne(d => d.Ctrnsrow)
                    .WithMany(p => p.StoreTrnsDepCtrnsrows)
                    .HasForeignKey(d => d.Ctrnsrowid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_DEP_R02");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.StoreTrnsDeps)
                    .HasForeignKey(d => d.Groupid)
                    .HasConstraintName("STORE_TRNS_DEP_FK3");

                entity.HasOne(d => d.Ptransrow)
                    .WithMany(p => p.StoreTrnsDepPtransrows)
                    .HasForeignKey(d => d.Ptransrowid)
                    .HasConstraintName("STORE_TRNS_DEP_R03");
            });

            modelBuilder.Entity<StoreTrnsDepDetail>(entity =>
            {
                entity.HasKey(e => e.Depdetailsid)
                    .HasName("SYS_C0019172");

                entity.ToTable("STORE_TRNS_DEP_DETAILS");

                entity.Property(e => e.Depdetailsid)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DEPDETAILSID");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Ctrnsorowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CTRNSOROWID");

                entity.Property(e => e.Itemapproved)
                    .HasPrecision(1)
                    .HasColumnName("ITEMAPPROVED");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.ProwId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PROW_ID");

                entity.Property(e => e.Ptrnsorowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PTRNSOROWID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.StoretrnsProformlaId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORETRNS_PROFORMLA_ID");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNITID");

                entity.Property(e => e.Unitprice)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNITPRICE")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Ctrnsorow)
                    .WithMany(p => p.StoreTrnsDepDetails)
                    .HasForeignKey(d => d.Ctrnsorowid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_DEP_DETAILS_R02");

                entity.HasOne(d => d.Prow)
                    .WithMany(p => p.StoreTrnsDepDetails)
                    .HasForeignKey(d => d.ProwId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_DEP_DETAILS_FK3");
            });

            modelBuilder.Entity<StoreTrnsDepDetailsTemp>(entity =>
            {
                entity.HasKey(e => e.Depdetailsid)
                    .HasName("SYS_C0019175");

                entity.ToTable("STORE_TRNS_DEP_DETAILS_TEMP");

                entity.Property(e => e.Depdetailsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEPDETAILSID");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1\n");

                entity.Property(e => e.Ctrnsorowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CTRNSOROWID");

                entity.Property(e => e.Itemapproved)
                    .HasPrecision(1)
                    .HasColumnName("ITEMAPPROVED");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.ProwId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PROW_ID");

                entity.Property(e => e.Ptrnsorowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PTRNSOROWID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.Rowstate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROWSTATE");

                entity.Property(e => e.StoretrnsProformlaId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORETRNS_PROFORMLA_ID");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNITID");

                entity.Property(e => e.Unitprice)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNITPRICE")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Ctrnsorow)
                    .WithMany(p => p.StoreTrnsDepDetailsTemps)
                    .HasForeignKey(d => d.Ctrnsorowid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_DEP_DET_TEMP_R02");

                entity.HasOne(d => d.Prow)
                    .WithMany(p => p.StoreTrnsDepDetailsTemps)
                    .HasForeignKey(d => d.ProwId)
                    .HasConstraintName("STORE_TRNS_DEP_DET_TEMP_FK3");
            });

            modelBuilder.Entity<StoreTrnsDepTemp>(entity =>
            {
                entity.HasKey(e => e.StoreTrnsDepId)
                    .HasName("SYS_C0019178");

                entity.ToTable("STORE_TRNS_DEP_TEMP");

                entity.Property(e => e.StoreTrnsDepId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_DEP_ID");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1\n");

                entity.Property(e => e.Ctrnsrowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CTRNSROWID");

                entity.Property(e => e.Depdetailsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEPDETAILSID");

                entity.Property(e => e.Depslot)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEPSLOT");

                entity.Property(e => e.Deptrnspayback)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEPTRNSPAYBACK");

                entity.Property(e => e.Groupid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPID");

                entity.Property(e => e.Ptransrowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PTRANSROWID");

                entity.Property(e => e.Rowstate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROWSTATE");

                entity.HasOne(d => d.Ctrnsrow)
                    .WithMany(p => p.StoreTrnsDepTemps)
                    .HasForeignKey(d => d.Ctrnsrowid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_DEP_TEMP_R02");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.StoreTrnsDepTemps)
                    .HasForeignKey(d => d.Groupid)
                    .HasConstraintName("STORE_TRNS_DEP_TEMP_FK3");
            });

            modelBuilder.Entity<StoreTrnsExp>(entity =>
            {
                entity.ToTable("STORE_TRNS_EXP");

                entity.Property(e => e.StoreTrnsExpId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_TRNS_EXP_ID");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ControlNo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTROL_NO");

                entity.Property(e => e.ExpDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EXP_DATE");

                entity.Property(e => e.Itembalexpid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMBALEXPID");

                entity.Property(e => e.Location)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.LotNo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("LOT_NO");

                entity.Property(e => e.Pool)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("POOL");

                entity.Property(e => e.ProdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PROD_DATE");

                entity.Property(e => e.ProdNo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("PROD_NO");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("QTY");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.StoreTrnsOId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_O_ID");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNITID");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StoreTrnsExps)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("STORE_TRNS_EXP_R03");

                entity.HasOne(d => d.StoreTrnsO)
                    .WithMany(p => p.StoreTrnsExps)
                    .HasForeignKey(d => d.StoreTrnsOId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_EXP_FK01");
            });

            modelBuilder.Entity<StoreTrnsExpTemp>(entity =>
            {
                entity.HasKey(e => e.StoreTrnsExpId)
                    .HasName("STORE_TRNS_EXP_TEMP_PK");

                entity.ToTable("STORE_TRNS_EXP_TEMP");

                entity.Property(e => e.StoreTrnsExpId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_EXP_ID");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1\n");

                entity.Property(e => e.ControlNo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTROL_NO");

                entity.Property(e => e.ExpDate)
                    .HasColumnType("DATE")
                    .HasColumnName("EXP_DATE");

                entity.Property(e => e.Itembalexpid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMBALEXPID");

                entity.Property(e => e.Location)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.LotNo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("LOT_NO");

                entity.Property(e => e.ProdDate)
                    .HasColumnType("DATE")
                    .HasColumnName("PROD_DATE");

                entity.Property(e => e.ProdNo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("PROD_NO");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("QTY");

                entity.Property(e => e.Rowstate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROWSTATE");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.StoreTrnsOId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_O_ID");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNITID");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StoreTrnsExpTemps)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("STORE_TRNS_EXP_TEMP_R03");

                entity.HasOne(d => d.StoreTrnsO)
                    .WithMany(p => p.StoreTrnsExpTemps)
                    .HasForeignKey(d => d.StoreTrnsOId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_EXP_TEMP_FK01");
            });

            modelBuilder.Entity<StoreTrnsKindDetail>(entity =>
            {
                entity.ToTable("STORE_TRNS_KIND_DETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.StoreTrnsKindSpecId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_KIND_SPEC_ID");

                entity.Property(e => e.TrnsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_ID");

                entity.HasOne(d => d.StoreTrnsKindSpec)
                    .WithMany(p => p.StoreTrnsKindDetails)
                    .HasForeignKey(d => d.StoreTrnsKindSpecId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_KIND_DETAILS_FK");
            });

            modelBuilder.Entity<StoreTrnsKindSpec>(entity =>
            {
                entity.ToTable("STORE_TRNS_KIND_SPEC");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");
            });

            modelBuilder.Entity<StoreTrnsLc>(entity =>
            {
                entity.ToTable("STORE_TRNS_LC");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Acknoweldgedate)
                    .HasColumnType("DATE")
                    .HasColumnName("ACKNOWELDGEDATE");

                entity.Property(e => e.Amountdue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNTDUE");

                entity.Property(e => e.Bankid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BANKID");

                entity.Property(e => e.Baseofcontract)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BASEOFCONTRACT");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Expshipmentdate)
                    .HasColumnType("DATE")
                    .HasColumnName("EXPSHIPMENTDATE");

                entity.Property(e => e.Exworkvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EXWORKVALUE");

                entity.Property(e => e.Fierghtvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIERGHTVALUE");

                entity.Property(e => e.Inaddress)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("INADDRESS");

                entity.Property(e => e.Inlandvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INLANDVALUE");

                entity.Property(e => e.Insurancedoc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSURANCEDOC");

                entity.Property(e => e.Insurancevalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSURANCEVALUE");

                entity.Property(e => e.Ordercase)
                    .HasPrecision(1)
                    .HasColumnName("ORDERCASE");

                entity.Property(e => e.Origincountry)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ORIGINCOUNTRY");

                entity.Property(e => e.Partialshipment)
                    .HasPrecision(1)
                    .HasColumnName("PARTIALSHIPMENT");

                entity.Property(e => e.Payment)
                    .HasPrecision(1)
                    .HasColumnName("PAYMENT");

                entity.Property(e => e.Rate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RATE");

                entity.Property(e => e.Readyforshipping)
                    .HasColumnType("NUMBER")
                    .HasColumnName("READYFORSHIPPING");

                entity.Property(e => e.Refno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REFNO");

                entity.Property(e => e.Shippedvia)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SHIPPEDVIA");

                entity.Property(e => e.Shippingcompany)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPPINGCOMPANY");

                entity.Property(e => e.Shippingplace)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPPINGPLACE");

                entity.Property(e => e.Shippingway)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPPINGWAY");

                entity.Property(e => e.StoreTrnsmId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_TRNSM_ID");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.StoreTrnsLcs)
                    .HasForeignKey(d => d.Bankid)
                    .HasConstraintName("STORE_TRNS_LC_R06");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.StoreTrnsLcs)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("STORE_TRNS_LC_R07");

                entity.HasOne(d => d.OrigincountryNavigation)
                    .WithMany(p => p.StoreTrnsLcOrigincountryNavigations)
                    .HasForeignKey(d => d.Origincountry)
                    .HasConstraintName("STORE_TRNS_LC_R04");

                entity.HasOne(d => d.ShippingcompanyNavigation)
                    .WithMany(p => p.StoreTrnsLcShippingcompanyNavigations)
                    .HasForeignKey(d => d.Shippingcompany)
                    .HasConstraintName("STORE_TRNS_LC_R03");

                entity.HasOne(d => d.ShippingplaceNavigation)
                    .WithMany(p => p.StoreTrnsLcShippingplaceNavigations)
                    .HasForeignKey(d => d.Shippingplace)
                    .HasConstraintName("STORE_TRNS_LC_R05");

                entity.HasOne(d => d.ShippingwayNavigation)
                    .WithMany(p => p.StoreTrnsLcShippingwayNavigations)
                    .HasForeignKey(d => d.Shippingway)
                    .HasConstraintName("STORE_TRNS_LC_R02");

                entity.HasOne(d => d.StoreTrnsm)
                    .WithMany(p => p.StoreTrnsLcs)
                    .HasForeignKey(d => d.StoreTrnsmId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_LC_R01");
            });

            modelBuilder.Entity<StoreTrnsLcDocument>(entity =>
            {
                entity.ToTable("STORE_TRNS_LC_DOCUMENTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Briefdesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRIEFDESC");

                entity.Property(e => e.Memo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("MEMO");

                entity.Property(e => e.StoreTrnsLcId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_TRNS_LC_ID");

                entity.Property(e => e.Termcode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TERMCODE");

                entity.Property(e => e.Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.HasOne(d => d.StoreTrnsLc)
                    .WithMany(p => p.StoreTrnsLcDocuments)
                    .HasForeignKey(d => d.StoreTrnsLcId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_LC_DOCUMENTS_R01");
            });

            modelBuilder.Entity<StoreTrnsM>(entity =>
            {
                entity.ToTable("STORE_TRNS_M");

                entity.HasIndex(e => e.TrnsDate, "STORE_TRNS_DATEINDEX1");

                entity.HasIndex(e => e.Period, "STORE_TRNS_MPERIODINDEX2");

                entity.HasIndex(e => e.ToStoreAllcodesId, "STORE_TRNS_MTOINDEX4");

                entity.HasIndex(e => e.FromStoreAllcodesId, "STORE_TRNS_M_FROMINDEX3");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.Addition1)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ADDITION1");

                entity.Property(e => e.Addition1Rate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ADDITION1_RATE");

                entity.Property(e => e.Addition2)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ADDITION2");

                entity.Property(e => e.Addition2Rate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ADDITION2_RATE");

                entity.Property(e => e.Addition3)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ADDITION3");

                entity.Property(e => e.Addition3Rate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ADDITION3_RATE");

                entity.Property(e => e.Agridataid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AGRIDATAID");

                entity.Property(e => e.Arrivalportid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ARRIVALPORTID");

                entity.Property(e => e.Batchno)
                    .HasMaxLength(300)
                    .HasColumnName("BATCHNO");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Cargoactually)
                    .HasColumnType("DATE")
                    .HasColumnName("CARGOACTUALLY");

                entity.Property(e => e.Cargoexpected)
                    .HasColumnType("DATE")
                    .HasColumnName("CARGOEXPECTED");

                entity.Property(e => e.Cargopaper)
                    .HasPrecision(1)
                    .HasColumnName("CARGOPAPER");

                entity.Property(e => e.Choicereason)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CHOICEREASON");

                entity.Property(e => e.Clearancecoid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CLEARANCECOID");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Createdby)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CREATEDBY");

                entity.Property(e => e.Createitems)
                    .IsUnicode(false)
                    .HasColumnName("CREATEITEMS");

                entity.Property(e => e.Ctax)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CTAX")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CtaxDisc)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CTAX_DISC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CtaxDiscRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CTAX_DISC_RATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CtaxRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CTAX_RATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CURRENCYRATE")
                    .HasDefaultValueSql("1\n");

                entity.Property(e => e.Customdocno)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMDOCNO");

                entity.Property(e => e.Deliveryplace)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERYPLACE");

                entity.Property(e => e.DepOnGroupno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEP_ON_GROUPNO");

                entity.Property(e => e.Disc)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Disc2)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC2");

                entity.Property(e => e.Disc2Rate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC2_RATE");

                entity.Property(e => e.DiscRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC_RATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Discountlistid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISCOUNTLISTID");

                entity.Property(e => e.Employeeno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EMPLOYEENO");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.ExpensesAdd)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("EXPENSES_ADD")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ExpensesCurr)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("EXPENSES_CURR");

                entity.Property(e => e.ExpensesDisc)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("EXPENSES_DISC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ExpensesNet)
                    .HasPrecision(1)
                    .HasColumnName("EXPENSES_NET");

                entity.Property(e => e.ExpensesNoeffect)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("EXPENSES_NOEFFECT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ExpensesRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("EXPENSES_RATE");

                entity.Property(e => e.FromStoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROM_STORE_ALLCODES_ID");

                entity.Property(e => e.Initcash)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("INITCASH")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Instprogramid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMID");

                entity.Property(e => e.Irrigatemachine)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IRRIGATEMACHINE");

                entity.Property(e => e.Irrigationneed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IRRIGATIONNEED");

                entity.Property(e => e.MainAccountid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAIN_ACCOUNTID");

                entity.Property(e => e.MainCostcenterid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAIN_COSTCENTERID");

                entity.Property(e => e.Managername)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MANAGERNAME");

                entity.Property(e => e.Netvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NETVALUE");

                entity.Property(e => e.Numbervalue)
                    .HasMaxLength(300)
                    .HasColumnName("NUMBERVALUE");

                entity.Property(e => e.Patchno)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PATCHNO");

                entity.Property(e => e.Paytypespec)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYTYPESPEC");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.PeriodLimit)
                    .HasPrecision(10)
                    .HasColumnName("PERIOD_LIMIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Portarrival)
                    .HasColumnType("DATE")
                    .HasColumnName("PORTARRIVAL");

                entity.Property(e => e.Pricelistid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICELISTID");

                entity.Property(e => e.Productionstageid)
                    .HasColumnType("NUMBER(30)")
                    .HasColumnName("PRODUCTIONSTAGEID");

                entity.Property(e => e.Receivedate)
                    .HasColumnType("DATE")
                    .HasColumnName("RECEIVEDATE");

                entity.Property(e => e.Rem)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REM");

                entity.Property(e => e.Remark1).HasColumnName("REMARK1");

                entity.Property(e => e.Remark10).HasColumnName("REMARK10");

                entity.Property(e => e.Remark10e).HasColumnName("REMARK10E");

                entity.Property(e => e.Remark1e).HasColumnName("REMARK1E");

                entity.Property(e => e.Remark2).HasColumnName("REMARK2");

                entity.Property(e => e.Remark2e).HasColumnName("REMARK2E");

                entity.Property(e => e.Remark3).HasColumnName("REMARK3");

                entity.Property(e => e.Remark3e).HasColumnName("REMARK3E");

                entity.Property(e => e.Remark4).HasColumnName("REMARK4");

                entity.Property(e => e.Remark4e).HasColumnName("REMARK4E");

                entity.Property(e => e.Remark5).HasColumnName("REMARK5");

                entity.Property(e => e.Remark5e).HasColumnName("REMARK5E");

                entity.Property(e => e.Remark6).HasColumnName("REMARK6");

                entity.Property(e => e.Remark6e).HasColumnName("REMARK6E");

                entity.Property(e => e.Remark7).HasColumnName("REMARK7");

                entity.Property(e => e.Remark7e).HasColumnName("REMARK7E");

                entity.Property(e => e.Remark8).HasColumnName("REMARK8");

                entity.Property(e => e.Remark8e).HasColumnName("REMARK8E");

                entity.Property(e => e.Remark9).HasColumnName("REMARK9");

                entity.Property(e => e.Remark9e).HasColumnName("REMARK9E");

                entity.Property(e => e.Salesrep)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALESREP");

                entity.Property(e => e.Shipboatid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPBOATID");

                entity.Property(e => e.Shipcoid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPCOID");

                entity.Property(e => e.Shiplotno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SHIPLOTNO");

                entity.Property(e => e.Shippolino)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SHIPPOLINO");

                entity.Property(e => e.Shipportid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPPORTID");

                entity.Property(e => e.Shiptrnsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SHIPTRNSID");

                entity.Property(e => e.Shipweekno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SHIPWEEKNO");

                entity.Property(e => e.Soilcond)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SOILCOND");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Stax)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("STAX")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.StaxRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("STAX_RATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Storedocnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREDOCNUM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Stringvalue)
                    .HasMaxLength(200)
                    .HasColumnName("STRINGVALUE");

                entity.Property(e => e.Tax41rate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TAX41RATE");

                entity.Property(e => e.Tax41trnsnatural)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX41TRNSNATURAL");

                entity.Property(e => e.Tax41value)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TAX41VALUE");

                entity.Property(e => e.ToStoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TO_STORE_ALLCODES_ID");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TOTAL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.TransferCost)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TRANSFER_COST")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");

                entity.Property(e => e.TrnsNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO");

                entity.Property(e => e.Trnsusersid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSUSERSID");

                entity.Property(e => e.Typeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TYPEID");

                entity.Property(e => e.Updatedby)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEDBY");

                entity.Property(e => e.Weathercond)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("WEATHERCOND");

                entity.HasOne(d => d.Agridata)
                    .WithMany(p => p.StoreTrnsMs)
                    .HasForeignKey(d => d.Agridataid)
                    .HasConstraintName("STORE_TRNS_M_R09");

                entity.HasOne(d => d.Arrivalport)
                    .WithMany(p => p.StoreTrnsMArrivalports)
                    .HasForeignKey(d => d.Arrivalportid)
                    .HasConstraintName("STORE_TRNS_M_R14");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.StoreTrnsMs)
                    .HasForeignKey(d => d.BranchId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_M_FK4");

                entity.HasOne(d => d.Clearanceco)
                    .WithMany(p => p.StoreTrnsMClearancecos)
                    .HasForeignKey(d => d.Clearancecoid)
                    .HasConstraintName("STORE_TRNS_M_R12");

                entity.HasOne(d => d.Discountlist)
                    .WithMany(p => p.StoreTrnsMs)
                    .HasForeignKey(d => d.Discountlistid)
                    .HasConstraintName("STORE_TRNS_M_R05");

                entity.HasOne(d => d.FromStoreAllcodes)
                    .WithMany(p => p.StoreTrnsMFromStoreAllcodes)
                    .HasForeignKey(d => d.FromStoreAllcodesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_M_FK1");

                entity.HasOne(d => d.Productionstage)
                    .WithMany(p => p.StoreTrnsMs)
                    .HasForeignKey(d => d.Productionstageid)
                    .HasConstraintName("STOREM_PRODUCTIONSATGE");

                entity.HasOne(d => d.Shipboat)
                    .WithMany(p => p.StoreTrnsMShipboats)
                    .HasForeignKey(d => d.Shipboatid)
                    .HasConstraintName("STORE_TRNS_M_R15");

                entity.HasOne(d => d.Shipco)
                    .WithMany(p => p.StoreTrnsMShipcos)
                    .HasForeignKey(d => d.Shipcoid)
                    .HasConstraintName("STORE_TRNS_M_R10");

                entity.HasOne(d => d.Shipport)
                    .WithMany(p => p.StoreTrnsMShipports)
                    .HasForeignKey(d => d.Shipportid)
                    .HasConstraintName("STORE_TRNS_M_R13");

                entity.HasOne(d => d.Shiptrns)
                    .WithMany(p => p.StoreTrnsMShiptrns)
                    .HasForeignKey(d => d.Shiptrnsid)
                    .HasConstraintName("STORE_TRNS_M_R11");

                entity.HasOne(d => d.ToStoreAllcodes)
                    .WithMany(p => p.StoreTrnsMToStoreAllcodes)
                    .HasForeignKey(d => d.ToStoreAllcodesId)
                    .HasConstraintName("STORE_TRNS_M_FK2");

                entity.HasOne(d => d.TrnsCodeNavigation)
                    .WithMany(p => p.StoreTrnsMs)
                    .HasForeignKey(d => d.TrnsCode)
                    .HasConstraintName("STORE_TRNS_M_FK3");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.StoreTrnsMTypes)
                    .HasForeignKey(d => d.Typeid)
                    .HasConstraintName("STORE_TRNS_M_R08");
            });

            modelBuilder.Entity<StoreTrnsMStage>(entity =>
            {
                entity.ToTable("STORE_TRNS_M_STAGE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Duration)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DURATION");

                entity.Property(e => e.Satgeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SATGEID");

                entity.Property(e => e.StoreTrnsmid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNSMID");
            });

            modelBuilder.Entity<StoreTrnsMTemp>(entity =>
            {
                entity.HasKey(e => e.StoreTrnsMId)
                    .HasName("STORE_TRNS_M_TEMP_PK");

                entity.ToTable("STORE_TRNS_M_TEMP");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.Addition1)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ADDITION1");

                entity.Property(e => e.Addition1Rate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ADDITION1_RATE");

                entity.Property(e => e.Addition2)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ADDITION2");

                entity.Property(e => e.Addition2Rate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ADDITION2_RATE");

                entity.Property(e => e.Addition3)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ADDITION3");

                entity.Property(e => e.Addition3Rate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ADDITION3_RATE");

                entity.Property(e => e.Batchno)
                    .HasMaxLength(300)
                    .HasColumnName("BATCHNO");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Choicereason)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CHOICEREASON");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1\n");

                entity.Property(e => e.Ctax)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CTAX");

                entity.Property(e => e.CtaxDisc)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CTAX_DISC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CtaxDiscRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CTAX_DISC_RATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CtaxRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CTAX_RATE");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Deliveryplace)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERYPLACE");

                entity.Property(e => e.DepOnGroupno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEP_ON_GROUPNO");

                entity.Property(e => e.Disc)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC");

                entity.Property(e => e.Disc2)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC2");

                entity.Property(e => e.Disc2Rate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC2_RATE");

                entity.Property(e => e.DiscRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC_RATE");

                entity.Property(e => e.Discountlistid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISCOUNTLISTID");

                entity.Property(e => e.EndDate)
                    .HasColumnType("DATE")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.ExpensesAdd)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("EXPENSES_ADD")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ExpensesCurr)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("EXPENSES_CURR");

                entity.Property(e => e.ExpensesDisc)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("EXPENSES_DISC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ExpensesNet)
                    .HasPrecision(1)
                    .HasColumnName("EXPENSES_NET");

                entity.Property(e => e.ExpensesNoeffect)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("EXPENSES_NOEFFECT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ExpensesRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("EXPENSES_RATE");

                entity.Property(e => e.FromStoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROM_STORE_ALLCODES_ID");

                entity.Property(e => e.Initcash)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("INITCASH")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Irrigationneed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IRRIGATIONNEED");

                entity.Property(e => e.MainAccountid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAIN_ACCOUNTID");

                entity.Property(e => e.MainCostcenterid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAIN_COSTCENTERID");

                entity.Property(e => e.Numbervalue)
                    .HasMaxLength(300)
                    .HasColumnName("NUMBERVALUE");

                entity.Property(e => e.Paytypespec)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYTYPESPEC");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.PeriodLimit)
                    .HasPrecision(10)
                    .HasColumnName("PERIOD_LIMIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Pricelistid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICELISTID");

                entity.Property(e => e.Productionstageid)
                    .HasColumnType("NUMBER(30)")
                    .HasColumnName("PRODUCTIONSTAGEID");

                entity.Property(e => e.Receivedate)
                    .HasColumnType("DATE")
                    .HasColumnName("RECEIVEDATE");

                entity.Property(e => e.Rem)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("REM");

                entity.Property(e => e.Remark1).HasColumnName("REMARK1");

                entity.Property(e => e.Remark10).HasColumnName("REMARK10");

                entity.Property(e => e.Remark10e).HasColumnName("REMARK10E");

                entity.Property(e => e.Remark1e).HasColumnName("REMARK1E");

                entity.Property(e => e.Remark2).HasColumnName("REMARK2");

                entity.Property(e => e.Remark2e).HasColumnName("REMARK2E");

                entity.Property(e => e.Remark3).HasColumnName("REMARK3");

                entity.Property(e => e.Remark3e).HasColumnName("REMARK3E");

                entity.Property(e => e.Remark4).HasColumnName("REMARK4");

                entity.Property(e => e.Remark4e).HasColumnName("REMARK4E");

                entity.Property(e => e.Remark5).HasColumnName("REMARK5");

                entity.Property(e => e.Remark5e).HasColumnName("REMARK5E");

                entity.Property(e => e.Remark6).HasColumnName("REMARK6");

                entity.Property(e => e.Remark6e).HasColumnName("REMARK6E");

                entity.Property(e => e.Remark7).HasColumnName("REMARK7");

                entity.Property(e => e.Remark7e).HasColumnName("REMARK7E");

                entity.Property(e => e.Remark8).HasColumnName("REMARK8");

                entity.Property(e => e.Remark8e).HasColumnName("REMARK8E");

                entity.Property(e => e.Remark9).HasColumnName("REMARK9");

                entity.Property(e => e.Remark9e).HasColumnName("REMARK9E");

                entity.Property(e => e.Rowstate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROWSTATE");

                entity.Property(e => e.Salesrep)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALESREP");

                entity.Property(e => e.StartDate)
                    .HasColumnType("DATE")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Stax)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("STAX");

                entity.Property(e => e.StaxRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("STAX_RATE");

                entity.Property(e => e.Storedocnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREDOCNUM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Stringvalue)
                    .HasMaxLength(200)
                    .HasColumnName("STRINGVALUE");

                entity.Property(e => e.Tax41rate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TAX41RATE");

                entity.Property(e => e.Tax41trnsnatural)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX41TRNSNATURAL");

                entity.Property(e => e.Tax41value)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TAX41VALUE");

                entity.Property(e => e.ToStoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TO_STORE_ALLCODES_ID");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TOTAL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.TransferCost)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TRANSFER_COST")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");

                entity.Property(e => e.TrnsNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO");

                entity.Property(e => e.Trnsusersid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSUSERSID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.StoreTrnsMTemps)
                    .HasForeignKey(d => d.BranchId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_M_TEMP_FK4");

                entity.HasOne(d => d.Discountlist)
                    .WithMany(p => p.StoreTrnsMTemps)
                    .HasForeignKey(d => d.Discountlistid)
                    .HasConstraintName("STORE_TRNS_M_TEMP_R05");

                entity.HasOne(d => d.FromStoreAllcodes)
                    .WithMany(p => p.StoreTrnsMTempFromStoreAllcodes)
                    .HasForeignKey(d => d.FromStoreAllcodesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_M_TEMP_FK1");

                entity.HasOne(d => d.Productionstage)
                    .WithMany(p => p.StoreTrnsMTemps)
                    .HasForeignKey(d => d.Productionstageid)
                    .HasConstraintName("STOREMTEMP_PRODUCTIONSATGE");

                entity.HasOne(d => d.ToStoreAllcodes)
                    .WithMany(p => p.StoreTrnsMTempToStoreAllcodes)
                    .HasForeignKey(d => d.ToStoreAllcodesId)
                    .HasConstraintName("STORE_TRNS_M_TEMP_FK2");

                entity.HasOne(d => d.TrnsCodeNavigation)
                    .WithMany(p => p.StoreTrnsMTemps)
                    .HasForeignKey(d => d.TrnsCode)
                    .HasConstraintName("STORE_TRNS_M_TEMP_FK3");
            });

            modelBuilder.Entity<StoreTrnsO>(entity =>
            {
                entity.ToTable("STORE_TRNS_O");

                entity.HasIndex(e => e.ItemId, "STORE_TRNS_OITEMSINDEX1");

                entity.Property(e => e.StoreTrnsOId)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORE_TRNS_O_ID");

                entity.Property(e => e.Actualspace)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ACTUALSPACE");

                entity.Property(e => e.Agriageid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AGRIAGEID");

                entity.Property(e => e.Agricontainerno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AGRICONTAINERNO");

                entity.Property(e => e.Agrifarmid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AGRIFARMID");

                entity.Property(e => e.Agriqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AGRIQTY");

                entity.Property(e => e.Begintime)
                    .HasColumnType("DATE")
                    .HasColumnName("BEGINTIME");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Containerno)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CONTAINERNO");

                entity.Property(e => e.DetailAccountid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DETAIL_ACCOUNTID");

                entity.Property(e => e.DetailCostcenterid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DETAIL_COSTCENTERID");

                entity.Property(e => e.Detentionrev)
                    .HasPrecision(1)
                    .HasColumnName("DETENTIONREV");

                entity.Property(e => e.DiscRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC_RATE");

                entity.Property(e => e.DiscVal)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC_VAL");

                entity.Property(e => e.Distexpcost)
                    .HasColumnType("NUMBER(25,4)")
                    .HasColumnName("DISTEXPCOST");

                entity.Property(e => e.Dstid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DSTID");

                entity.Property(e => e.Endtime)
                    .HasColumnType("DATE")
                    .HasColumnName("ENDTIME");

                entity.Property(e => e.Enginepressure)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENGINEPRESSURE");

                entity.Property(e => e.Execperc)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("EXECPERC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Fertunitid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FERTUNITID");

                entity.Property(e => e.Freeitem)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FREEITEM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Fromdate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROMDATE");

                entity.Property(e => e.Fromtime)
                    .HasColumnType("DATE")
                    .HasColumnName("FROMTIME");

                entity.Property(e => e.Growerno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROWERNO");

                entity.Property(e => e.Injpercentage)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INJPERCENTAGE");

                entity.Property(e => e.Injureid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INJUREID");

                entity.Property(e => e.Item2nddiscRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ITEM_2NDDISC_RATE");

                entity.Property(e => e.Item2nddiscVal)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ITEM_2NDDISC_VAL");

                entity.Property(e => e.ItemCost)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ITEM_COST");

                entity.Property(e => e.ItemId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEM_ID");

                entity.Property(e => e.ItemKind)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEM_KIND");

                entity.Property(e => e.Itemapproved)
                    .HasPrecision(1)
                    .HasColumnName("ITEMAPPROVED");

                entity.Property(e => e.Itemnetperc)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ITEMNETPERC");

                entity.Property(e => e.Itemnotes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNOTES");

                entity.Property(e => e.Itemtotalperc)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ITEMTOTALPERC");

                entity.Property(e => e.Licensedatefrom)
                    .HasColumnType("DATE")
                    .HasColumnName("LICENSEDATEFROM");

                entity.Property(e => e.Licensedateto)
                    .HasColumnType("DATE")
                    .HasColumnName("LICENSEDATETO");

                entity.Property(e => e.Licenseno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("LICENSENO");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Numbervalue)
                    .HasMaxLength(200)
                    .HasColumnName("NUMBERVALUE");

                entity.Property(e => e.Phi)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PHI");

                entity.Property(e => e.Poolid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POOLID");

                entity.Property(e => e.Processid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PROCESSID");

                entity.Property(e => e.ProdformlaId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRODFORMLA_ID");

                entity.Property(e => e.Productionstageid)
                    .HasColumnType("NUMBER(30)")
                    .HasColumnName("PRODUCTIONSTAGEID");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("QTY");

                entity.Property(e => e.Releasetype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("RELEASETYPE");

                entity.Property(e => e.Requiredprocedure)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REQUIREDPROCEDURE");

                entity.Property(e => e.Restrictionperiod)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("RESTRICTIONPERIOD");

                entity.Property(e => e.Safeperiod)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SAFEPERIOD");

                entity.Property(e => e.StaxVal)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("STAX_VAL");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.StoretrnsProformlaId)
                    .HasColumnType("NUMBER(30)")
                    .HasColumnName("STORETRNS_PROFORMLA_ID");

                entity.Property(e => e.Stringvalue)
                    .HasMaxLength(200)
                    .HasColumnName("STRINGVALUE");

                entity.Property(e => e.Todate)
                    .HasColumnType("DATE")
                    .HasColumnName("TODATE");

                entity.Property(e => e.Totalo)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TOTALO");

                entity.Property(e => e.Totime)
                    .HasColumnType("DATE")
                    .HasColumnName("TOTIME");

                entity.Property(e => e.TrnsPriceForcost)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TRNS_PRICE_FORCOST");

                entity.Property(e => e.Trnsods)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSODS");

                entity.Property(e => e.Unit2ndprice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("UNIT_2NDPRICE");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNIT_ID");

                entity.Property(e => e.UnitOldprice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("UNIT_OLDPRICE");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("UNIT_PRICE");

                entity.Property(e => e.Waterpressure)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("WATERPRESSURE");

                entity.Property(e => e.Watervolume)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("WATERVOLUME");

                entity.Property(e => e.Weekno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("WEEKNO");

                entity.Property(e => e.Workingtime)
                    .HasColumnType("NUMBER")
                    .HasColumnName("WORKINGTIME");

                entity.HasOne(d => d.Agrifarm)
                    .WithMany(p => p.StoreTrnsOs)
                    .HasForeignKey(d => d.Agrifarmid)
                    .HasConstraintName("STORE_TRNS_O_R_FARM");

                entity.HasOne(d => d.Dst)
                    .WithMany(p => p.StoreTrnsODsts)
                    .HasForeignKey(d => d.Dstid)
                    .HasConstraintName("STORE_TRNS_O_FK4");

                entity.HasOne(d => d.Fertunit)
                    .WithMany(p => p.StoreTrnsOs)
                    .HasForeignKey(d => d.Fertunitid)
                    .HasConstraintName("STORE_TRNS_O_R09");

                entity.HasOne(d => d.Injure)
                    .WithMany(p => p.StoreTrnsOInjures)
                    .HasForeignKey(d => d.Injureid)
                    .HasConstraintName("STORE_TRNS_O_R08");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StoreTrnsOs)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_O_FK1");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.StoreTrnsOs)
                    .HasForeignKey(d => d.Processid)
                    .HasConstraintName("STORE_TRNS_O_R07");

                entity.HasOne(d => d.StoreTrnsM)
                    .WithMany(p => p.StoreTrnsOs)
                    .HasForeignKey(d => d.StoreTrnsMId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_O_FK3");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.StoreTrnsOs)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("STORE_TRNS_O_FK2");

                entity.HasOne(d => d.WorkingtimeNavigation)
                    .WithMany(p => p.StoreTrnsOs)
                    .HasForeignKey(d => d.Workingtime)
                    .HasConstraintName("STORE_TRNS_O_R10");
            });

            modelBuilder.Entity<StoreTrnsOStage>(entity =>
            {
                entity.ToTable("STORE_TRNS_O_STAGE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Duration)
                    .HasColumnType("NUMBER(24,9)")
                    .HasColumnName("DURATION");

                entity.Property(e => e.Stageid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STAGEID");

                entity.Property(e => e.StoreTrnsOid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_OID");
            });

            modelBuilder.Entity<StoreTrnsOTemp>(entity =>
            {
                entity.HasKey(e => e.StoreTrnsOId)
                    .HasName("STORE_TRNS_O_TEMP_PK");

                entity.ToTable("STORE_TRNS_O_TEMP");

                entity.Property(e => e.StoreTrnsOId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_O_ID");

                entity.Property(e => e.Begintime)
                    .HasColumnType("DATE")
                    .HasColumnName("BEGINTIME");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1\n");

                entity.Property(e => e.Containerno)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CONTAINERNO");

                entity.Property(e => e.DetailAccountid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DETAIL_ACCOUNTID");

                entity.Property(e => e.DetailCostcenterid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DETAIL_COSTCENTERID");

                entity.Property(e => e.DiscRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC_RATE");

                entity.Property(e => e.DiscVal)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("DISC_VAL");

                entity.Property(e => e.Distexpcost)
                    .HasColumnType("NUMBER(25,4)")
                    .HasColumnName("DISTEXPCOST");

                entity.Property(e => e.Dstid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DSTID");

                entity.Property(e => e.Endtime)
                    .HasColumnType("DATE")
                    .HasColumnName("ENDTIME");

                entity.Property(e => e.Fromdate)
                    .HasColumnType("DATE")
                    .HasColumnName("FROMDATE");

                entity.Property(e => e.Growerno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROWERNO");

                entity.Property(e => e.Item2nddiscRate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ITEM_2NDDISC_RATE");

                entity.Property(e => e.Item2nddiscVal)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ITEM_2NDDISC_VAL");

                entity.Property(e => e.ItemCost)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ITEM_COST");

                entity.Property(e => e.ItemId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEM_ID");

                entity.Property(e => e.ItemKind)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEM_KIND");

                entity.Property(e => e.Itemapproved)
                    .HasPrecision(1)
                    .HasColumnName("ITEMAPPROVED");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Numbervalue)
                    .HasMaxLength(200)
                    .HasColumnName("NUMBERVALUE");

                entity.Property(e => e.ProdformlaId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRODFORMLA_ID");

                entity.Property(e => e.Productionstageid)
                    .HasColumnType("NUMBER(30)")
                    .HasColumnName("PRODUCTIONSTAGEID");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("QTY");

                entity.Property(e => e.Rowstate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROWSTATE");

                entity.Property(e => e.Safeperiod)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SAFEPERIOD");

                entity.Property(e => e.StaxVal)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("STAX_VAL");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.StoretrnsProformlaId)
                    .HasColumnType("NUMBER(30)")
                    .HasColumnName("STORETRNS_PROFORMLA_ID");

                entity.Property(e => e.Stringvalue)
                    .HasMaxLength(200)
                    .HasColumnName("STRINGVALUE");

                entity.Property(e => e.Todate)
                    .HasColumnType("DATE")
                    .HasColumnName("TODATE");

                entity.Property(e => e.Totalo)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TOTALO");

                entity.Property(e => e.TrnsPriceForcost)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TRNS_PRICE_FORCOST");

                entity.Property(e => e.Trnsods)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSODS");

                entity.Property(e => e.Unit2ndprice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("UNIT_2NDPRICE");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNIT_ID");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("UNIT_PRICE");

                entity.Property(e => e.Weekno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("WEEKNO");

                entity.HasOne(d => d.Dst)
                    .WithMany(p => p.StoreTrnsOTemps)
                    .HasForeignKey(d => d.Dstid)
                    .HasConstraintName("STORE_TRNS_O_TEMP_FK4");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StoreTrnsOTemps)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_O_TEMP_TEMP_FK1");

                entity.HasOne(d => d.Productionstage)
                    .WithMany(p => p.StoreTrnsOTemps)
                    .HasForeignKey(d => d.Productionstageid)
                    .HasConstraintName("STOREOTEMP_PRODUCTIONSATGE");

                entity.HasOne(d => d.StoreTrnsM)
                    .WithMany(p => p.StoreTrnsOTemps)
                    .HasForeignKey(d => d.StoreTrnsMId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_O_TEMP_FK3");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.StoreTrnsOTemps)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("STORE_TRNS_O_TEMP_FK2");
            });

            modelBuilder.Entity<StoreTrnsPrice>(entity =>
            {
                entity.HasKey(e => e.Trnspriceid)
                    .HasName("SYS_C0019214");

                entity.ToTable("STORE_TRNS_PRICE");

                entity.Property(e => e.Trnspriceid)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TRNSPRICEID");

                entity.Property(e => e.Averageprice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("AVERAGEPRICE");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.ItemId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEM_ID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("QTY");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.TrnsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_ID");

                entity.Property(e => e.TrnsPriceForcost)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TRNS_PRICE_FORCOST")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNITID");

                entity.Property(e => e.Unitprice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("UNITPRICE");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StoreTrnsPrices)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("STORE_TRNS_PRICE_FK1");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StoreTrnsPrices)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("STORE_TRNS_PRICE_FK3");

                entity.HasOne(d => d.Trns)
                    .WithMany(p => p.StoreTrnsPrices)
                    .HasForeignKey(d => d.TrnsId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_PRICE_FK2");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.StoreTrnsPrices)
                    .HasForeignKey(d => d.Unitid)
                    .HasConstraintName("STORE_TRNS_PRICE_FK4");
            });

            modelBuilder.Entity<StoreTrnsProducationformla>(entity =>
            {
                entity.ToTable("STORE_TRNS_PRODUCATIONFORMLA");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QTY");

                entity.Property(e => e.StoreItemsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ITEMS_ID");

                entity.Property(e => e.StoreTrnsoId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_TRNSO_ID");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNITID");

                entity.HasOne(d => d.StoreItems)
                    .WithMany(p => p.StoreTrnsProducationformlas)
                    .HasForeignKey(d => d.StoreItemsId)
                    .HasConstraintName("STORE_TRNS_PRODUCATIONFORM_R02");

                entity.HasOne(d => d.StoreTrnso)
                    .WithMany(p => p.StoreTrnsProducationformlas)
                    .HasForeignKey(d => d.StoreTrnsoId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNS_PRODUCATIONFORM_R01");
            });

            modelBuilder.Entity<StoreTrnsfromtrn>(entity =>
            {
                entity.ToTable("STORE_TRNSFROMTRNS");

                entity.HasIndex(e => new { e.TrnsCodeM, e.TrnsCodeS }, "STORE_TRNSFROMTRNS_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ChangeSides)
                    .HasPrecision(1)
                    .HasColumnName("CHANGE_SIDES")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Depdoc)
                    .HasPrecision(1)
                    .HasColumnName("DEPDOC");

                entity.Property(e => e.Depsides)
                    .HasPrecision(1)
                    .HasColumnName("DEPSIDES");

                entity.Property(e => e.Docnodep)
                    .HasPrecision(10)
                    .HasColumnName("DOCNODEP");

                entity.Property(e => e.GetMatrialTrns)
                    .HasPrecision(1)
                    .HasColumnName("GET_MATRIAL_TRNS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.GetWorkeNum)
                    .HasPrecision(1)
                    .HasColumnName("GET_WORKE_NUM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Items)
                    .HasPrecision(1)
                    .HasColumnName("ITEMS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.NoMessage)
                    .HasPrecision(1)
                    .HasColumnName("NO_MESSAGE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.PlanType)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PLAN_TYPE");

                entity.Property(e => e.QtyFunction)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QTY_FUNCTION");

                entity.Property(e => e.Reservation)
                    .HasPrecision(1)
                    .HasColumnName("RESERVATION");

                entity.Property(e => e.SameDep)
                    .HasPrecision(1)
                    .HasColumnName("SAME_DEP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.SameNum)
                    .HasPrecision(1)
                    .HasColumnName("SAME_NUM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.SamePrice)
                    .HasPrecision(1)
                    .HasColumnName("SAME_PRICE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.SameStageNum)
                    .HasPrecision(1)
                    .HasColumnName("SAME_STAGE_NUM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Serial)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERIAL");

                entity.Property(e => e.TrnsCodeM)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE_M");

                entity.Property(e => e.TrnsCodeS)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE_S");

                entity.Property(e => e.UseMatrial)
                    .HasPrecision(1)
                    .HasColumnName("USE_MATRIAL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.UseSecretariat)
                    .HasPrecision(1)
                    .HasColumnName("USE_SECRETARIAT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.UseTrnsMatrial)
                    .HasPrecision(1)
                    .HasColumnName("USE_TRNS_MATRIAL")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.TrnsCodeMNavigation)
                    .WithMany(p => p.StoreTrnsfromtrnTrnsCodeMNavigations)
                    .HasForeignKey(d => d.TrnsCodeM)
                    .HasConstraintName("STORE_TRNSFROMTRNS_R01");

                entity.HasOne(d => d.TrnsCodeSNavigation)
                    .WithMany(p => p.StoreTrnsfromtrnTrnsCodeSNavigations)
                    .HasForeignKey(d => d.TrnsCodeS)
                    .HasConstraintName("SYS_C0019771");
            });

            modelBuilder.Entity<StoreTrnsoD>(entity =>
            {
                entity.HasKey(e => e.Stdid)
                    .HasName("STORE_TRNSO_DS_PK");

                entity.ToTable("STORE_TRNSO_DS");

                entity.Property(e => e.Stdid)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STDID");

                entity.Property(e => e.Trnsoid1)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSOID1");

                entity.Property(e => e.Trnsoid2)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSOID2");
            });

            modelBuilder.Entity<StoreTrnsoDimendetailsTemp>(entity =>
            {
                entity.ToTable("STORE_TRNSO_DIMENDETAILS_TEMP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.DimensionsdetailsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONSDETAILS_ID");

                entity.Property(e => e.StoreTrnsOId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_TRNS_O_ID");

                entity.HasOne(d => d.Dimensionsdetails)
                    .WithMany(p => p.StoreTrnsoDimendetailsTemps)
                    .HasForeignKey(d => d.DimensionsdetailsId)
                    .HasConstraintName("STORE_TRNSO_DIMENDET_TEMP_R01");

                entity.HasOne(d => d.StoreTrnsO)
                    .WithMany(p => p.StoreTrnsoDimendetailsTemps)
                    .HasForeignKey(d => d.StoreTrnsOId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNSO_DIMENDET_TEMP_R02");
            });

            modelBuilder.Entity<StoreTrnsoDimensionsdetail>(entity =>
            {
                entity.ToTable("STORE_TRNSO_DIMENSIONSDETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.DimensionsdetailsId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONSDETAILS_ID");

                entity.Property(e => e.StoreTrnsOId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_TRNS_O_ID");

                entity.HasOne(d => d.Dimensionsdetails)
                    .WithMany(p => p.StoreTrnsoDimensionsdetails)
                    .HasForeignKey(d => d.DimensionsdetailsId)
                    .HasConstraintName("STORE_TRNSO_DIMENSIONSDETA_R01");

                entity.HasOne(d => d.StoreTrnsO)
                    .WithMany(p => p.StoreTrnsoDimensionsdetails)
                    .HasForeignKey(d => d.StoreTrnsOId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORE_TRNSO_DIMENSIONSDETA_R02");
            });

            modelBuilder.Entity<StoreUnit>(entity =>
            {
                entity.HasKey(e => e.Unitid)
                    .HasName("SYS_C0019223");

                entity.ToTable("STORE_UNITS");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNITID");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Ename)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Saname)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SANAME");

                entity.Property(e => e.Sename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SENAME");
            });

            modelBuilder.Entity<Storeacceptenceview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STOREACCEPTENCEVIEW");

                entity.Property(e => e.AcceptId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCEPT_ID");

                entity.Property(e => e.AcceptName)
                    .HasMaxLength(50)
                    .HasColumnName("ACCEPT_NAME");

                entity.Property(e => e.AcceptSerial)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCEPT_SERIAL");

                entity.Property(e => e.Acceptdate)
                    .HasColumnType("DATE")
                    .HasColumnName("ACCEPTDATE");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.IsAccepted)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IS_ACCEPTED");

                entity.Property(e => e.Reason)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("REASON");

                entity.Property(e => e.TrnsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_ID");

                entity.Property(e => e.Uname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNAME");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<Storeallcodesattachment>(entity =>
            {
                entity.ToTable("STOREALLCODESATTACHMENTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Attachmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTID");

                entity.Property(e => e.Dateadded)
                    .HasColumnType("DATE")
                    .HasColumnName("DATEADDED");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Storeallcodesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREALLCODESID");

                entity.Property(e => e.Uniquename)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("UNIQUENAME");

                entity.HasOne(d => d.Attachment)
                    .WithMany(p => p.Storeallcodesattachments)
                    .HasForeignKey(d => d.Attachmentid)
                    .HasConstraintName("STOREALLCODESATTACHMENTS_R02");

                entity.HasOne(d => d.Storeallcodes)
                    .WithMany(p => p.Storeallcodesattachments)
                    .HasForeignKey(d => d.Storeallcodesid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STOREALLCODESATTACHMENTS_R01");
            });

            modelBuilder.Entity<Storeallcodesview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STOREALLCODESVIEW");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.CashBeginCredit)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("CASH_BEGIN_CREDIT");

                entity.Property(e => e.CashBeginDebit)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("CASH_BEGIN_DEBIT");

                entity.Property(e => e.CheckBeginCredit)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("CHECK_BEGIN_CREDIT");

                entity.Property(e => e.CheckBeginDebit)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("CHECK_BEGIN_DEBIT");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Form)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORM");

                entity.Property(e => e.Formename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORMENAME");

                entity.Property(e => e.Formname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORMNAME");

                entity.Property(e => e.GroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPF_ID");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.Type)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TYPE");

                entity.Property(e => e.Typeename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPEENAME");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<Storecustdepositeview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STORECUSTDEPOSITEVIEW");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.CustId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUST_ID");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");
            });

            modelBuilder.Entity<Storedsttype>(entity =>
            {
                entity.HasKey(e => e.Dstid)
                    .HasName("STOREDSTTYPES_PK");

                entity.ToTable("STOREDSTTYPES");

                entity.Property(e => e.Dstid)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DSTID");

                entity.Property(e => e.Dsttype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DSTTYPE");

                entity.Property(e => e.Ft)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FT");

                entity.Property(e => e.Rank)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RANK");

                entity.Property(e => e.Trnscode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSCODE");

                entity.HasOne(d => d.TrnscodeNavigation)
                    .WithMany(p => p.Storedsttypes)
                    .HasForeignKey(d => d.Trnscode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STOREDSTTYPES_R01");
            });

            modelBuilder.Entity<Storefinancegrossview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STOREFINANCEGROSSVIEW");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.FromStoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROM_STORE_ALLCODES_ID");

                entity.Property(e => e.Grossleft)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSLEFT");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.ToStoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TO_STORE_ALLCODES_ID");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");

                entity.Property(e => e.TrnsNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO");
            });

            modelBuilder.Entity<Storefinancegrossview2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STOREFINANCEGROSSVIEW2");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYNAME");

                entity.Property(e => e.FromStoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROM_STORE_ALLCODES_ID");

                entity.Property(e => e.Fromname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMNAME");

                entity.Property(e => e.Grossleft)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSLEFT");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Rem)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REM");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.ToStoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TO_STORE_ALLCODES_ID");

                entity.Property(e => e.Toname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TONAME");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");

                entity.Property(e => e.TrnsNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO");
            });

            modelBuilder.Entity<Storeinvcreation>(entity =>
            {
                entity.ToTable("STOREINVCREATION");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Docno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNO");

                entity.Property(e => e.StoreMId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_M_ID");

                entity.Property(e => e.Storeinvid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREINVID");

                entity.Property(e => e.Transcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSCODE");
            });

            modelBuilder.Entity<Storeitemsallcode>(entity =>
            {
                entity.ToTable("STOREITEMSALLCODES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Approved)
                    .HasPrecision(1)
                    .HasColumnName("APPROVED");

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.Storeallcodeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREALLCODEID");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.Storeitemsallcodes)
                    .HasForeignKey(d => d.Itemid)
                    .HasConstraintName("STOREITEMSALLCODES_R02");

                entity.HasOne(d => d.Storeallcode)
                    .WithMany(p => p.Storeitemsallcodes)
                    .HasForeignKey(d => d.Storeallcodeid)
                    .HasConstraintName("STOREITEMSALLCODES_R01");
            });

            modelBuilder.Entity<Storemextra>(entity =>
            {
                entity.ToTable("STOREMEXTRAS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Extrasid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EXTRASID");

                entity.Property(e => e.Storemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREMID");

                entity.Property(e => e.Value)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VALUE");

                entity.Property(e => e.Valuear)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VALUEAR");

                entity.HasOne(d => d.Extras)
                    .WithMany(p => p.Storemextras)
                    .HasForeignKey(d => d.Extrasid)
                    .HasConstraintName("STOREMEXTRAS_R02");

                entity.HasOne(d => d.Storem)
                    .WithMany(p => p.Storemextras)
                    .HasForeignKey(d => d.Storemid)
                    .HasConstraintName("STOREMEXTRAS_R01");
            });

            modelBuilder.Entity<Storeminttrade>(entity =>
            {
                entity.ToTable("STOREMINTTRADE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Intradeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INTRADEID");

                entity.Property(e => e.Storemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREMID");

                entity.HasOne(d => d.Intrade)
                    .WithMany(p => p.Storeminttrades)
                    .HasForeignKey(d => d.Intradeid)
                    .HasConstraintName("STOREMINTTRADE_R01");

                entity.HasOne(d => d.Storem)
                    .WithMany(p => p.Storeminttrades)
                    .HasForeignKey(d => d.Storemid)
                    .HasConstraintName("STOREMINTTRADE_R02");
            });

            modelBuilder.Entity<Storerectrnsdepdettemp>(entity =>
            {
                entity.ToTable("STORERECTRNSDEPDETTEMP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Ctrnsorowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CTRNSOROWID");

                entity.Property(e => e.Itemapproved)
                    .HasPrecision(1)
                    .HasColumnName("ITEMAPPROVED");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.ProwId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PROW_ID");

                entity.Property(e => e.Ptrnsorowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PTRNSOROWID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.Remain)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REMAIN");

                entity.Property(e => e.StoretrnsProformlaId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORETRNS_PROFORMLA_ID");

                entity.Property(e => e.TotalQty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TOTAL_QTY");

                entity.Property(e => e.Unitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNITID");

                entity.Property(e => e.Unitprice)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("UNITPRICE")
                    .HasDefaultValueSql("0");
            });

            modelBuilder.Entity<Storespecapp>(entity =>
            {
                entity.HasKey(e => e.Storespecappid)
                    .HasName("STORESPECAPP_PK");

                entity.ToTable("STORESPECAPP");

                entity.HasIndex(e => new { e.Appid, e.Storespecid }, "STORESPECAPP_U01")
                    .IsUnique();

                entity.Property(e => e.Storespecappid)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STORESPECAPPID");

                entity.Property(e => e.Appid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("APPID");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Storespecid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORESPECID");
            });

            modelBuilder.Entity<Storetrnsextcor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STORETRNSEXTCOR");

                entity.Property(e => e.Acceptcount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCEPTCOUNT");

                entity.Property(e => e.Actualspace)
                    .HasPrecision(1)
                    .HasColumnName("ACTUALSPACE");

                entity.Property(e => e.Ageid)
                    .HasPrecision(1)
                    .HasColumnName("AGEID");

                entity.Property(e => e.Agridata)
                    .HasPrecision(1)
                    .HasColumnName("AGRIDATA");

                entity.Property(e => e.Agridataid)
                    .HasPrecision(1)
                    .HasColumnName("AGRIDATAID");

                entity.Property(e => e.Agriid)
                    .HasPrecision(1)
                    .HasColumnName("AGRIID");

                entity.Property(e => e.Agriitems)
                    .HasPrecision(1)
                    .HasColumnName("AGRIITEMS");

                entity.Property(e => e.Agrinorepeat)
                    .HasPrecision(1)
                    .HasColumnName("AGRINOREPEAT");

                entity.Property(e => e.Agriqty)
                    .HasPrecision(1)
                    .HasColumnName("AGRIQTY");

                entity.Property(e => e.AllowanceDateType)
                    .HasPrecision(1)
                    .HasColumnName("ALLOWANCE_DATE_TYPE");

                entity.Property(e => e.Allowqtyedit)
                    .HasPrecision(1)
                    .HasColumnName("ALLOWQTYEDIT");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Approvedvendor)
                    .HasPrecision(1)
                    .HasColumnName("APPROVEDVENDOR");

                entity.Property(e => e.Arrivalport)
                    .HasPrecision(1)
                    .HasColumnName("ARRIVALPORT");

                entity.Property(e => e.Begintime)
                    .HasPrecision(1)
                    .HasColumnName("BEGINTIME");

                entity.Property(e => e.Cargoactually)
                    .HasPrecision(1)
                    .HasColumnName("CARGOACTUALLY");

                entity.Property(e => e.Cargoexpected)
                    .HasPrecision(1)
                    .HasColumnName("CARGOEXPECTED");

                entity.Property(e => e.Cargopaper)
                    .HasPrecision(1)
                    .HasColumnName("CARGOPAPER");

                entity.Property(e => e.Cashid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CASHID");

                entity.Property(e => e.Choicereason)
                    .HasPrecision(1)
                    .HasColumnName("CHOICEREASON");

                entity.Property(e => e.Clearanceco)
                    .HasPrecision(1)
                    .HasColumnName("CLEARANCECO");

                entity.Property(e => e.Committee)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITTEE");

                entity.Property(e => e.Committeeexist)
                    .HasPrecision(1)
                    .HasColumnName("COMMITTEEEXIST");

                entity.Property(e => e.Costcentereffect)
                    .HasPrecision(1)
                    .HasColumnName("COSTCENTEREFFECT");

                entity.Property(e => e.Createitems)
                    .HasPrecision(1)
                    .HasColumnName("CREATEITEMS");

                entity.Property(e => e.Ctax)
                    .HasPrecision(1)
                    .HasColumnName("CTAX");

                entity.Property(e => e.Ctaxdisc)
                    .HasPrecision(1)
                    .HasColumnName("CTAXDISC");

                entity.Property(e => e.Ctaxdiscrate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CTAXDISCRATE");

                entity.Property(e => e.Ctaxrate)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("CTAXRATE");

                entity.Property(e => e.Custmorctax)
                    .HasPrecision(1)
                    .HasColumnName("CUSTMORCTAX");

                entity.Property(e => e.Custmordisc)
                    .HasPrecision(1)
                    .HasColumnName("CUSTMORDISC");

                entity.Property(e => e.Deliveryplace)
                    .HasPrecision(1)
                    .HasColumnName("DELIVERYPLACE");

                entity.Property(e => e.Depositflag)
                    .HasPrecision(1)
                    .HasColumnName("DEPOSITFLAG");

                entity.Property(e => e.Detailaccount)
                    .HasPrecision(1)
                    .HasColumnName("DETAILACCOUNT");

                entity.Property(e => e.Detailcostcenter)
                    .HasPrecision(1)
                    .HasColumnName("DETAILCOSTCENTER");

                entity.Property(e => e.Detentionrev)
                    .HasPrecision(1)
                    .HasColumnName("DETENTIONREV");

                entity.Property(e => e.Docnumcreation)
                    .HasPrecision(1)
                    .HasColumnName("DOCNUMCREATION");

                entity.Property(e => e.Docnumedit)
                    .HasPrecision(1)
                    .HasColumnName("DOCNUMEDIT");

                entity.Property(e => e.Docnumrepeat)
                    .HasPrecision(1)
                    .HasColumnName("DOCNUMREPEAT");

                entity.Property(e => e.Docrepeatonperiod)
                    .HasPrecision(1)
                    .HasColumnName("DOCREPEATONPERIOD");

                entity.Property(e => e.Dstdetailstype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DSTDETAILSTYPE");

                entity.Property(e => e.Dstindetails)
                    .HasPrecision(1)
                    .HasColumnName("DSTINDETAILS");

                entity.Property(e => e.Dsttype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DSTTYPE");

                entity.Property(e => e.Employeeno)
                    .HasPrecision(1)
                    .HasColumnName("EMPLOYEENO");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Endtime)
                    .HasPrecision(1)
                    .HasColumnName("ENDTIME");

                entity.Property(e => e.Enginepressure)
                    .HasPrecision(1)
                    .HasColumnName("ENGINEPRESSURE");

                entity.Property(e => e.Expensescurr)
                    .HasPrecision(1)
                    .HasColumnName("EXPENSESCURR");

                entity.Property(e => e.Expensesdist)
                    .HasPrecision(1)
                    .HasColumnName("EXPENSESDIST");

                entity.Property(e => e.Expenseseffect)
                    .HasPrecision(1)
                    .HasColumnName("EXPENSESEFFECT");

                entity.Property(e => e.Expensesrate)
                    .HasPrecision(1)
                    .HasColumnName("EXPENSESRATE");

                entity.Property(e => e.Fertunit)
                    .HasPrecision(1)
                    .HasColumnName("FERTUNIT");

                entity.Property(e => e.Financedistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCEDISTID");

                entity.Property(e => e.Financetranscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FINANCETRANSCODE");

                entity.Property(e => e.Freeitem)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FREEITEM");

                entity.Property(e => e.Fromrequired)
                    .HasPrecision(1)
                    .HasColumnName("FROMREQUIRED");

                entity.Property(e => e.Fromstoreallcodesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMSTOREALLCODESID");

                entity.Property(e => e.Fromtime)
                    .HasPrecision(1)
                    .HasColumnName("FROMTIME");

                entity.Property(e => e.Fromtodate)
                    .HasPrecision(1)
                    .HasColumnName("FROMTODATE");

                entity.Property(e => e.Getdisclist)
                    .HasPrecision(1)
                    .HasColumnName("GETDISCLIST");

                entity.Property(e => e.Getdisclist2)
                    .HasPrecision(1)
                    .HasColumnName("GETDISCLIST2");

                entity.Property(e => e.Getpricelist)
                    .HasPrecision(1)
                    .HasColumnName("GETPRICELIST");

                entity.Property(e => e.Hascashpayment)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HASCASHPAYMENT");

                entity.Property(e => e.Hasdep)
                    .HasColumnType("NUMBER")
                    .HasColumnName("HASDEP");

                entity.Property(e => e.Hasenddate)
                    .HasPrecision(1)
                    .HasColumnName("HASENDDATE");

                entity.Property(e => e.Hasexpenses)
                    .HasPrecision(1)
                    .HasColumnName("HASEXPENSES");

                entity.Property(e => e.Hasproductiondata)
                    .HasPrecision(1)
                    .HasColumnName("HASPRODUCTIONDATA");

                entity.Property(e => e.Hasstartdate)
                    .HasPrecision(1)
                    .HasColumnName("HASSTARTDATE");

                entity.Property(e => e.Injureid)
                    .HasPrecision(1)
                    .HasColumnName("INJUREID");

                entity.Property(e => e.Inttradespec)
                    .HasPrecision(1)
                    .HasColumnName("INTTRADESPEC");

                entity.Property(e => e.Irrigatemachine)
                    .HasPrecision(1)
                    .HasColumnName("IRRIGATEMACHINE");

                entity.Property(e => e.Irrigationempshow)
                    .HasPrecision(1)
                    .HasColumnName("IRRIGATIONEMPSHOW");

                entity.Property(e => e.Irrigationneed)
                    .HasPrecision(1)
                    .HasColumnName("IRRIGATIONNEED");

                entity.Property(e => e.Item2nddisc)
                    .HasPrecision(1)
                    .HasColumnName("ITEM2NDDISC");

                entity.Property(e => e.Item2ndprice)
                    .HasPrecision(2)
                    .HasColumnName("ITEM2NDPRICE");

                entity.Property(e => e.Item2ndpriceeffect)
                    .HasPrecision(1)
                    .HasColumnName("ITEM2NDPRICEEFFECT");

                entity.Property(e => e.Itemapproved)
                    .HasPrecision(1)
                    .HasColumnName("ITEMAPPROVED");

                entity.Property(e => e.Itemclone)
                    .HasPrecision(1)
                    .HasColumnName("ITEMCLONE");

                entity.Property(e => e.Itemdisc)
                    .HasPrecision(1)
                    .HasColumnName("ITEMDISC");

                entity.Property(e => e.Itemdisclistid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMDISCLISTID");

                entity.Property(e => e.Itemprice)
                    .HasPrecision(2)
                    .HasColumnName("ITEMPRICE");

                entity.Property(e => e.Itempriceavg)
                    .HasPrecision(1)
                    .HasColumnName("ITEMPRICEAVG");

                entity.Property(e => e.Itempricelistid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ITEMPRICELISTID");

                entity.Property(e => e.Itemstax)
                    .HasPrecision(1)
                    .HasColumnName("ITEMSTAX");

                entity.Property(e => e.Licensedate)
                    .HasPrecision(1)
                    .HasColumnName("LICENSEDATE");

                entity.Property(e => e.Licenseno)
                    .HasPrecision(1)
                    .HasColumnName("LICENSENO");

                entity.Property(e => e.Mainaccount)
                    .HasPrecision(1)
                    .HasColumnName("MAINACCOUNT");

                entity.Property(e => e.Maincostcenter)
                    .HasPrecision(1)
                    .HasColumnName("MAINCOSTCENTER");

                entity.Property(e => e.Managername)
                    .HasPrecision(1)
                    .HasColumnName("MANAGERNAME");

                entity.Property(e => e.Mobiletrans)
                    .HasPrecision(1)
                    .HasColumnName("MOBILETRANS");

                entity.Property(e => e.Multycurrency)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MULTYCURRENCY");

                entity.Property(e => e.Mustdsttype)
                    .HasPrecision(1)
                    .HasColumnName("MUSTDSTTYPE");

                entity.Property(e => e.Needaccept)
                    .HasPrecision(1)
                    .HasColumnName("NEEDACCEPT");

                entity.Property(e => e.Noduplicateserial)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NODUPLICATESERIAL");

                entity.Property(e => e.Payeffect)
                    .HasPrecision(1)
                    .HasColumnName("PAYEFFECT");

                entity.Property(e => e.Paymentspec)
                    .HasPrecision(1)
                    .HasColumnName("PAYMENTSPEC");

                entity.Property(e => e.Paymenttype)
                    .HasPrecision(1)
                    .HasColumnName("PAYMENTTYPE");

                entity.Property(e => e.Phi)
                    .HasPrecision(1)
                    .HasColumnName("PHI");

                entity.Property(e => e.Pool)
                    .HasPrecision(1)
                    .HasColumnName("POOL");

                entity.Property(e => e.Portarrival)
                    .HasPrecision(1)
                    .HasColumnName("PORTARRIVAL");

                entity.Property(e => e.Pricedecpoints)
                    .HasPrecision(10)
                    .HasColumnName("PRICEDECPOINTS");

                entity.Property(e => e.Priceeffect)
                    .HasPrecision(1)
                    .HasColumnName("PRICEEFFECT");

                entity.Property(e => e.Printcostprice)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PRINTCOSTPRICE");

                entity.Property(e => e.Processid)
                    .HasPrecision(1)
                    .HasColumnName("PROCESSID");

                entity.Property(e => e.Purpose)
                    .HasPrecision(1)
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Qtyeffect)
                    .HasPrecision(1)
                    .HasColumnName("QTYEFFECT");

                entity.Property(e => e.Receivedate)
                    .HasPrecision(1)
                    .HasColumnName("RECEIVEDATE");

                entity.Property(e => e.Releasetype)
                    .HasPrecision(1)
                    .HasColumnName("RELEASETYPE");

                entity.Property(e => e.Requiredprocedure)
                    .HasPrecision(1)
                    .HasColumnName("REQUIREDPROCEDURE");

                entity.Property(e => e.Reservation)
                    .HasPrecision(1)
                    .HasColumnName("RESERVATION");

                entity.Property(e => e.Restrictionperiod)
                    .HasPrecision(1)
                    .HasColumnName("RESTRICTIONPERIOD");

                entity.Property(e => e.Safeperiod)
                    .HasPrecision(1)
                    .HasColumnName("SAFEPERIOD");

                entity.Property(e => e.Salesrep)
                    .HasPrecision(1)
                    .HasColumnName("SALESREP");

                entity.Property(e => e.Shipboat)
                    .HasPrecision(1)
                    .HasColumnName("SHIPBOAT");

                entity.Property(e => e.Shipco)
                    .HasPrecision(1)
                    .HasColumnName("SHIPCO");

                entity.Property(e => e.Shiplotno)
                    .HasPrecision(1)
                    .HasColumnName("SHIPLOTNO");

                entity.Property(e => e.Shippingeffectonholder)
                    .HasPrecision(1)
                    .HasColumnName("SHIPPINGEFFECTONHOLDER");

                entity.Property(e => e.Shippingspecs)
                    .HasPrecision(1)
                    .HasColumnName("SHIPPINGSPECS");

                entity.Property(e => e.Shippolino)
                    .HasPrecision(1)
                    .HasColumnName("SHIPPOLINO");

                entity.Property(e => e.Shipport)
                    .HasPrecision(1)
                    .HasColumnName("SHIPPORT");

                entity.Property(e => e.Shiptrns)
                    .HasPrecision(1)
                    .HasColumnName("SHIPTRNS");

                entity.Property(e => e.Shipweekno)
                    .HasPrecision(1)
                    .HasColumnName("SHIPWEEKNO");

                entity.Property(e => e.Show2ndprice)
                    .HasPrecision(1)
                    .HasColumnName("SHOW2NDPRICE");

                entity.Property(e => e.Showagricontainer)
                    .HasPrecision(1)
                    .HasColumnName("SHOWAGRICONTAINER");

                entity.Property(e => e.Showbal)
                    .HasPrecision(1)
                    .HasColumnName("SHOWBAL");

                entity.Property(e => e.Showcargo)
                    .HasPrecision(1)
                    .HasColumnName("SHOWCARGO");

                entity.Property(e => e.Showdependdoc)
                    .HasPrecision(1)
                    .HasColumnName("SHOWDEPENDDOC");

                entity.Property(e => e.Showeditbtn)
                    .HasPrecision(1)
                    .HasColumnName("SHOWEDITBTN");

                entity.Property(e => e.Showexpchoose)
                    .HasPrecision(1)
                    .HasColumnName("SHOWEXPCHOOSE");

                entity.Property(e => e.Showexptype)
                    .HasPrecision(1)
                    .HasColumnName("SHOWEXPTYPE");

                entity.Property(e => e.Showfarm)
                    .HasPrecision(1)
                    .HasColumnName("SHOWFARM");

                entity.Property(e => e.Showlc)
                    .HasPrecision(1)
                    .HasColumnName("SHOWLC");

                entity.Property(e => e.Showpopprice)
                    .HasPrecision(1)
                    .HasColumnName("SHOWPOPPRICE");

                entity.Property(e => e.Showprice)
                    .HasPrecision(1)
                    .HasColumnName("SHOWPRICE");

                entity.Property(e => e.Showprodstage)
                    .HasPrecision(1)
                    .HasColumnName("SHOWPRODSTAGE");

                entity.Property(e => e.Showrequireddocument)
                    .HasPrecision(1)
                    .HasColumnName("SHOWREQUIREDDOCUMENT");

                entity.Property(e => e.Showsupplyorderstatus)
                    .HasPrecision(1)
                    .HasColumnName("SHOWSUPPLYORDERSTATUS");

                entity.Property(e => e.Showtax41)
                    .HasPrecision(1)
                    .HasColumnName("SHOWTAX41");

                entity.Property(e => e.Showtermsofpayment)
                    .HasPrecision(1)
                    .HasColumnName("SHOWTERMSOFPAYMENT");

                entity.Property(e => e.Soilcond)
                    .HasPrecision(1)
                    .HasColumnName("SOILCOND");

                entity.Property(e => e.Stage)
                    .HasPrecision(1)
                    .HasColumnName("STAGE");

                entity.Property(e => e.Stax)
                    .HasPrecision(1)
                    .HasColumnName("STAX");

                entity.Property(e => e.Staxrate)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("STAXRATE");

                entity.Property(e => e.Storeitemfromsspecsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREITEMFROMSSPECSID");

                entity.Property(e => e.Taxdiscprnt)
                    .HasPrecision(1)
                    .HasColumnName("TAXDISCPRNT");

                entity.Property(e => e.Torequired)
                    .HasPrecision(1)
                    .HasColumnName("TOREQUIRED");

                entity.Property(e => e.Tostoreallcodesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOSTOREALLCODESID");

                entity.Property(e => e.Totime)
                    .HasPrecision(1)
                    .HasColumnName("TOTIME");

                entity.Property(e => e.Transfercosttype)
                    .HasPrecision(1)
                    .HasColumnName("TRANSFERCOSTTYPE");

                entity.Property(e => e.Transrepeatonperiod)
                    .HasPrecision(1)
                    .HasColumnName("TRANSREPEATONPERIOD");

                entity.Property(e => e.Trnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSCODE");

                entity.Property(e => e.Trnsdisc)
                    .HasPrecision(1)
                    .HasColumnName("TRNSDISC");

                entity.Property(e => e.Trnsdiscrate)
                    .HasColumnType("NUMBER(20,9)")
                    .HasColumnName("TRNSDISCRATE");

                entity.Property(e => e.Trnsnature)
                    .HasPrecision(2)
                    .HasColumnName("TRNSNATURE");

                entity.Property(e => e.Trnsnocreation)
                    .HasPrecision(1)
                    .HasColumnName("TRNSNOCREATION");

                entity.Property(e => e.Trnsnoedit)
                    .HasPrecision(1)
                    .HasColumnName("TRNSNOEDIT");

                entity.Property(e => e.Trnsnorepeat)
                    .HasPrecision(1)
                    .HasColumnName("TRNSNOREPEAT");

                entity.Property(e => e.Trnstype)
                    .HasPrecision(2)
                    .HasColumnName("TRNSTYPE");

                entity.Property(e => e.Typeid)
                    .HasPrecision(1)
                    .HasColumnName("TYPEID");

                entity.Property(e => e.Usebarcode)
                    .HasPrecision(1)
                    .HasColumnName("USEBARCODE");

                entity.Property(e => e.Waterpressure)
                    .HasPrecision(1)
                    .HasColumnName("WATERPRESSURE");

                entity.Property(e => e.Watervolume)
                    .HasPrecision(1)
                    .HasColumnName("WATERVOLUME");

                entity.Property(e => e.Weathercond)
                    .HasPrecision(1)
                    .HasColumnName("WEATHERCOND");

                entity.Property(e => e.Weekno)
                    .HasPrecision(1)
                    .HasColumnName("WEEKNO");

                entity.Property(e => e.Workingtime)
                    .HasPrecision(1)
                    .HasColumnName("WORKINGTIME");
            });

            modelBuilder.Entity<Storetrnsextexp>(entity =>
            {
                entity.ToTable("STORETRNSEXTEXP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Trnsmcode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSMCODE");

                entity.Property(e => e.Trnsscode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSSCODE");

                entity.HasOne(d => d.TrnsmcodeNavigation)
                    .WithMany(p => p.StoretrnsextexpTrnsmcodeNavigations)
                    .HasForeignKey(d => d.Trnsmcode)
                    .HasConstraintName("STORETRNSEXTEXP_R01");

                entity.HasOne(d => d.TrnsscodeNavigation)
                    .WithMany(p => p.StoretrnsextexpTrnsscodeNavigations)
                    .HasForeignKey(d => d.Trnsscode)
                    .HasConstraintName("STORETRNSEXTEXP_R02");
            });

            modelBuilder.Entity<Storetrnsextra>(entity =>
            {
                entity.ToTable("STORETRNSEXTRAS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Extrasfieldid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EXTRASFIELDID");

                entity.Property(e => e.Transid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSID");

                entity.HasOne(d => d.Extrasfield)
                    .WithMany(p => p.Storetrnsextras)
                    .HasForeignKey(d => d.Extrasfieldid)
                    .HasConstraintName("SYS_C0019431");

                entity.HasOne(d => d.Trans)
                    .WithMany(p => p.Storetrnsextras)
                    .HasForeignKey(d => d.Transid)
                    .HasConstraintName("SYS_C0019764");
            });

            modelBuilder.Entity<StoretrnsmInstalmento>(entity =>
            {
                entity.ToTable("STORETRNSM_INSTALMENTO");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Increaseval)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INCREASEVAL");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentbenfitvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTBENFITVALUE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instalmentpartsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTPARTSID");

                entity.Property(e => e.Instalmentvalueonly)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTVALUEONLY");

                entity.Property(e => e.Instprogramid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTPROGRAMID");

                entity.Property(e => e.Noofmonths)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NOOFMONTHS");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Penaltyexemptionrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYEXEMPTIONRATE");

                entity.Property(e => e.Serialename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALENAME");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.StoretrnsmInstalmentsmid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORETRNSM_INSTALMENTSMID");

                entity.Property(e => e.Subserial)
                    .HasPrecision(4)
                    .HasColumnName("SUBSERIAL");

                entity.Property(e => e.Val)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("VAL");

                entity.HasOne(d => d.Instalmentparts)
                    .WithMany(p => p.StoretrnsmInstalmentos)
                    .HasForeignKey(d => d.Instalmentpartsid)
                    .HasConstraintName("STORETRNSM_INSTALMENTO_FK2");

                entity.HasOne(d => d.Instprogram)
                    .WithMany(p => p.StoretrnsmInstalmentos)
                    .HasForeignKey(d => d.Instprogramid)
                    .HasConstraintName("STORETRNSM_INSTALMENTO_FK4");

                entity.HasOne(d => d.StoreTrnsM)
                    .WithMany(p => p.StoretrnsmInstalmentos)
                    .HasForeignKey(d => d.StoreTrnsMId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORETRNSM_INSTALMENTO_FK1");

                entity.HasOne(d => d.StoretrnsmInstalmentsm)
                    .WithMany(p => p.StoretrnsmInstalmentos)
                    .HasForeignKey(d => d.StoretrnsmInstalmentsmid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORETRNSM_INSTALMENTO_FK3");
            });

            modelBuilder.Entity<StoretrnsmInstalmentsm>(entity =>
            {
                entity.ToTable("STORETRNSM_INSTALMENTSM");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Externalbegintype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNALBEGINTYPE");

                entity.Property(e => e.Externalinterval)
                    .HasPrecision(5)
                    .HasColumnName("EXTERNALINTERVAL");

                entity.Property(e => e.Externalintervaltype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNALINTERVALTYPE");

                entity.Property(e => e.Instalmentpartid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTPARTID");

                entity.Property(e => e.Instcount)
                    .HasPrecision(3)
                    .HasColumnName("INSTCOUNT");

                entity.Property(e => e.Instpercent)
                    .HasColumnType("NUMBER(15,5)")
                    .HasColumnName("INSTPERCENT");

                entity.Property(e => e.Insttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INSTTYPE");

                entity.Property(e => e.Internalinterval)
                    .HasPrecision(5)
                    .HasColumnName("INTERNALINTERVAL");

                entity.Property(e => e.Internalintervaltype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("INTERNALINTERVALTYPE");

                entity.Property(e => e.Noofmonths)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NOOFMONTHS");

                entity.Property(e => e.Rank)
                    .HasPrecision(4)
                    .HasColumnName("RANK");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.HasOne(d => d.Instalmentpart)
                    .WithMany(p => p.StoretrnsmInstalmentsms)
                    .HasForeignKey(d => d.Instalmentpartid)
                    .HasConstraintName("STORETRNSM_INSTALMENTSM_FK2");

                entity.HasOne(d => d.StoreTrnsM)
                    .WithMany(p => p.StoretrnsmInstalmentsms)
                    .HasForeignKey(d => d.StoreTrnsMId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORETRNSM_INSTALMENTSM_FK1");
            });

            modelBuilder.Entity<Storetrnsmattachment>(entity =>
            {
                entity.ToTable("STORETRNSMATTACHMENTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Attachmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ATTACHMENTID");

                entity.Property(e => e.Dateadded)
                    .HasColumnType("DATE")
                    .HasColumnName("DATEADDED");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Storetrnsmid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORETRNSMID");

                entity.Property(e => e.Uniquename)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("UNIQUENAME");

                entity.HasOne(d => d.Attachment)
                    .WithMany(p => p.Storetrnsmattachments)
                    .HasForeignKey(d => d.Attachmentid)
                    .HasConstraintName("STORETRNSMATTACHMENTS_R02");

                entity.HasOne(d => d.Storetrnsm)
                    .WithMany(p => p.Storetrnsmattachments)
                    .HasForeignKey(d => d.Storetrnsmid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("STORETRNSMATTACHMENTS_R01");
            });

            modelBuilder.Entity<Storetrnsmcommittee>(entity =>
            {
                entity.ToTable("STORETRNSMCOMMITTEE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Committeeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITTEEID");

                entity.Property(e => e.Employeeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EMPLOYEEID");

                entity.Property(e => e.Employeename)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EMPLOYEENAME");

                entity.Property(e => e.Transid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSID");

                entity.HasOne(d => d.Committee)
                    .WithMany(p => p.Storetrnsmcommittees)
                    .HasForeignKey(d => d.Committeeid)
                    .HasConstraintName("SYS_C0019469");

                entity.HasOne(d => d.Trans)
                    .WithMany(p => p.Storetrnsmcommittees)
                    .HasForeignKey(d => d.Transid)
                    .HasConstraintName("SYS_C0019793");
            });

            modelBuilder.Entity<Storetrnsmextexp>(entity =>
            {
                entity.ToTable("STORETRNSMEXTEXP");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Expcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EXPCODE");

                entity.Property(e => e.Expvalue)
                    .HasColumnType("NUMBER(20,4)")
                    .HasColumnName("EXPVALUE")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Trnsmcode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSMCODE");

                entity.Property(e => e.Trnsscode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSSCODE");

                entity.HasOne(d => d.TrnsmcodeNavigation)
                    .WithMany(p => p.StoretrnsmextexpTrnsmcodeNavigations)
                    .HasForeignKey(d => d.Trnsmcode)
                    .HasConstraintName("STORETRNSMEXTEXP_R01");

                entity.HasOne(d => d.TrnsscodeNavigation)
                    .WithMany(p => p.StoretrnsmextexpTrnsscodeNavigations)
                    .HasForeignKey(d => d.Trnsscode)
                    .HasConstraintName("STORETRNSMEXTEXP_R02");
            });

            modelBuilder.Entity<Storetrnsmpayspec>(entity =>
            {
                entity.ToTable("STORETRNSMPAYSPECS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Batchdate)
                    .HasColumnType("DATE")
                    .HasColumnName("BATCHDATE");

                entity.Property(e => e.Batchname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("BATCHNAME");

                entity.Property(e => e.Batchno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("BATCHNO");

                entity.Property(e => e.Batchpercentage)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BATCHPERCENTAGE");

                entity.Property(e => e.Transid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSID");

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VALUE");

                entity.HasOne(d => d.Trans)
                    .WithMany(p => p.Storetrnsmpayspecs)
                    .HasForeignKey(d => d.Transid)
                    .HasConstraintName("SYS_C0019790");
            });

            modelBuilder.Entity<SubDist>(entity =>
            {
                entity.ToTable("SUB_DISTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Aname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.DistType)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DIST_TYPE");

                entity.Property(e => e.Ename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.FullCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FULL_CODE");

                entity.Property(e => e.Parent)
                    .HasPrecision(10)
                    .HasColumnName("PARENT");

                entity.Property(e => e.Ttype2)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TTYPE2")
                    .HasDefaultValueSql("'d'\n");
            });

            modelBuilder.Entity<SumInstInstalment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUM_INST_INSTALMENTS");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<Sumadditiontoinstalment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUMADDITIONTOINSTALMENT");

                entity.Property(e => e.Additions)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ADDITIONS");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<Sumdiscountstoinstalment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUMDISCOUNTSTOINSTALMENT");

                entity.Property(e => e.Discounts)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISCOUNTS");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<Sumfinstalmentswoutreschedual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUMFINSTALMENTSWOUTRESCHEDUAL");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Fixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL");

                entity.Property(e => e.Formtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FORMTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Penaltyval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYVAL");
            });

            modelBuilder.Entity<Sumfinstalmentswreschedual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUMFINSTALMENTSWRESCHEDUAL");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Fixedcostval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FIXEDCOSTVAL");

                entity.Property(e => e.Formtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FORMTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTALMENTID");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Penaltyval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTYVAL");
            });

            modelBuilder.Entity<Sumitemoutbyallstoreview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUMITEMOUTBYALLSTOREVIEW");

                entity.Property(e => e.ItemId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEM_ID");

                entity.Property(e => e.Sprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SPRICE");

                entity.Property(e => e.Squantity)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SQUANTITY");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");
            });

            modelBuilder.Entity<Sumofcompanyproceed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUMOFCOMPANYPROCEEDS");
            });

            modelBuilder.Entity<Sumofeachinst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUMOFEACHINST");
            });

            modelBuilder.Entity<Sumofinst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUMOFINST");
            });

            modelBuilder.Entity<SuppliersaleanalbyitemMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUPPLIERSALEANALBYITEM_MOD");

                entity.Property(e => e.Allreturnedvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLRETURNEDVALUE");

                entity.Property(e => e.Allsalesvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLSALESVALUE");

                entity.Property(e => e.Backprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BACKPRICE");

                entity.Property(e => e.Backqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BACKQTY");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Ctaxdiscreturnedvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAXDISCRETURNEDVALUE");

                entity.Property(e => e.Ctaxdiscsalesvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAXDISCSALESVALUE");

                entity.Property(e => e.Ctaxreturnedvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAXRETURNEDVALUE");

                entity.Property(e => e.Ctaxsalesvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAXSALESVALUE");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_CODE");

                entity.Property(e => e.ItemEname)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_ENAME");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_NAME");

                entity.Property(e => e.Itemformename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMFORMENAME");

                entity.Property(e => e.Itemformid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMFORMID");

                entity.Property(e => e.Itemformname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMFORMNAME");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.PayEffect)
                    .HasPrecision(1)
                    .HasColumnName("PAY_EFFECT");

                entity.Property(e => e.QtyEffect)
                    .HasPrecision(1)
                    .HasColumnName("QTY_EFFECT");

                entity.Property(e => e.Salesprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALESPRICE");

                entity.Property(e => e.Salesqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALESQTY");

                entity.Property(e => e.Staxreturnedvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAXRETURNEDVALUE");

                entity.Property(e => e.Staxsalesvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAXSALESVALUE");

                entity.Property(e => e.Supplcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLCODE");

                entity.Property(e => e.Supplename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLENAME");

                entity.Property(e => e.Supplformename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLFORMENAME");

                entity.Property(e => e.Supplformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUPPLFORMID");

                entity.Property(e => e.Supplformname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLFORMNAME");

                entity.Property(e => e.Supplid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUPPLID");

                entity.Property(e => e.Supplname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLNAME");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");

                entity.Property(e => e.TrnsNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO");

                entity.Property(e => e.Unitename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNITENAME");

                entity.Property(e => e.Unitname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNITNAME");
            });

            modelBuilder.Entity<Suppliersalesanalysisbyitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SUPPLIERSALESANALYSISBYITEM");
            });

            modelBuilder.Entity<Tax41view>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TAX41VIEW");

                entity.Property(e => e.Commtax)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMTAX");

                entity.Property(e => e.Commtaxrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMTAXRATE");

                entity.Property(e => e.Fileno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FILENO");

                entity.Property(e => e.Financieraddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FINANCIERADDRESS");

                entity.Property(e => e.Financiername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FINANCIERNAME");

                entity.Property(e => e.Flagtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FLAGTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.Grossvallocal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSVALLOCAL");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Invoicenum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INVOICENUM");

                entity.Property(e => e.Mission)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MISSION");

                entity.Property(e => e.Shortname)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SHORTNAME");

                entity.Property(e => e.Taxnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAXNUMBER");

                entity.Property(e => e.Tdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TDISTID");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");
            });

            modelBuilder.Entity<Tempindividualtable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMPINDIVIDUALTABLE");

                entity.Property(e => e.Checkcredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDIT")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Checkdebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ID")
                    .HasDefaultValueSql("0");
            });

            modelBuilder.Entity<Temptable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMPTABLE");

                entity.Property(e => e.AccountId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACCOUNT_ID");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CurremcyRate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURREMCY_RATE");

                entity.Property(e => e.CurrencyId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCY_ID");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Id)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Netvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NETVALUE");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");
            });

            modelBuilder.Entity<TermsRequiredDocument>(entity =>
            {
                entity.ToTable("TERMS_REQUIRED_DOCUMENT");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Briefdesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRIEFDESC");

                entity.Property(e => e.Memo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("MEMO");

                entity.Property(e => e.Termcode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TERMCODE");

                entity.Property(e => e.Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");
            });

            modelBuilder.Entity<Termsofinstaintemsale>(entity =>
            {
                entity.ToTable("TERMSOFINSTAINTEMSALE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Institemmaintypesid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMMAINTYPESID");

                entity.Property(e => e.Maximinnumunits)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAXIMINNUMUNITS");

                entity.HasOne(d => d.Institemmaintypes)
                    .WithMany(p => p.Termsofinstaintemsales)
                    .HasForeignKey(d => d.Institemmaintypesid)
                    .HasConstraintName("TERMSOFINSTAINTEMSALE_R01");
            });

            modelBuilder.Entity<Tracing>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRACING");

                entity.Property(e => e.Action)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ACTION");

                entity.Property(e => e.Details)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DETAILS");

                entity.Property(e => e.Key)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("KEY");

                entity.Property(e => e.Location)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.RState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("R_STATE");

                entity.Property(e => e.TName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("T_NAME");
            });

            modelBuilder.Entity<TrnsExpensessView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TRNS_EXPENSESS_VIEW");

                entity.Property(e => e.Expcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EXPCODE");

                entity.Property(e => e.Expname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EXPNAME");

                entity.Property(e => e.Expvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EXPVALUE");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.TrnsNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO");

                entity.Property(e => e.Trnsmcode)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSMCODE");

                entity.Property(e => e.Trnsmid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSMID");

                entity.Property(e => e.Trnsname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRNSNAME");
            });

            modelBuilder.Entity<TrnsPrintSpec>(entity =>
            {
                entity.ToTable("TRNS_PRINT_SPEC");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Account)
                    .HasPrecision(1)
                    .HasColumnName("ACCOUNT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Addition1label)
                    .HasMaxLength(200)
                    .HasColumnName("ADDITION1LABEL");

                entity.Property(e => e.Addition1labele)
                    .HasMaxLength(200)
                    .HasColumnName("ADDITION1LABELE");

                entity.Property(e => e.Addition1value)
                    .HasColumnType("NUMBER(10,4)")
                    .HasColumnName("ADDITION1VALUE");

                entity.Property(e => e.Addition2label)
                    .HasMaxLength(200)
                    .HasColumnName("ADDITION2LABEL");

                entity.Property(e => e.Addition2labele)
                    .HasMaxLength(200)
                    .HasColumnName("ADDITION2LABELE");

                entity.Property(e => e.Addition2value)
                    .HasColumnType("NUMBER(10,4)")
                    .HasColumnName("ADDITION2VALUE");

                entity.Property(e => e.Addition3label)
                    .HasMaxLength(200)
                    .HasColumnName("ADDITION3LABEL");

                entity.Property(e => e.Addition3labele)
                    .HasMaxLength(200)
                    .HasColumnName("ADDITION3LABELE");

                entity.Property(e => e.Addition3value)
                    .HasColumnType("NUMBER(10,4)")
                    .HasColumnName("ADDITION3VALUE");

                entity.Property(e => e.Batchlabel)
                    .HasMaxLength(300)
                    .HasColumnName("BATCHLABEL");

                entity.Property(e => e.Batchlabele)
                    .HasMaxLength(300)
                    .HasColumnName("BATCHLABELE");

                entity.Property(e => e.Batchno)
                    .HasMaxLength(200)
                    .HasColumnName("BATCHNO");

                entity.Property(e => e.Branchlabel)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHLABEL");

                entity.Property(e => e.Briefprint)
                    .HasPrecision(1)
                    .HasColumnName("BRIEFPRINT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Commentoneshow)
                    .HasPrecision(1)
                    .HasColumnName("COMMENTONESHOW")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Commentonetxt)
                    .HasMaxLength(100)
                    .HasColumnName("COMMENTONETXT");

                entity.Property(e => e.Commentthreeplace)
                    .HasPrecision(1)
                    .HasColumnName("COMMENTTHREEPLACE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Commentthreeshow)
                    .HasPrecision(1)
                    .HasColumnName("COMMENTTHREESHOW")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Commentthreetxt)
                    .HasMaxLength(100)
                    .HasColumnName("COMMENTTHREETXT");

                entity.Property(e => e.Commenttwoshow)
                    .HasPrecision(1)
                    .HasColumnName("COMMENTTWOSHOW")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Commenttwotxt)
                    .HasMaxLength(100)
                    .HasColumnName("COMMENTTWOTXT");

                entity.Property(e => e.Companylogo)
                    .HasPrecision(1)
                    .HasColumnName("COMPANYLOGO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Costcenter)
                    .HasPrecision(1)
                    .HasColumnName("COSTCENTER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Costprice)
                    .HasPrecision(1)
                    .HasColumnName("COSTPRICE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Disc2label)
                    .HasMaxLength(200)
                    .HasColumnName("DISC2LABEL");

                entity.Property(e => e.Disc2labele)
                    .HasMaxLength(200)
                    .HasColumnName("DISC2LABELE");

                entity.Property(e => e.Disc2value)
                    .HasColumnType("NUMBER(10,4)")
                    .HasColumnName("DISC2VALUE");

                entity.Property(e => e.DocNoshow)
                    .HasPrecision(1)
                    .HasColumnName("DOC_NOSHOW")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Fromcode)
                    .HasPrecision(1)
                    .HasColumnName("FROMCODE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Fromname)
                    .HasPrecision(1)
                    .HasColumnName("FROMNAME")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Fromotherdata)
                    .HasPrecision(1)
                    .HasColumnName("FROMOTHERDATA")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ItemNameOnTwoRow)
                    .HasPrecision(1)
                    .HasColumnName("ITEM_NAME_ON_TWO_ROW")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Itemcode)
                    .HasPrecision(1)
                    .HasColumnName("ITEMCODE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Itemnameonsupp)
                    .HasPrecision(1)
                    .HasColumnName("ITEMNAMEONSUPP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Multiunits)
                    .HasPrecision(1)
                    .HasColumnName("MULTIUNITS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Notecolumnaddress)
                    .HasMaxLength(50)
                    .HasColumnName("NOTECOLUMNADDRESS");

                entity.Property(e => e.Notescolumn)
                    .HasPrecision(1)
                    .HasColumnName("NOTESCOLUMN")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Notesinstadofname)
                    .HasPrecision(1)
                    .HasColumnName("NOTESINSTADOFNAME")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Notsonitem)
                    .HasPrecision(1)
                    .HasColumnName("NOTSONITEM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Numbermlabel)
                    .HasMaxLength(300)
                    .HasColumnName("NUMBERMLABEL");

                entity.Property(e => e.Numbermlabele)
                    .HasMaxLength(300)
                    .HasColumnName("NUMBERMLABELE");

                entity.Property(e => e.Numbermvalue)
                    .HasMaxLength(200)
                    .HasColumnName("NUMBERMVALUE");

                entity.Property(e => e.Numberolabel)
                    .HasMaxLength(300)
                    .HasColumnName("NUMBEROLABEL");

                entity.Property(e => e.Numberolabele)
                    .HasMaxLength(300)
                    .HasColumnName("NUMBEROLABELE");

                entity.Property(e => e.Numberovalue)
                    .HasMaxLength(200)
                    .HasColumnName("NUMBEROVALUE");

                entity.Property(e => e.Offerdate)
                    .HasColumnType("DATE")
                    .HasColumnName("OFFERDATE");

                entity.Property(e => e.Offerfooter).HasColumnName("OFFERFOOTER");

                entity.Property(e => e.Offerfootere).HasColumnName("OFFERFOOTERE");

                entity.Property(e => e.Offerheader).HasColumnName("OFFERHEADER");

                entity.Property(e => e.Offerheadere).HasColumnName("OFFERHEADERE");

                entity.Property(e => e.Offernotes).HasColumnName("OFFERNOTES");

                entity.Property(e => e.Offernotese).HasColumnName("OFFERNOTESE");

                entity.Property(e => e.Orderbyserial)
                    .HasPrecision(1)
                    .HasColumnName("ORDERBYSERIAL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Price)
                    .HasPrecision(1)
                    .HasColumnName("PRICE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Printdistdetails)
                    .HasPrecision(1)
                    .HasColumnName("PRINTDISTDETAILS");

                entity.Property(e => e.Productionstagedesc)
                    .HasMaxLength(300)
                    .HasColumnName("PRODUCTIONSTAGEDESC");

                entity.Property(e => e.Productionstageid)
                    .HasColumnType("NUMBER(30)")
                    .HasColumnName("PRODUCTIONSTAGEID");

                entity.Property(e => e.Reciveddate)
                    .HasPrecision(1)
                    .HasColumnName("RECIVEDDATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Remark10label)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK10LABEL");

                entity.Property(e => e.Remark10labele)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK10LABELE");

                entity.Property(e => e.Remark10value).HasColumnName("REMARK10VALUE");

                entity.Property(e => e.Remark10valuee).HasColumnName("REMARK10VALUEE");

                entity.Property(e => e.Remark1label)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK1LABEL");

                entity.Property(e => e.Remark1labele)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK1LABELE");

                entity.Property(e => e.Remark1value).HasColumnName("REMARK1VALUE");

                entity.Property(e => e.Remark1valuee).HasColumnName("REMARK1VALUEE");

                entity.Property(e => e.Remark2label)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK2LABEL");

                entity.Property(e => e.Remark2labele)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK2LABELE");

                entity.Property(e => e.Remark2value).HasColumnName("REMARK2VALUE");

                entity.Property(e => e.Remark2valuee).HasColumnName("REMARK2VALUEE");

                entity.Property(e => e.Remark3label)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK3LABEL");

                entity.Property(e => e.Remark3labele)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK3LABELE");

                entity.Property(e => e.Remark3value).HasColumnName("REMARK3VALUE");

                entity.Property(e => e.Remark3valuee).HasColumnName("REMARK3VALUEE");

                entity.Property(e => e.Remark4label)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK4LABEL");

                entity.Property(e => e.Remark4labele)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK4LABELE");

                entity.Property(e => e.Remark4value).HasColumnName("REMARK4VALUE");

                entity.Property(e => e.Remark4valuee).HasColumnName("REMARK4VALUEE");

                entity.Property(e => e.Remark5label)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK5LABEL");

                entity.Property(e => e.Remark5labele)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK5LABELE");

                entity.Property(e => e.Remark5value).HasColumnName("REMARK5VALUE");

                entity.Property(e => e.Remark5valuee).HasColumnName("REMARK5VALUEE");

                entity.Property(e => e.Remark6label)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK6LABEL");

                entity.Property(e => e.Remark6labele)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK6LABELE");

                entity.Property(e => e.Remark6value).HasColumnName("REMARK6VALUE");

                entity.Property(e => e.Remark6valuee).HasColumnName("REMARK6VALUEE");

                entity.Property(e => e.Remark7label)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK7LABEL");

                entity.Property(e => e.Remark7labele)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK7LABELE");

                entity.Property(e => e.Remark7value).HasColumnName("REMARK7VALUE");

                entity.Property(e => e.Remark7valuee).HasColumnName("REMARK7VALUEE");

                entity.Property(e => e.Remark8label)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK8LABEL");

                entity.Property(e => e.Remark8labele)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK8LABELE");

                entity.Property(e => e.Remark8value).HasColumnName("REMARK8VALUE");

                entity.Property(e => e.Remark8valuee).HasColumnName("REMARK8VALUEE");

                entity.Property(e => e.Remark9label)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK9LABEL");

                entity.Property(e => e.Remark9labele)
                    .HasMaxLength(200)
                    .HasColumnName("REMARK9LABELE");

                entity.Property(e => e.Remark9value).HasColumnName("REMARK9VALUE");

                entity.Property(e => e.Remark9valuee).HasColumnName("REMARK9VALUEE");

                entity.Property(e => e.Reportaddress)
                    .HasMaxLength(50)
                    .HasColumnName("REPORTADDRESS");

                entity.Property(e => e.Showbalance)
                    .HasPrecision(1)
                    .HasColumnName("SHOWBALANCE");

                entity.Property(e => e.Showextras)
                    .HasPrecision(1)
                    .HasColumnName("SHOWEXTRAS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Signonename)
                    .HasMaxLength(50)
                    .HasColumnName("SIGNONENAME");

                entity.Property(e => e.Signonetype)
                    .HasMaxLength(50)
                    .HasColumnName("SIGNONETYPE");

                entity.Property(e => e.Signthreename)
                    .HasMaxLength(50)
                    .HasColumnName("SIGNTHREENAME");

                entity.Property(e => e.Signthreetype)
                    .HasMaxLength(50)
                    .HasColumnName("SIGNTHREETYPE");

                entity.Property(e => e.Signtwoname)
                    .HasMaxLength(50)
                    .HasColumnName("SIGNTWONAME");

                entity.Property(e => e.Signtwotype)
                    .HasMaxLength(50)
                    .HasColumnName("SIGNTWOTYPE");

                entity.Property(e => e.Stringmlabel)
                    .HasMaxLength(300)
                    .HasColumnName("STRINGMLABEL");

                entity.Property(e => e.Stringmlabele)
                    .HasMaxLength(300)
                    .HasColumnName("STRINGMLABELE");

                entity.Property(e => e.Stringmvalue)
                    .HasMaxLength(200)
                    .HasColumnName("STRINGMVALUE");

                entity.Property(e => e.Stringolabel)
                    .HasMaxLength(300)
                    .HasColumnName("STRINGOLABEL");

                entity.Property(e => e.Stringolabele)
                    .HasMaxLength(300)
                    .HasColumnName("STRINGOLABELE");

                entity.Property(e => e.Stringovalue)
                    .HasMaxLength(200)
                    .HasColumnName("STRINGOVALUE");

                entity.Property(e => e.Tocode)
                    .HasPrecision(1)
                    .HasColumnName("TOCODE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Toname)
                    .HasPrecision(1)
                    .HasColumnName("TONAME")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Tootherdata)
                    .HasPrecision(1)
                    .HasColumnName("TOOTHERDATA")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totalldeptrnsno)
                    .HasPrecision(1)
                    .HasColumnName("TOTALLDEPTRNSNO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totallprice)
                    .HasPrecision(1)
                    .HasColumnName("TOTALLPRICE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Totallqty)
                    .HasPrecision(1)
                    .HasColumnName("TOTALLQTY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.Trnsdepaddno)
                    .HasPrecision(1)
                    .HasColumnName("TRNSDEPADDNO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Trnsdepno)
                    .HasPrecision(1)
                    .HasColumnName("TRNSDEPNO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Trnsnote)
                    .HasPrecision(1)
                    .HasColumnName("TRNSNOTE")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.Productionstage)
                    .WithMany(p => p.TrnsPrintSpecs)
                    .HasForeignKey(d => d.Productionstageid)
                    .HasConstraintName("TRNS_PRINT_PRODSTAGE");

                entity.HasOne(d => d.TrnsCodeNavigation)
                    .WithMany(p => p.TrnsPrintSpecs)
                    .HasForeignKey(d => d.TrnsCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TRNS_PRINT_SPEC_R01");
            });

            modelBuilder.Entity<TrnsPrintSpecView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TRNS_PRINT_SPEC_VIEW");

                entity.Property(e => e.Account)
                    .HasPrecision(1)
                    .HasColumnName("ACCOUNT");

                entity.Property(e => e.Briefprint)
                    .HasPrecision(1)
                    .HasColumnName("BRIEFPRINT");

                entity.Property(e => e.Commentoneshow)
                    .HasPrecision(1)
                    .HasColumnName("COMMENTONESHOW");

                entity.Property(e => e.Commentonetxt)
                    .HasMaxLength(100)
                    .HasColumnName("COMMENTONETXT");

                entity.Property(e => e.Commentthreeplace)
                    .HasPrecision(1)
                    .HasColumnName("COMMENTTHREEPLACE");

                entity.Property(e => e.Commentthreeshow)
                    .HasPrecision(1)
                    .HasColumnName("COMMENTTHREESHOW");

                entity.Property(e => e.Commentthreetxt)
                    .HasMaxLength(100)
                    .HasColumnName("COMMENTTHREETXT");

                entity.Property(e => e.Commenttwoshow)
                    .HasPrecision(1)
                    .HasColumnName("COMMENTTWOSHOW");

                entity.Property(e => e.Commenttwotxt)
                    .HasMaxLength(100)
                    .HasColumnName("COMMENTTWOTXT");

                entity.Property(e => e.Companylogo)
                    .HasPrecision(1)
                    .HasColumnName("COMPANYLOGO");

                entity.Property(e => e.Costcenter)
                    .HasPrecision(1)
                    .HasColumnName("COSTCENTER");

                entity.Property(e => e.Costprice)
                    .HasPrecision(1)
                    .HasColumnName("COSTPRICE");

                entity.Property(e => e.Fromcode)
                    .HasPrecision(1)
                    .HasColumnName("FROMCODE");

                entity.Property(e => e.Fromname)
                    .HasPrecision(1)
                    .HasColumnName("FROMNAME");

                entity.Property(e => e.Fromotherdata)
                    .HasPrecision(1)
                    .HasColumnName("FROMOTHERDATA");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.ItemNameOnTwoRow)
                    .HasPrecision(1)
                    .HasColumnName("ITEM_NAME_ON_TWO_ROW");

                entity.Property(e => e.Itemcode)
                    .HasPrecision(1)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemnameonsupp)
                    .HasPrecision(1)
                    .HasColumnName("ITEMNAMEONSUPP");

                entity.Property(e => e.Multiunits)
                    .HasPrecision(1)
                    .HasColumnName("MULTIUNITS");

                entity.Property(e => e.Notecolumnaddress)
                    .HasMaxLength(50)
                    .HasColumnName("NOTECOLUMNADDRESS");

                entity.Property(e => e.Notescolumn)
                    .HasPrecision(1)
                    .HasColumnName("NOTESCOLUMN");

                entity.Property(e => e.Notesinstadofname)
                    .HasPrecision(1)
                    .HasColumnName("NOTESINSTADOFNAME");

                entity.Property(e => e.Notsonitem)
                    .HasPrecision(1)
                    .HasColumnName("NOTSONITEM");

                entity.Property(e => e.Orderbyserial)
                    .HasPrecision(1)
                    .HasColumnName("ORDERBYSERIAL");

                entity.Property(e => e.Price)
                    .HasPrecision(1)
                    .HasColumnName("PRICE");

                entity.Property(e => e.Reciveddate)
                    .HasPrecision(1)
                    .HasColumnName("RECIVEDDATE");

                entity.Property(e => e.Reportaddress)
                    .HasMaxLength(50)
                    .HasColumnName("REPORTADDRESS");

                entity.Property(e => e.Signonename)
                    .HasMaxLength(50)
                    .HasColumnName("SIGNONENAME");

                entity.Property(e => e.Signonetype)
                    .HasMaxLength(50)
                    .HasColumnName("SIGNONETYPE");

                entity.Property(e => e.Signthreename)
                    .HasMaxLength(50)
                    .HasColumnName("SIGNTHREENAME");

                entity.Property(e => e.Signthreetype)
                    .HasMaxLength(50)
                    .HasColumnName("SIGNTHREETYPE");

                entity.Property(e => e.Signtwoname)
                    .HasMaxLength(50)
                    .HasColumnName("SIGNTWONAME");

                entity.Property(e => e.Signtwotype)
                    .HasMaxLength(50)
                    .HasColumnName("SIGNTWOTYPE");

                entity.Property(e => e.Tocode)
                    .HasPrecision(1)
                    .HasColumnName("TOCODE");

                entity.Property(e => e.Toname)
                    .HasPrecision(1)
                    .HasColumnName("TONAME");

                entity.Property(e => e.Tootherdata)
                    .HasPrecision(1)
                    .HasColumnName("TOOTHERDATA");

                entity.Property(e => e.Totalldeptrnsno)
                    .HasPrecision(1)
                    .HasColumnName("TOTALLDEPTRNSNO");

                entity.Property(e => e.Totallprice)
                    .HasPrecision(1)
                    .HasColumnName("TOTALLPRICE");

                entity.Property(e => e.Totallqty)
                    .HasPrecision(1)
                    .HasColumnName("TOTALLQTY");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.Trnsdepaddno)
                    .HasPrecision(1)
                    .HasColumnName("TRNSDEPADDNO");

                entity.Property(e => e.Trnsdepno)
                    .HasPrecision(1)
                    .HasColumnName("TRNSDEPNO");

                entity.Property(e => e.Trnsnote)
                    .HasPrecision(1)
                    .HasColumnName("TRNSNOTE");
            });

            modelBuilder.Entity<TrnsPrintSpecdetail>(entity =>
            {
                entity.ToTable("TRNS_PRINT_SPECDETAILS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Distcodetype)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISTCODETYPE");

                entity.Property(e => e.Disttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DISTTYPE");

                entity.Property(e => e.GroupBasicDataId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROUP_BASIC_DATA_ID");

                entity.Property(e => e.TrnsPrintSpecId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_PRINT_SPEC_ID");

                entity.HasOne(d => d.GroupBasicData)
                    .WithMany(p => p.TrnsPrintSpecdetails)
                    .HasForeignKey(d => d.GroupBasicDataId)
                    .HasConstraintName("TRNS_PRINT_SPECDETAILS_R02");

                entity.HasOne(d => d.TrnsPrintSpec)
                    .WithMany(p => p.TrnsPrintSpecdetails)
                    .HasForeignKey(d => d.TrnsPrintSpecId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("TRNS_PRINT_SPECDETAILS_R01");
            });

            modelBuilder.Entity<TrnsUserAccept>(entity =>
            {
                entity.HasKey(e => new { e.AcceptId, e.Userid })
                    .HasName("TRNS_USER_ACCEPT_PK");

                entity.ToTable("TRNS_USER_ACCEPT");

                entity.Property(e => e.AcceptId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ACCEPT_ID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.Accept)
                    .WithMany(p => p.TrnsUserAccepts)
                    .HasForeignKey(d => d.AcceptId)
                    .HasConstraintName("TRNS_USER_ACCEPT_R01");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TrnsUserAccepts)
                    .HasForeignKey(d => d.Userid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TRNS_USER_ACCEPT_R02");
            });

            modelBuilder.Entity<Trnsinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TRNSINFO");

                entity.Property(e => e.Branch)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED");

                entity.Property(e => e.FromDistCodename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROM_DIST_CODENAME");

                entity.Property(e => e.FromDistFormname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROM_DIST_FORMNAME");

                entity.Property(e => e.FromDistname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROM_DISTNAME");

                entity.Property(e => e.Fromcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FROMCODE");

                entity.Property(e => e.Fromcodeform)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMCODEFORM");

                entity.Property(e => e.Fromcodeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMCODEID");

                entity.Property(e => e.Fromcodetype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMCODETYPE");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Rem)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REM");

                entity.Property(e => e.Reservation)
                    .HasPrecision(1)
                    .HasColumnName("RESERVATION");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.Storedocnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREDOCNUM");

                entity.Property(e => e.ToDistCodename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TO_DIST_CODENAME");

                entity.Property(e => e.ToDistFormname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TO_DIST_FORMNAME");

                entity.Property(e => e.ToDistname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TO_DISTNAME");

                entity.Property(e => e.Tocode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOCODE");

                entity.Property(e => e.Tocodeform)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOCODEFORM");

                entity.Property(e => e.Tocodeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOCODEID");

                entity.Property(e => e.Tocodetype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOCODETYPE");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TOTAL");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");

                entity.Property(e => e.TrnsName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRNS_NAME");

                entity.Property(e => e.TrnsNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO");

                entity.Property(e => e.Trnstype)
                    .HasPrecision(2)
                    .HasColumnName("TRNSTYPE");
            });

            modelBuilder.Entity<Trnsinfocr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TRNSINFOCR");

                entity.Property(e => e.Branch)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Cargoactually)
                    .HasColumnType("DATE")
                    .HasColumnName("CARGOACTUALLY");

                entity.Property(e => e.Cargoexpected)
                    .HasColumnType("DATE")
                    .HasColumnName("CARGOEXPECTED");

                entity.Property(e => e.Cargopaper)
                    .HasPrecision(1)
                    .HasColumnName("CARGOPAPER");

                entity.Property(e => e.Commited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMMITED");

                entity.Property(e => e.FromDistCodename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROM_DIST_CODENAME");

                entity.Property(e => e.FromDistFormid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROM_DIST_FORMID");

                entity.Property(e => e.FromDistFormname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROM_DIST_FORMNAME");

                entity.Property(e => e.FromDistname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROM_DISTNAME");

                entity.Property(e => e.Fromcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FROMCODE");

                entity.Property(e => e.Fromcodeform)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMCODEFORM");

                entity.Property(e => e.Fromcodetype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMCODETYPE");

                entity.Property(e => e.Fromstoreallcodesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMSTOREALLCODESID");

                entity.Property(e => e.MainCostcenterid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAIN_COSTCENTERID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Portarrival)
                    .HasColumnType("DATE")
                    .HasColumnName("PORTARRIVAL");

                entity.Property(e => e.ReceiveDate)
                    .HasColumnType("DATE")
                    .HasColumnName("RECEIVE_DATE");

                entity.Property(e => e.Rem)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REM");

                entity.Property(e => e.Reservation)
                    .HasPrecision(1)
                    .HasColumnName("RESERVATION");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.Storedocnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREDOCNUM");

                entity.Property(e => e.ToDistCodename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TO_DIST_CODENAME");

                entity.Property(e => e.ToDistFormid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TO_DIST_FORMID");

                entity.Property(e => e.ToDistFormname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TO_DIST_FORMNAME");

                entity.Property(e => e.ToDistname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TO_DISTNAME");

                entity.Property(e => e.Tocode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOCODE");

                entity.Property(e => e.Tocodeform)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOCODEFORM");

                entity.Property(e => e.Tocodetype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOCODETYPE");

                entity.Property(e => e.Tostoreallcodesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOSTOREALLCODESID");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("TOTAL");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.TrnsDate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNS_DATE");

                entity.Property(e => e.TrnsName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRNS_NAME");

                entity.Property(e => e.TrnsNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO");

                entity.Property(e => e.Trnstype)
                    .HasPrecision(2)
                    .HasColumnName("TRNSTYPE");
            });

            modelBuilder.Entity<TtItem1234>(entity =>
            {
                entity.HasKey(e => e.Ser)
                    .HasName("SYS_C0019241");

                entity.ToTable("TT_ITEM_1234");

                entity.Property(e => e.Ser)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SER");

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_CODE");

                entity.Property(e => e.ItemDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_DESC");

                entity.Property(e => e.ItemDescE)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_DESC_E");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_ID");
            });

            modelBuilder.Entity<Tvpenalty1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TVPENALTY1");
            });

            modelBuilder.Entity<UniqueincheckHistoryEffect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UNIQUEINCHECK_HISTORY_EFFECT");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Distid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DISTID");

                entity.Property(e => e.Hafzamid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZAMID");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Other)
                    .HasColumnType("NUMBER")
                    .HasColumnName("OTHER");
            });

            modelBuilder.Entity<Unitinstalment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UNITINSTALMENTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Serialename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALENAME");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.Sumcontractrecived)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUMCONTRACTRECIVED");

                entity.Property(e => e.Suminstalments)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUMINSTALMENTS");

                entity.Property(e => e.Sumremaining)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUMREMAINING");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Totalvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALVALUE");

                entity.Property(e => e.Val)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("VAL");
            });

            modelBuilder.Entity<Unitstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UNITSTATUS");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Iscomposite)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ISCOMPOSITE");

                entity.Property(e => e.Status)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STATUS");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("USERS");

                entity.HasIndex(e => e.Usercode, "USERS_U01")
                    .IsUnique();

                entity.HasIndex(e => e.Username, "USERS_U02")
                    .IsUnique();

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("USERID");

                entity.Property(e => e.Active)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Createdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CREATEDATE")
                    .HasDefaultValueSql("sysdate");

                entity.Property(e => e.Positionapps)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POSITIONAPPS")
                    .IsFixedLength(true);

                entity.Property(e => e.Privilegeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRIVILEGEID");

                entity.Property(e => e.Projectno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PROJECTNO");

                entity.Property(e => e.Salt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALT");

                entity.Property(e => e.Uname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNAME");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERCODE");

                entity.Property(e => e.Userename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERENAME");

                entity.Property(e => e.UsergroupId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERGROUP_ID");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Userpassword)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERPASSWORD")
                    .HasDefaultValueSql("123");

                entity.HasOne(d => d.Usergroup)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.UsergroupId)
                    .HasConstraintName("USER_GROUPS_FK");
            });

            modelBuilder.Entity<Userapp>(entity =>
            {
                entity.ToTable("USERAPPS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AppId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("APP_ID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<Usercreatedreport>(entity =>
            {
                entity.ToTable("USERCREATEDREPORTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Reportaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORTANAME");

                entity.Property(e => e.Reportename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORTENAME");

                entity.Property(e => e.Reportfilepath)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REPORTFILEPATH");

                entity.Property(e => e.Userreportdatasourceid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERREPORTDATASOURCEID");
            });

            modelBuilder.Entity<Usercurrency>(entity =>
            {
                entity.ToTable("USERCURRENCIES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Defcurrency)
                    .HasPrecision(1)
                    .HasColumnName("DEFCURRENCY")
                    .HasDefaultValueSql("0\n");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Usercurrencies)
                    .HasForeignKey(d => d.Currencyid)
                    .HasConstraintName("USERCURRENCIES_R02");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Usercurrencies)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("USERCURRENCIES_R01");
            });

            modelBuilder.Entity<Usergroup>(entity =>
            {
                entity.ToTable("USERGROUP");

                entity.HasIndex(e => e.Groupcode, "USERGROUP_U01")
                    .IsUnique();

                entity.Property(e => e.UsergroupId)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("USERGROUP_ID");

                entity.Property(e => e.Active)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ACTIVE");

                entity.Property(e => e.Groupcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GROUPCODE");

                entity.Property(e => e.Groupename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GROUPENAME");

                entity.Property(e => e.Groupname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GROUPNAME");

                entity.Property(e => e.Note)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOTE");

                entity.Property(e => e.Pojectno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("POJECTNO");

                entity.Property(e => e.Privilegeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRIVILEGEID");
            });

            modelBuilder.Entity<Userinstitem>(entity =>
            {
                entity.ToTable("USERINSTITEM");

                entity.HasIndex(e => new { e.Userid, e.Institemid }, "USERINSTITEM_U01")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Userinstitems)
                    .HasForeignKey(d => d.Userid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("USERINSTITEM_FK01");
            });

            modelBuilder.Entity<Userperiod>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.Periodid })
                    .HasName("USERPERIOD_PK");

                entity.ToTable("USERPERIOD");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.Property(e => e.Periodid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIODID");

                entity.HasOne(d => d.Period)
                    .WithMany(p => p.Userperiods)
                    .HasForeignKey(d => d.Periodid)
                    .HasConstraintName("USERPERIOD_R02");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Userperiods)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("USERPERIOD_R01");
            });

            modelBuilder.Entity<Userreport>(entity =>
            {
                entity.ToTable("USERREPORTS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Periodtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PERIODTYPE");

                entity.Property(e => e.Reportid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REPORTID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Userreports)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("USERREPORTS_R01");
            });

            modelBuilder.Entity<Userreportdatasource>(entity =>
            {
                entity.ToTable("USERREPORTDATASOURCE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Tableardec)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TABLEARDEC");

                entity.Property(e => e.Tableendec)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TABLEENDEC");

                entity.Property(e => e.Tableviewname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TABLEVIEWNAME");
            });

            modelBuilder.Entity<Userreportdatasourceo>(entity =>
            {
                entity.ToTable("USERREPORTDATASOURCEO");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Columnardec)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("COLUMNARDEC");

                entity.Property(e => e.Columnendec)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("COLUMNENDEC");

                entity.Property(e => e.Columnname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COLUMNNAME");

                entity.Property(e => e.Userreportdatasourceid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERREPORTDATASOURCEID");

                entity.HasOne(d => d.Userreportdatasource)
                    .WithMany(p => p.Userreportdatasourceos)
                    .HasForeignKey(d => d.Userreportdatasourceid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("USERREPORTDATASOURCEO_R01");
            });

            modelBuilder.Entity<Userreportsmenue>(entity =>
            {
                entity.ToTable("USERREPORTSMENUE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Applicationid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("APPLICATIONID");

                entity.Property(e => e.Menuelevel)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MENUELEVEL");

                entity.Property(e => e.Menueparentid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MENUEPARENTID");

                entity.Property(e => e.Overrideaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDEANAME");

                entity.Property(e => e.Overrideename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDEENAME");

                entity.Property(e => e.Reportid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REPORTID");

                entity.Property(e => e.Status)
                    .HasColumnType("NUMBER(22,1)")
                    .HasColumnName("STATUS");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Userreportsmenues)
                    .HasForeignKey(d => d.Applicationid)
                    .HasConstraintName("USERREPORTSMENUE_R02");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.Userreportsmenues)
                    .HasForeignKey(d => d.Reportid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("USERREPORTSMENUE_R01");
            });

            modelBuilder.Entity<UsersRole>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.Userid })
                    .HasName("USERS_ROLES_PK");

                entity.ToTable("USERS_ROLES");

                entity.Property(e => e.RoleId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ROLE_ID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UsersRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("USERS_ROLES_R01");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UsersRoles)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("USERS_ROLES_R02");
            });

            modelBuilder.Entity<UsersStoreAllcode>(entity =>
            {
                entity.ToTable("USERS_STORE_ALLCODES");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MAIN_TYPES_ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.UserId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USER_ID");

                entity.HasOne(d => d.MainTypes)
                    .WithMany(p => p.UsersStoreAllcodes)
                    .HasForeignKey(d => d.MainTypesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("USERS_STORE_ALLCODES_R03");

                entity.HasOne(d => d.StoreAllcodes)
                    .WithMany(p => p.UsersStoreAllcodes)
                    .HasForeignKey(d => d.StoreAllcodesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("USERS_STORE_ALLCODES_R02");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UsersStoreAllcodes)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("USERS_STORE_ALLCODES_R01");
            });

            modelBuilder.Entity<Userstran>(entity =>
            {
                entity.ToTable("USERSTRANS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Transcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TRANSCODE");

                entity.Property(e => e.Transtype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TRANSTYPE");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Userstrans)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("USERSTRANS_R01");
            });

            modelBuilder.Entity<Usertransctrl>(entity =>
            {
                entity.ToTable("USERTRANSCTRLS");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Controlid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONTROLID");

                entity.Property(e => e.Usertransid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERTRANSID");

                entity.HasOne(d => d.Control)
                    .WithMany(p => p.Usertransctrls)
                    .HasForeignKey(d => d.Controlid)
                    .HasConstraintName("SYS_C0019898");

                entity.HasOne(d => d.Usertrans)
                    .WithMany(p => p.Usertransctrls)
                    .HasForeignKey(d => d.Usertransid)
                    .HasConstraintName("USERTRANSCTRLS_R01");
            });

            modelBuilder.Entity<VServicesInstitemReadingsrt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SERVICES_INSTITEM_READINGSRT");

                entity.Property(e => e.CustomerAname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CODE");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.InDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IN_DATE");

                entity.Property(e => e.MeterReading)
                    .HasColumnType("NUMBER")
                    .HasColumnName("METER_READING");

                entity.Property(e => e.Servicename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERVICENAME");

                entity.Property(e => e.ServicesInstitemId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICES_INSTITEM_ID");

                entity.Property(e => e.StageCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STAGE_CODE");

                entity.Property(e => e.StageName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAGE_NAME");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_CODE");
            });

            modelBuilder.Entity<VServicesdatesmonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SERVICESDATESMONTHLY");

                entity.Property(e => e.Aservname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASERVNAME");

                entity.Property(e => e.Benefits)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BENEFITS");

                entity.Property(e => e.CalculationDate)
                    .HasColumnType("DATE")
                    .HasColumnName("CALCULATION_DATE");

                entity.Property(e => e.CustomerAname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_ANAME");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_CODE");

                entity.Property(e => e.DepositMaintenanceDate)
                    .HasColumnType("DATE")
                    .HasColumnName("DEPOSIT_MAINTENANCE_DATE");

                entity.Property(e => e.Fvalforservice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVALFORSERVICE");

                entity.Property(e => e.HandoverDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE");

                entity.Property(e => e.InDate)
                    .HasColumnType("DATE")
                    .HasColumnName("IN_DATE");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("DATE")
                    .HasColumnName("ISSUE_DATE");

                entity.Property(e => e.LayoutName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYOUT_NAME");

                entity.Property(e => e.Servicevalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SERVICEVALUE");

                entity.Property(e => e.Stagename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAGENAME");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_CODE");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("UNIT_ID");
            });

            modelBuilder.Entity<VServicesinvoicesdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SERVICESINVOICESDETAILS");

                entity.Property(e => e.Amount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Aservname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASERVNAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Fval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FVAL");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Layout)
                    .HasColumnType("NUMBER")
                    .HasColumnName("LAYOUT");

                entity.Property(e => e.Servicesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SERVICESID");

                entity.Property(e => e.Stagename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STAGENAME");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");

                entity.Property(e => e.Trnsno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSNO");
            });

            modelBuilder.Entity<Vallinstpayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VALLINSTPAYMENT");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Description)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Edescription)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("EDESCRIPTION");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.Instid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTID");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedFixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_FIXEDCOST");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Trnsno)
                    .HasPrecision(15)
                    .HasColumnName("TRNSNO");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<Vcashfinancialtransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VCASHFINANCIALTRANSACTIONS");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Aname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME2");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Casheffect)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CASHEFFECT");

                entity.Property(e => e.Checkcredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDIT");

                entity.Property(e => e.Checkdebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBIT");

                entity.Property(e => e.Checknum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNUM");

                entity.Property(e => e.Code)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Creditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDITBAL");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Debitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBITBAL");

                entity.Property(e => e.Documentno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNO");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORMID");

                entity.Property(e => e.IsAccepted)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IS_ACCEPTED");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Purpose)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(282)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionno)
                    .HasPrecision(15)
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transfertoacc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFERTOACC");

                entity.Property(e => e.Transname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNAME");

                entity.Property(e => e.Trnid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNID");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");

                entity.Property(e => e.Typename2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME2");
            });

            modelBuilder.Entity<VcashfinancialtransactionsMod1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VCASHFINANCIALTRANSACTIONS_MOD");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Aname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME2");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Casheffect)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CASHEFFECT");

                entity.Property(e => e.Checkcredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDIT");

                entity.Property(e => e.Checkdebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBIT");

                entity.Property(e => e.Checknum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNUM");

                entity.Property(e => e.Code)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Creditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDITBAL");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Debitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBITBAL");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Documentno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNO");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORMID");

                entity.Property(e => e.IsAccepted)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IS_ACCEPTED");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Purpose)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(282)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionno)
                    .HasPrecision(15)
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transfertoacc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFERTOACC");

                entity.Property(e => e.Transname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNAME");

                entity.Property(e => e.Trnid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNID");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");

                entity.Property(e => e.Typename2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME2");
            });

            modelBuilder.Entity<Vcashfinancialtransactionsmod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VCASHFINANCIALTRANSACTIONSMOD");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Aname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME2");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Checkcredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDIT");

                entity.Property(e => e.Checkdebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBIT");

                entity.Property(e => e.Code)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Creditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDITBAL");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Debitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBITBAL");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Purpose)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(282)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionno)
                    .HasPrecision(15)
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNAME");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");

                entity.Property(e => e.Typename2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME2");
            });

            modelBuilder.Entity<Vcashfinancialtransactionsnew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VCASHFINANCIALTRANSACTIONSNEW");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Aname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME2");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Checkcredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDIT");

                entity.Property(e => e.Checkdebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBIT");

                entity.Property(e => e.Code)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Creditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDITBAL");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Debitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBITBAL");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Purpose)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(282)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionno)
                    .HasPrecision(15)
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNAME");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");

                entity.Property(e => e.Typename2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME2");
            });

            modelBuilder.Entity<Vcashinstpayment1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VCASHINSTPAYMENT1");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Description)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Edescription)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("EDESCRIPTION");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.Instid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTID");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Originaldesc)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ORIGINALDESC");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER(15,3)")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedFixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_FIXEDCOST");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Trnsnum)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TRNSNUM");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<Vcheckcountpermonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VCHECKCOUNTPERMONTH");

                entity.Property(e => e.Branch)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH");

                entity.Property(e => e.Checkcount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCOUNT");

                entity.Property(e => e.Checktype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKTYPE");

                entity.Property(e => e.Cmonth)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CMONTH");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Cyear)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CYEAR");

                entity.Property(e => e.Fromcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FROMCODE");

                entity.Property(e => e.Fromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMID");

                entity.Property(e => e.Fromtype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMTYPE");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL");
            });

            modelBuilder.Entity<Vcheckcredithistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VCHECKCREDITHISTORY");

                entity.Property(e => e.Aname1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME1");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Beneficiary)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BENEFICIARY");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Casheffect)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CASHEFFECT");

                entity.Property(e => e.Checkcredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDIT");

                entity.Property(e => e.Checkcreditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDITBAL");

                entity.Property(e => e.Checkdebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBIT");

                entity.Property(e => e.Checkdebitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBITBAL");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Code1)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE1");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Creditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDITBAL");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Debitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBITBAL");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Hafzano)
                    .HasPrecision(10)
                    .HasColumnName("HAFZANO");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.IsAccepted)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IS_ACCEPTED");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(612)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Statusid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STATUSID");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionno)
                    .HasPrecision(15)
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNAME");

                entity.Property(e => e.Trnid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNID");
            });

            modelBuilder.Entity<Vcheckcredithistory2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VCHECKCREDITHISTORY2");

                entity.Property(e => e.Aname1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME1");

                entity.Property(e => e.Aname2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME2");

                entity.Property(e => e.Checkcredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDIT");

                entity.Property(e => e.Checkcreditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDITBAL");

                entity.Property(e => e.Checkdebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBIT");

                entity.Property(e => e.Checkdebitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBITBAL");

                entity.Property(e => e.Code1)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE1");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Creditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDITBAL");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Debitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBITBAL");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(523)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Statusid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STATUSID");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionno)
                    .HasPrecision(10)
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNAME");

                entity.Property(e => e.TypeAname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPE_ANAME2");
            });

            modelBuilder.Entity<VcheckcredithistoryMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VCHECKCREDITHISTORY_MOD");

                entity.Property(e => e.Aname1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME1");

                entity.Property(e => e.Bankexpenses)
                    .HasColumnType("NUMBER(20,4)")
                    .HasColumnName("BANKEXPENSES");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Beneficiary)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BENEFICIARY");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Checkcredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDIT");

                entity.Property(e => e.Checkcreditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDITBAL");

                entity.Property(e => e.Checkdebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBIT");

                entity.Property(e => e.Checkdebitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBITBAL");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Code1)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE1");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Creditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDITBAL");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Debitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBITBAL");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Hafzano)
                    .HasPrecision(10)
                    .HasColumnName("HAFZANO");

                entity.Property(e => e.Hafzatype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("HAFZATYPE");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(522)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Statusid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STATUSID");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionno)
                    .HasPrecision(15)
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNAME");
            });

            modelBuilder.Entity<Vchecklistpersave>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VCHECKLISTPERSAVE");

                entity.Property(e => e.Amount)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Branch)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checktype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CHECKTYPE");

                entity.Property(e => e.Checktypeename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKTYPEENAME");

                entity.Property(e => e.Checktypename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKTYPENAME");

                entity.Property(e => e.Curpos)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURPOS");

                entity.Property(e => e.Curposcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CURPOSCODE");

                entity.Property(e => e.Curposform)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURPOSFORM");

                entity.Property(e => e.Curposid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURPOSID");

                entity.Property(e => e.Curpostype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURPOSTYPE");

                entity.Property(e => e.DEname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("dEname");

                entity.Property(e => e.Dname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DNAME");

                entity.Property(e => e.Dnameform)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DNAMEFORM");

                entity.Property(e => e.Dnameid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DNAMEID");

                entity.Property(e => e.Dnametype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DNAMETYPE");

                entity.Property(e => e.Documentno)
                    .HasPrecision(15)
                    .HasColumnName("DOCUMENTNO");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Ecurpos)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ECURPOS");

                entity.Property(e => e.Epurpose)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EPURPOSE");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ESTATUS");

                entity.Property(e => e.Fstamp)
                    .HasColumnType("DATE")
                    .HasColumnName("FSTAMP");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.Statusid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STATUSID");

                entity.Property(e => e.Trnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSCODE");
            });

            modelBuilder.Entity<Vcheckspermonthall>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VCHECKSPERMONTHALL");

                entity.Property(e => e.Allcount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLCOUNT");

                entity.Property(e => e.Alltotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ALLTOTAL");

                entity.Property(e => e.Branch)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH");

                entity.Property(e => e.Cmonth)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CMONTH");

                entity.Property(e => e.Count1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COUNT1");

                entity.Property(e => e.Count2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COUNT2");

                entity.Property(e => e.Count3)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COUNT3");

                entity.Property(e => e.Count4)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COUNT4");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Cyear)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CYEAR");

                entity.Property(e => e.Fromcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FROMCODE");

                entity.Property(e => e.Fromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMID");

                entity.Property(e => e.Fromtype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMTYPE");

                entity.Property(e => e.Total1)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL1");

                entity.Property(e => e.Total2)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL2");

                entity.Property(e => e.Total3)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL3");

                entity.Property(e => e.Total4)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL4");
            });

            modelBuilder.Entity<Vcodepartsfilter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VCODEPARTSFILTER");
            });

            modelBuilder.Entity<Vdependencyquantity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VDEPENDENCYQUANTITIES");

                entity.Property(e => e.Basicunitid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BASICUNITID");

                entity.Property(e => e.Cqty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CQTY");

                entity.Property(e => e.Cqtybasic)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CQTYBASIC");

                entity.Property(e => e.Crowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CROWID");

                entity.Property(e => e.Ctrnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CTRNSDATE");

                entity.Property(e => e.Ctrnsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CTRNSID");

                entity.Property(e => e.Cunitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUNITID");

                entity.Property(e => e.Depdetailsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DEPDETAILSID");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.Pqty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("PQTY");

                entity.Property(e => e.Pqtybasic)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PQTYBASIC");

                entity.Property(e => e.Prowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PROWID");

                entity.Property(e => e.Ptrnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("PTRNSDATE");

                entity.Property(e => e.Ptrnsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PTRNSID");

                entity.Property(e => e.Punitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PUNITID");
            });

            modelBuilder.Entity<Vdependencytotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VDEPENDENCYTOTAL");

                entity.Property(e => e.Basicunitid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BASICUNITID");

                entity.Property(e => e.Cqty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CQTY");

                entity.Property(e => e.Cqtybasic)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CQTYBASIC");

                entity.Property(e => e.Crowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CROWID");

                entity.Property(e => e.Ctrnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("CTRNSDATE");

                entity.Property(e => e.Ctrnsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CTRNSID");

                entity.Property(e => e.Cunitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CUNITID");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.Pqty)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("PQTY");

                entity.Property(e => e.Pqtybasic)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PQTYBASIC");

                entity.Property(e => e.Prowid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PROWID");

                entity.Property(e => e.Ptrnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("PTRNSDATE");

                entity.Property(e => e.Ptrnsid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PTRNSID");

                entity.Property(e => e.Punitid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PUNITID");

                entity.Property(e => e.Remaining)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REMAINING");
            });

            modelBuilder.Entity<Vfinancialtransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VFINANCIALTRANSACTIONS");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Aname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME2");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Checkcredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDIT");

                entity.Property(e => e.Checkdebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBIT");

                entity.Property(e => e.Code)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Creditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDITBAL");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(10,5)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Debitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBITBAL");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Purpose)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(282)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionno)
                    .HasPrecision(15)
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNAME");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");

                entity.Property(e => e.Typename2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME2");
            });

            modelBuilder.Entity<Vgetinstprogram>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VGETINSTPROGRAMS");

                entity.Property(e => e.Instcount)
                    .HasPrecision(3)
                    .HasColumnName("INSTCOUNT");

                entity.Property(e => e.Instid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTID");

                entity.Property(e => e.Instname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INSTNAME");

                entity.Property(e => e.Instpartname)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("INSTPARTNAME");

                entity.Property(e => e.Instpercent)
                    .HasColumnType("NUMBER(15,5)")
                    .HasColumnName("INSTPERCENT");

                entity.Property(e => e.Rank)
                    .HasPrecision(4)
                    .HasColumnName("RANK");
            });

            modelBuilder.Entity<ViewCheckrecieved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_CHECKRECIEVED");

                entity.Property(e => e.CD)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("C_D");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Duedate)
                    .HasColumnType("DATE")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Isrecieved)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISRECIEVED")
                    .IsFixedLength(true);

                entity.Property(e => e.Value)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<Viewalltrnsaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEWALLTRNSACTION");

                entity.Property(e => e.Analysisid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ANALYSISID");

                entity.Property(e => e.Aname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Branch)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.Code1)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE1");

                entity.Property(e => e.Code2)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE2");

                entity.Property(e => e.Commdtax)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("COMMDTAX");

                entity.Property(e => e.Commtax)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("COMMTAX");

                entity.Property(e => e.Confirmed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CONFIRMED");

                entity.Property(e => e.Credit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Credite)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREDITE");

                entity.Property(e => e.Currid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRID");

                entity.Property(e => e.Currnamear)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRNAMEAR");

                entity.Property(e => e.Currnameen)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRNAMEEN");

                entity.Property(e => e.Debit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Debite)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEBITE");

                entity.Property(e => e.Descfdist)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DESCFDIST");

                entity.Property(e => e.Descfdiste)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DESCFDISTE");

                entity.Property(e => e.Desctdist)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DESCTDIST");

                entity.Property(e => e.Desctdiste)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DESCTDISTE");

                entity.Property(e => e.Documentno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNO");

                entity.Property(e => e.Ename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENAME");

                entity.Property(e => e.Fdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FDISTID");

                entity.Property(e => e.Financespecename)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("FINANCESPECENAME");

                entity.Property(e => e.Financespecname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("FINANCESPECNAME");

                entity.Property(e => e.Financiername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FINANCIERNAME");

                entity.Property(e => e.Grossval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("GROSSVAL");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ID");

                entity.Property(e => e.Iscash)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISCASH");

                entity.Property(e => e.Isodata)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ISODATA");

                entity.Property(e => e.Netval)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("NETVAL");

                entity.Property(e => e.Othertax)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("OTHERTAX");

                entity.Property(e => e.Penaltytax)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("PENALTYTAX");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Printfdist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRINTFDIST");

                entity.Property(e => e.Printtdist)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRINTTDIST");

                entity.Property(e => e.Protectiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("PROTECTIONDATE");

                entity.Property(e => e.Purpose)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PURPOSE");

                entity.Property(e => e.Remark1)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("REMARK1");

                entity.Property(e => e.Repid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("REPID");

                entity.Property(e => e.Reportfooter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORTFOOTER");

                entity.Property(e => e.Reportheader)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORTHEADER");

                entity.Property(e => e.Salestax)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("SALESTAX");

                entity.Property(e => e.Shortname)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SHORTNAME");

                entity.Property(e => e.Showdeliverydata)
                    .HasPrecision(1)
                    .HasColumnName("SHOWDELIVERYDATA");

                entity.Property(e => e.Signature1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE1");

                entity.Property(e => e.Signature1name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE1NAME");

                entity.Property(e => e.Signature2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE2");

                entity.Property(e => e.Signature2name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE2NAME");

                entity.Property(e => e.Signature3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE3");

                entity.Property(e => e.Signature3name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIGNATURE3NAME");

                entity.Property(e => e.Storemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STOREMID");

                entity.Property(e => e.Tdistid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TDISTID");

                entity.Property(e => e.Trnscode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNSCODE");

                entity.Property(e => e.Trnsdate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRNSDATE");

                entity.Property(e => e.Trnsno)
                    .HasPrecision(15)
                    .HasColumnName("TRNSNO");

                entity.Property(e => e.Type1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPE1");

                entity.Property(e => e.Type1id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TYPE1ID");

                entity.Property(e => e.Type2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPE2");

                entity.Property(e => e.Type2e)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPE2E");

                entity.Property(e => e.Type2id)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TYPE2ID");

                entity.Property(e => e.Typee1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPEE1");
            });

            modelBuilder.Entity<Viewsaleforminstallment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEWSALEFORMINSTALLMENTS");
            });

            modelBuilder.Entity<Vinstcollectedcheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VINSTCOLLECTEDCHECKS");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Description)
                    .HasMaxLength(95)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Edescription)
                    .HasMaxLength(98)
                    .IsUnicode(false)
                    .HasColumnName("EDESCRIPTION");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.Instid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTID");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Originaldesc)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ORIGINALDESC");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedFixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_FIXEDCOST");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Trnsnum)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TRNSNUM");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<Vinvcodedetailsinformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VINVCODEDETAILSINFORMATION");

                entity.Property(e => e.Attribute)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ATTRIBUTE");

                entity.Property(e => e.Codetype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CODETYPE");

                entity.Property(e => e.Disttype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DISTTYPE");

                entity.Property(e => e.StoreAllcodesId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ALLCODES_ID");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.Value)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<Vinvtransactiondetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VINVTRANSACTIONDETAILS");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.Ccostprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CCOSTPRICE");

                entity.Property(e => e.Costcentercode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COSTCENTERCODE");

                entity.Property(e => e.Costcenterename)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("COSTCENTERENAME");

                entity.Property(e => e.Costcenterid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COSTCENTERID");

                entity.Property(e => e.Costcentername)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("COSTCENTERNAME");

                entity.Property(e => e.Cqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CQTY");

                entity.Property(e => e.Ctax)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAX");

                entity.Property(e => e.CtaxDisc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAX_DISC");

                entity.Property(e => e.CtaxDiscnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAX_DISCNOTCONV");

                entity.Property(e => e.Ctaxnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAXNOTCONV");

                entity.Property(e => e.Ctotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTOTAL");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYNAME");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Dcostprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DCOSTPRICE");

                entity.Property(e => e.Disc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISC");

                entity.Property(e => e.DiscValO)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISC_VAL_O");

                entity.Property(e => e.DiscValOnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISC_VAL_ONOTCONV");

                entity.Property(e => e.Discrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISCRATE");

                entity.Property(e => e.Docnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOCNUM");

                entity.Property(e => e.Dqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DQTY");

                entity.Property(e => e.Dtotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DTOTAL");

                entity.Property(e => e.Eunit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EUNIT");

                entity.Property(e => e.FgroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FGROUPF_ID");

                entity.Property(e => e.FromStoreAllcodesId1)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROM_STORE_ALLCODES_ID");

                entity.Property(e => e.Fromcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FROMCODE");

                entity.Property(e => e.Fromename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMENAME");

                entity.Property(e => e.Frometype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMETYPE");

                entity.Property(e => e.Fromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMID");

                entity.Property(e => e.Fromname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMNAME");

                entity.Property(e => e.Fromstoreallcodesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMSTOREALLCODESID");

                entity.Property(e => e.Fromtype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMTYPE");

                entity.Property(e => e.Grossvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSVALUE");

                entity.Property(e => e.Groupffromcodetype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPFFROMCODETYPE");

                entity.Property(e => e.Groupftocodetype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPFTOCODETYPE");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemeform)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMEFORM");

                entity.Property(e => e.Itemename)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEMENAME");

                entity.Property(e => e.Itemform)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMFORM");

                entity.Property(e => e.Itemform1)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMFORM_1");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.MainCostCenter)
                    .HasPrecision(1)
                    .HasColumnName("MAIN_COST_CENTER");

                entity.Property(e => e.Mdisc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MDISC");

                entity.Property(e => e.Mstax)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MSTAX");

                entity.Property(e => e.Needaccepted)
                    .HasPrecision(1)
                    .HasColumnName("NEEDACCEPTED");

                entity.Property(e => e.Netvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NETVALUE");

                entity.Property(e => e.Price)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICE");

                entity.Property(e => e.Pricecost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICECOST");

                entity.Property(e => e.Pricenotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICENOTCONV");

                entity.Property(e => e.Quantity)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Salesrep)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALESREP");

                entity.Property(e => e.SalesrepCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("SALESREP_CODE");

                entity.Property(e => e.Salesrepe)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALESREPE");

                entity.Property(e => e.Specid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SPECID");

                entity.Property(e => e.StaxValO)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAX_VAL_O");

                entity.Property(e => e.StaxValOnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAX_VAL_ONOTCONV");

                entity.Property(e => e.Stoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STOID");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.Tax)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TAX");

                entity.Property(e => e.TgroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TGROUPF_ID");

                entity.Property(e => e.TmtFromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TMT_FROMID");

                entity.Property(e => e.TmtToid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TMT_TOID");

                entity.Property(e => e.ToStoreAllcodesId1)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TO_STORE_ALLCODES_ID");

                entity.Property(e => e.Tocode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOCODE");

                entity.Property(e => e.Toename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOENAME");

                entity.Property(e => e.Toetype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOETYPE");

                entity.Property(e => e.Toid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOID");

                entity.Property(e => e.Toname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TONAME");

                entity.Property(e => e.Tostoreallcodesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOSTOREALLCODESID");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL");

                entity.Property(e => e.TotalItemBalance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_ITEM_BALANCE");

                entity.Property(e => e.Totalitemper)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALITEMPER");

                entity.Property(e => e.Totalitempernotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALITEMPERNOTCONV");

                entity.Property(e => e.Totype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOTYPE");

                entity.Property(e => e.Tperiod)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TPERIOD");

                entity.Property(e => e.Tpricecost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TPRICECOST");

                entity.Property(e => e.Tpricecostnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TPRICECOSTNOTCONV");

                entity.Property(e => e.Tpriceforcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TPRICEFORCOST");

                entity.Property(e => e.Transactioncode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRANSACTIONCODE");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionetype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTIONETYPE");

                entity.Property(e => e.Transactionno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transactiontype)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTIONTYPE");

                entity.Property(e => e.Treeaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TREEANAME");

                entity.Property(e => e.Treecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TREECODE");

                entity.Property(e => e.Treeename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TREEENAME");

                entity.Property(e => e.TrnsType)
                    .HasPrecision(2)
                    .HasColumnName("TRNS_TYPE");

                entity.Property(e => e.Trnscommited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSCOMMITED");

                entity.Property(e => e.Unit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNIT_ID");
            });

            modelBuilder.Entity<VinvtransactiondetailsMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VINVTRANSACTIONDETAILS_MOD");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.Ccostprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CCOSTPRICE");

                entity.Property(e => e.Costcentercode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COSTCENTERCODE");

                entity.Property(e => e.Costcenterename)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("COSTCENTERENAME");

                entity.Property(e => e.Costcenterid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COSTCENTERID");

                entity.Property(e => e.Costcentername)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("COSTCENTERNAME");

                entity.Property(e => e.Cqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CQTY");

                entity.Property(e => e.Ctax)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAX");

                entity.Property(e => e.CtaxDisc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAX_DISC");

                entity.Property(e => e.CtaxDiscnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAX_DISCNOTCONV");

                entity.Property(e => e.Ctaxnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAXNOTCONV");

                entity.Property(e => e.Ctotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTOTAL");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYNAME");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Dcostprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DCOSTPRICE");

                entity.Property(e => e.Disc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISC");

                entity.Property(e => e.DiscValO)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISC_VAL_O");

                entity.Property(e => e.DiscValOnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISC_VAL_ONOTCONV");

                entity.Property(e => e.Discrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISCRATE");

                entity.Property(e => e.Docnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOCNUM");

                entity.Property(e => e.Dqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DQTY");

                entity.Property(e => e.Dtotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DTOTAL");

                entity.Property(e => e.Eunit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EUNIT");

                entity.Property(e => e.FgroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FGROUPF_ID");

                entity.Property(e => e.Freeitem)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FREEITEM");

                entity.Property(e => e.FromStoreAllcodesId1)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROM_STORE_ALLCODES_ID");

                entity.Property(e => e.Fromcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FROMCODE");

                entity.Property(e => e.Fromename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMENAME");

                entity.Property(e => e.Frometype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMETYPE");

                entity.Property(e => e.Fromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMID");

                entity.Property(e => e.Fromname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMNAME");

                entity.Property(e => e.Fromstoreallcodesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMSTOREALLCODESID");

                entity.Property(e => e.Fromtype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMTYPE");

                entity.Property(e => e.Grossvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSVALUE");

                entity.Property(e => e.Groupffromcodetype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPFFROMCODETYPE");

                entity.Property(e => e.Groupftocodetype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPFTOCODETYPE");

                entity.Property(e => e.Hasitemtax)
                    .HasPrecision(1)
                    .HasColumnName("HASITEMTAX");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemeform)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMEFORM");

                entity.Property(e => e.Itemename)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEMENAME");

                entity.Property(e => e.Itemform)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMFORM");

                entity.Property(e => e.Itemform1)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMFORM_1");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.ItemtaxVal)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ITEMTAX_VAL");

                entity.Property(e => e.MainCostCenter)
                    .HasPrecision(1)
                    .HasColumnName("MAIN_COST_CENTER");

                entity.Property(e => e.Mdisc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MDISC");

                entity.Property(e => e.Mstax)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MSTAX");

                entity.Property(e => e.Needaccepted)
                    .HasPrecision(1)
                    .HasColumnName("NEEDACCEPTED");

                entity.Property(e => e.Netvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NETVALUE");

                entity.Property(e => e.Price)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICE");

                entity.Property(e => e.Pricecost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICECOST");

                entity.Property(e => e.Pricenotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICENOTCONV");

                entity.Property(e => e.Quantity)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Salesrep)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALESREP");

                entity.Property(e => e.SalesrepCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("SALESREP_CODE");

                entity.Property(e => e.Salesrepe)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALESREPE");

                entity.Property(e => e.Specid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SPECID");

                entity.Property(e => e.StaxValO)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAX_VAL_O");

                entity.Property(e => e.StaxValOnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAX_VAL_ONOTCONV");

                entity.Property(e => e.Stoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STOID");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.Tax)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TAX");

                entity.Property(e => e.TgroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TGROUPF_ID");

                entity.Property(e => e.TmtFromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TMT_FROMID");

                entity.Property(e => e.TmtToid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TMT_TOID");

                entity.Property(e => e.ToStoreAllcodesId1)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TO_STORE_ALLCODES_ID");

                entity.Property(e => e.Tocode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOCODE");

                entity.Property(e => e.Toename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOENAME");

                entity.Property(e => e.Toetype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOETYPE");

                entity.Property(e => e.Toid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOID");

                entity.Property(e => e.Toname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TONAME");

                entity.Property(e => e.Tostoreallcodesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOSTOREALLCODESID");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL");

                entity.Property(e => e.TotalItemBalance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_ITEM_BALANCE");

                entity.Property(e => e.Totalitemper)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALITEMPER");

                entity.Property(e => e.Totalitempernotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALITEMPERNOTCONV");

                entity.Property(e => e.Totype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOTYPE");

                entity.Property(e => e.Tperiod)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TPERIOD");

                entity.Property(e => e.Tpricecost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TPRICECOST");

                entity.Property(e => e.Tpricecostnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TPRICECOSTNOTCONV");

                entity.Property(e => e.Tpriceforcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TPRICEFORCOST");

                entity.Property(e => e.Transactioncode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRANSACTIONCODE");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionetype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTIONETYPE");

                entity.Property(e => e.Transactionno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transactiontype)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTIONTYPE");

                entity.Property(e => e.Treeaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TREEANAME");

                entity.Property(e => e.Treecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TREECODE");

                entity.Property(e => e.Treeename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TREEENAME");

                entity.Property(e => e.TrnsType)
                    .HasPrecision(2)
                    .HasColumnName("TRNS_TYPE");

                entity.Property(e => e.Trnscommited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSCOMMITED");

                entity.Property(e => e.Unit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNIT_ID");
            });

            modelBuilder.Entity<VinvtransactiondetailsMod2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VINVTRANSACTIONDETAILS_MOD2");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.Ccostprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CCOSTPRICE");

                entity.Property(e => e.Costcentercode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COSTCENTERCODE");

                entity.Property(e => e.Costcenterename)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("COSTCENTERENAME");

                entity.Property(e => e.Costcenterid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COSTCENTERID");

                entity.Property(e => e.Costcentername)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("COSTCENTERNAME");

                entity.Property(e => e.Cqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CQTY");

                entity.Property(e => e.Ctax)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAX");

                entity.Property(e => e.CtaxDisc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAX_DISC");

                entity.Property(e => e.CtaxDiscnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAX_DISCNOTCONV");

                entity.Property(e => e.Ctaxnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTAXNOTCONV");

                entity.Property(e => e.Ctotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CTOTAL");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYNAME");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Dcostprice)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DCOSTPRICE");

                entity.Property(e => e.Disc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISC");

                entity.Property(e => e.DiscValO)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISC_VAL_O");

                entity.Property(e => e.DiscValOnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISC_VAL_ONOTCONV");

                entity.Property(e => e.Discrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DISCRATE");

                entity.Property(e => e.Docnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOCNUM");

                entity.Property(e => e.Dqty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DQTY");

                entity.Property(e => e.Dtotal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DTOTAL");

                entity.Property(e => e.Eunit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EUNIT");

                entity.Property(e => e.FgroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FGROUPF_ID");

                entity.Property(e => e.Freeitem)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FREEITEM");

                entity.Property(e => e.FromStoreAllcodesId1)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROM_STORE_ALLCODES_ID");

                entity.Property(e => e.Fromcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FROMCODE");

                entity.Property(e => e.Fromename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMENAME");

                entity.Property(e => e.Frometype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMETYPE");

                entity.Property(e => e.Fromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMID");

                entity.Property(e => e.Fromname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMNAME");

                entity.Property(e => e.Fromstoreallcodesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FROMSTOREALLCODESID");

                entity.Property(e => e.Fromtype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMTYPE");

                entity.Property(e => e.Grossvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSVALUE");

                entity.Property(e => e.Groupffromcodetype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPFFROMCODETYPE");

                entity.Property(e => e.Groupftocodetype)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("GROUPFTOCODETYPE");

                entity.Property(e => e.Hasitemtax)
                    .HasPrecision(1)
                    .HasColumnName("HASITEMTAX");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemeform)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMEFORM");

                entity.Property(e => e.Itemename)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEMENAME");

                entity.Property(e => e.Itemform)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMFORM");

                entity.Property(e => e.Itemform1)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMFORM_1");

                entity.Property(e => e.Itemid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ITEMID");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.ItemtaxVal)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("ITEMTAX_VAL");

                entity.Property(e => e.MainCostCenter)
                    .HasPrecision(1)
                    .HasColumnName("MAIN_COST_CENTER");

                entity.Property(e => e.Mdisc)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MDISC");

                entity.Property(e => e.Mstax)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MSTAX");

                entity.Property(e => e.Needaccepted)
                    .HasPrecision(1)
                    .HasColumnName("NEEDACCEPTED");

                entity.Property(e => e.Netvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NETVALUE");

                entity.Property(e => e.Price)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICE");

                entity.Property(e => e.Pricecost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICECOST");

                entity.Property(e => e.Pricenotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PRICENOTCONV");

                entity.Property(e => e.Quantity)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Salesrep)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALESREP");

                entity.Property(e => e.SalesrepCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("SALESREP_CODE");

                entity.Property(e => e.Salesrepe)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALESREPE");

                entity.Property(e => e.Specid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("SPECID");

                entity.Property(e => e.StaxValO)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAX_VAL_O");

                entity.Property(e => e.StaxValOnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAX_VAL_ONOTCONV");

                entity.Property(e => e.Stoid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STOID");

                entity.Property(e => e.StoreTrnsMId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_TRNS_M_ID");

                entity.Property(e => e.Tax)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TAX");

                entity.Property(e => e.TgroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TGROUPF_ID");

                entity.Property(e => e.TmtFromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TMT_FROMID");

                entity.Property(e => e.TmtToid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TMT_TOID");

                entity.Property(e => e.ToStoreAllcodesId1)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TO_STORE_ALLCODES_ID");

                entity.Property(e => e.Tocode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOCODE");

                entity.Property(e => e.Toename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOENAME");

                entity.Property(e => e.Toetype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOETYPE");

                entity.Property(e => e.Toid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOID");

                entity.Property(e => e.Toname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TONAME");

                entity.Property(e => e.Tostoreallcodesid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TOSTOREALLCODESID");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL");

                entity.Property(e => e.TotalItemBalance)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTAL_ITEM_BALANCE");

                entity.Property(e => e.Totalitemper)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALITEMPER");

                entity.Property(e => e.Totalitempernotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALITEMPERNOTCONV");

                entity.Property(e => e.Totype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOTYPE");

                entity.Property(e => e.Tperiod)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TPERIOD");

                entity.Property(e => e.Tpricecost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TPRICECOST");

                entity.Property(e => e.Tpricecostnotconv)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TPRICECOSTNOTCONV");

                entity.Property(e => e.Tpriceforcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TPRICEFORCOST");

                entity.Property(e => e.Transactioncode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRANSACTIONCODE");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionetype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTIONETYPE");

                entity.Property(e => e.Transactionno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transactiontype)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTIONTYPE");

                entity.Property(e => e.Treeaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TREEANAME");

                entity.Property(e => e.Treecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TREECODE");

                entity.Property(e => e.Treeename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TREEENAME");

                entity.Property(e => e.TrnsType)
                    .HasPrecision(2)
                    .HasColumnName("TRNS_TYPE");

                entity.Property(e => e.Trnscommited)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSCOMMITED");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.UnitId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("UNIT_ID");
            });

            modelBuilder.Entity<Vinvtransactionlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VINVTRANSACTIONLIST");

                entity.Property(e => e.BranchId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH_ID");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHENAME");

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYNAME");

                entity.Property(e => e.Docnum)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOCNUM");

                entity.Property(e => e.FgroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FGROUPF_ID");

                entity.Property(e => e.Fromcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FROMCODE");

                entity.Property(e => e.Fromename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMENAME");

                entity.Property(e => e.Frometype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMETYPE");

                entity.Property(e => e.Fromname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMNAME");

                entity.Property(e => e.Fromtype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FROMTYPE");

                entity.Property(e => e.Grossvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("GROSSVALUE");

                entity.Property(e => e.Netvalue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NETVALUE");

                entity.Property(e => e.Salesrep)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALESREP");

                entity.Property(e => e.SalesrepCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("SALESREP_CODE");

                entity.Property(e => e.TgroupfId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TGROUPF_ID");

                entity.Property(e => e.TmtFromid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TMT_FROMID");

                entity.Property(e => e.TmtToid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TMT_TOID");

                entity.Property(e => e.Tocode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOCODE");

                entity.Property(e => e.Toename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOENAME");

                entity.Property(e => e.Toetype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOETYPE");

                entity.Property(e => e.Toname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TONAME");

                entity.Property(e => e.Totalquantity)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALQUANTITY");

                entity.Property(e => e.Totype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOTYPE");

                entity.Property(e => e.Transactioncode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRANSACTIONCODE");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionetype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTIONETYPE");

                entity.Property(e => e.Transactionno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transactiontype)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTIONTYPE");
            });

            modelBuilder.Entity<Vpenalty1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VPENALTY1");

                entity.Property(e => e.Cratio)
                    .HasColumnType("NUMBER(9,5)")
                    .HasColumnName("CRATIO");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Fixedcost)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("FIXEDCOST");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Freeperiod)
                    .HasPrecision(4)
                    .HasColumnName("FREEPERIOD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Mincharge)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("MINCHARGE");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.PayedUptoDate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_UPTO_DATE");

                entity.Property(e => e.Periodtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PERIODTYPE");

                entity.Property(e => e.Rank)
                    .HasPrecision(2)
                    .HasColumnName("RANK");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Serialename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALENAME");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.Subserial)
                    .HasPrecision(4)
                    .HasColumnName("SUBSERIAL");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");
            });

            modelBuilder.Entity<VpenaltyDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VPENALTY_DETAILS");

                entity.Property(e => e.Cratio)
                    .HasColumnType("NUMBER(9,5)")
                    .HasColumnName("CRATIO");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Fixedcost)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("FIXEDCOST");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Freeperiod)
                    .HasPrecision(4)
                    .HasColumnName("FREEPERIOD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Mincharge)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("MINCHARGE");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.Periodtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PERIODTYPE");

                entity.Property(e => e.Rank)
                    .HasPrecision(2)
                    .HasColumnName("RANK");

                entity.Property(e => e.Rest)
                    .HasColumnType("NUMBER")
                    .HasColumnName("REST");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Serialename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALENAME");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.Subserial)
                    .HasPrecision(4)
                    .HasColumnName("SUBSERIAL");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<VpenaltyEid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VPENALTY_EID");
            });

            modelBuilder.Entity<VpenaltyIndate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VPENALTY_INDATE");

                entity.Property(e => e.Cratio)
                    .HasColumnType("NUMBER(9,5)")
                    .HasColumnName("CRATIO");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Fixedcost)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("FIXEDCOST");

                entity.Property(e => e.Freeperiod)
                    .HasPrecision(4)
                    .HasColumnName("FREEPERIOD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Mincharge)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("MINCHARGE");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.Periodtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PERIODTYPE");

                entity.Property(e => e.Rank)
                    .HasPrecision(2)
                    .HasColumnName("RANK");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Serialename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALENAME");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.Subserial)
                    .HasPrecision(4)
                    .HasColumnName("SUBSERIAL");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<VpenaltyIndateFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VPENALTY_INDATE_FINAL");

                entity.Property(e => e.Cratio)
                    .HasColumnType("NUMBER(9,5)")
                    .HasColumnName("CRATIO");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Fixedcost)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("FIXEDCOST");

                entity.Property(e => e.Freeperiod)
                    .HasPrecision(4)
                    .HasColumnName("FREEPERIOD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTENAME");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Mincharge)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("MINCHARGE");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.PenaltyDue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY_DUE");

                entity.Property(e => e.Periodtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PERIODTYPE");

                entity.Property(e => e.Rank)
                    .HasPrecision(2)
                    .HasColumnName("RANK");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Serialename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALENAME");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.Subserial)
                    .HasPrecision(4)
                    .HasColumnName("SUBSERIAL");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<VpenaltyIndateFinalIndate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VPENALTY_INDATE_FINAL_INDATE");

                entity.Property(e => e.Cratio)
                    .HasColumnType("NUMBER(9,5)")
                    .HasColumnName("CRATIO");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Fixedcost)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("FIXEDCOST");

                entity.Property(e => e.Freeperiod)
                    .HasPrecision(4)
                    .HasColumnName("FREEPERIOD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Instalmentname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTALMENTNAME");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Mincharge)
                    .HasColumnType("NUMBER(8,3)")
                    .HasColumnName("MINCHARGE");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.PenaltyDue)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY_DUE");

                entity.Property(e => e.Periodtype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PERIODTYPE");

                entity.Property(e => e.Rank)
                    .HasPrecision(2)
                    .HasColumnName("RANK");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Serialname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERIALNAME");

                entity.Property(e => e.Subserial)
                    .HasPrecision(4)
                    .HasColumnName("SUBSERIAL");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Tableid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TABLEID");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<Vsaleforminstalments1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VSALEFORMINSTALMENTS1");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Description)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Earlydiscount)
                    .HasColumnType("NUMBER")
                    .HasColumnName("EARLYDISCOUNT");

                entity.Property(e => e.Edescription)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("EDESCRIPTION");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Indate)
                    .HasColumnType("DATE")
                    .HasColumnName("INDATE");

                entity.Property(e => e.InstIndate)
                    .HasColumnType("DATE")
                    .HasColumnName("INST_INDATE");

                entity.Property(e => e.Instid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTID");

                entity.Property(e => e.Instval)
                    .HasColumnType("NUMBER(13,3)")
                    .HasColumnName("INSTVAL");

                entity.Property(e => e.Overallserial)
                    .HasPrecision(5)
                    .HasColumnName("OVERALLSERIAL");

                entity.Property(e => e.Payed)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED");

                entity.Property(e => e.PayedFixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_FIXEDCOST");

                entity.Property(e => e.PayedPenalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PAYED_PENALTY");

                entity.Property(e => e.Penalty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PENALTY");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");

                entity.Property(e => e.Tableflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TABLEFLAG");

                entity.Property(e => e.Trnsno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNSNO");

                entity.Property(e => e.Vfixedcost)
                    .HasColumnType("NUMBER")
                    .HasColumnName("VFIXEDCOST");
            });

            modelBuilder.Entity<Vstoretransactionsdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VSTORETRANSACTIONSDETAILS");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Aname2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME2");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.Code)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Creditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDITBAL");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(22,9)")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Debitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBITBAL");

                entity.Property(e => e.DocNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DOC_NO");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORMID");

                entity.Property(e => e.IsAccepted)
                    .HasColumnType("NUMBER")
                    .HasColumnName("IS_ACCEPTED");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Period)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(601)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("STORE_ID");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Transname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNAME");

                entity.Property(e => e.TrnsId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_ID");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");

                entity.Property(e => e.Typename2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME2");
            });

            modelBuilder.Entity<Vtransactionhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VTRANSACTIONHISTORY");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Cd)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CD");

                entity.Property(e => e.Checkcredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDIT");

                entity.Property(e => e.Checkdebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBIT");

                entity.Property(e => e.Code)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Distid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DISTID");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(601)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSACTIONNO");
            });

            modelBuilder.Entity<VtransactionhistoryMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VTRANSACTIONHISTORY_MOD");

                entity.Property(e => e.Aname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANAME");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Cd)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CD");

                entity.Property(e => e.Checkcredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDIT");

                entity.Property(e => e.Checkdebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBIT");

                entity.Property(e => e.Code)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME");

                entity.Property(e => e.Currencyid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("CURRENCYID");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Distid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("DISTID");

                entity.Property(e => e.Formid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("FORMID");

                entity.Property(e => e.Maintypeid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("MAINTYPEID");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(601)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSACTIONNO");
            });

            modelBuilder.Entity<Vtransactionquantity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VTRANSACTIONQUANTITY");

                entity.Property(e => e.Branch)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("BRANCH");

                entity.Property(e => e.Qty)
                    .HasColumnType("NUMBER")
                    .HasColumnName("QTY");

                entity.Property(e => e.TrnsCode)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("TRNS_CODE");

                entity.Property(e => e.TrnsNo)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRNS_NO");
            });

            modelBuilder.Entity<Xtempdimension>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("XTEMPDIMENSION");

                entity.Property(e => e.Accountcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNTCODE");

                entity.Property(e => e.Accountname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNTNAME");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.Curencyname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CURENCYNAME");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CURRENCYRATE");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Dimensiondetailsid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DIMENSIONDETAILSID");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DOCNUMBER");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("DATE")
                    .HasColumnName("ENTRYDATE");

                entity.Property(e => e.Entrydesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENTRYDESC");

                entity.Property(e => e.Entydesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENTYDESC");

                entity.Property(e => e.Entynumber)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENTYNUMBER");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Id)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Journalcodeename)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("JOURNALCODEENAME");

                entity.Property(e => e.Journalcodename)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("JOURNALCODENAME");

                entity.Property(e => e.Naturalid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("NATURALID");

                entity.Property(e => e.Totalcreditbefore)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALCREDITBEFORE");

                entity.Property(e => e.Totaldebitbefore)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TOTALDEBITBEFORE");
            });

            modelBuilder.Entity<Xtempindividualtable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("XTEMPINDIVIDUALTABLE");

                entity.Property(e => e.Branchcodev)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODEV");

                entity.Property(e => e.Branchid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("BRANCHID");

                entity.Property(e => e.Checkcredit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Checkcreditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKCREDITBAL");

                entity.Property(e => e.Checkdebit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Checkdebitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKDEBITBAL");

                entity.Property(e => e.Checkid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKID");

                entity.Property(e => e.Checkundercollection)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CHECKUNDERCOLLECTION");

                entity.Property(e => e.Credit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Creditbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDITBAL");

                entity.Property(e => e.Creditwithrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("CREDITWITHRATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Currencyaname)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYANAME")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Currencyename)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYENAME")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Currencyid)
                    .HasPrecision(1)
                    .HasColumnName("CURRENCYID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Currencyrate)
                    .HasColumnType("NUMBER(15,4)")
                    .HasColumnName("CURRENCYRATE")
                    .HasDefaultValueSql("1\n");

                entity.Property(e => e.Debit)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Debitbal)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBITBAL");

                entity.Property(e => e.Debitwithrate)
                    .HasColumnType("NUMBER")
                    .HasColumnName("DEBITWITHRATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Id)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.IsPre)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_PRE");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.StoreId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STORE_ID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("DATE")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transactionno)
                    .HasColumnType("NUMBER")
                    .HasColumnName("TRANSACTIONNO");

                entity.Property(e => e.Xchecknum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("XCHECKNUM");

                entity.Property(e => e.Xtransfertoacc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("XTRANSFERTOACC");
            });

            modelBuilder.Entity<Xxxx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXXX");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");
            });

            modelBuilder.Entity<Xxxx1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXXX1");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Flag)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FLAG");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");
            });

            modelBuilder.Entity<Xxyy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XXYY");

                entity.Property(e => e.Attachmentsvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTSVALUE1");

                entity.Property(e => e.Attachmentsvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("ATTACHMENTSVALUE2");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Featuresvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATURESVALUE1");

                entity.Property(e => e.Featuresvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("FEATURESVALUE2");

                entity.Property(e => e.HandoverDateActualDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_ACTUAL_DATE");

                entity.Property(e => e.HandoverDateExpectedDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_EXPECTED_DATE");

                entity.Property(e => e.HandoverDateInDate)
                    .HasColumnType("DATE")
                    .HasColumnName("HANDOVER_DATE_IN_DATE");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.InstitemMainTypesId)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEM_MAIN_TYPES_ID");

                entity.Property(e => e.Institemcode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INSTITEMCODE");

                entity.Property(e => e.Institemvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("INSTITEMVALUE1");

                entity.Property(e => e.Mandatorycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORYCODE");

                entity.Property(e => e.Mandatoryid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANDATORYID");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.Quantity2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY2");

                entity.Property(e => e.Quantity3)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("QUANTITY3");

                entity.Property(e => e.Rentval)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("RENTVAL");

                entity.Property(e => e.Rentvalperiod)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RENTVALPERIOD");

                entity.Property(e => e.Servicesvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE1");

                entity.Property(e => e.Servicesvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("SERVICESVALUE2");

                entity.Property(e => e.Totalvalue1)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE1");

                entity.Property(e => e.Totalvalue2)
                    .HasColumnType("NUMBER(18,4)")
                    .HasColumnName("TOTALVALUE2");

                entity.Property(e => e.Unitval1)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL1");

                entity.Property(e => e.Unitval2)
                    .HasColumnType("NUMBER(25,7)")
                    .HasColumnName("UNITVAL2");

                entity.Property(e => e.Unitval3)
                    .HasColumnType("NUMBER(25,2)")
                    .HasColumnName("UNITVAL3");
            });

            modelBuilder.Entity<Yyyy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("YYYY");

                entity.Property(e => e.Compositeid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("COMPOSITEID");

                entity.Property(e => e.Dd)
                    .HasColumnType("DATE")
                    .HasColumnName("DD");

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ID");

                entity.Property(e => e.Iscomposite)
                    .HasColumnType("NUMBER")
                    .HasColumnName("ISCOMPOSITE");

                entity.Property(e => e.Status)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STATUS");
            });

            modelBuilder.Entity<Zeft33>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ZEFT33");

                entity.Property(e => e.Formstatustypes)
                    .HasColumnType("NUMBER")
                    .HasColumnName("FORMSTATUSTYPES");

                entity.Property(e => e.Institemid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("INSTITEMID");

                entity.Property(e => e.Rentformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("RENTFORMID");

                entity.Property(e => e.Saleformid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SALEFORMID");
            });

            modelBuilder.Entity<staff>(entity =>
            {
                entity.ToTable("STAFF");

                entity.HasIndex(e => e.Personid, "STAFF1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Managerid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("MANAGERID");

                entity.Property(e => e.Personid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("PERSONID");

                entity.Property(e => e.Staffclassid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFFCLASSID");

                entity.Property(e => e.Stafflevelid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("STAFFLEVELID");

                entity.Property(e => e.Subclassid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUBCLASSID");

                entity.Property(e => e.Supervisorid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("SUPERVISORID");

                entity.Property(e => e.Userid)
                    .HasColumnType("NUMBER")
                    .HasColumnName("USERID");

                entity.HasOne(d => d.Person)
                    .WithOne(p => p.staff)
                    .HasForeignKey<staff>(d => d.Personid)
                    .HasConstraintName("STAFF_FK1");

                entity.HasOne(d => d.Staffclass)
                    .WithMany(p => p.staff)
                    .HasForeignKey(d => d.Staffclassid)
                    .HasConstraintName("STAFF_FK2");

                entity.HasOne(d => d.Stafflevel)
                    .WithMany(p => p.staff)
                    .HasForeignKey(d => d.Stafflevelid)
                    .HasConstraintName("STAFF_FK5");

                entity.HasOne(d => d.Subclass)
                    .WithMany(p => p.staff)
                    .HasForeignKey(d => d.Subclassid)
                    .HasConstraintName("STAFF_FK3");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.staff)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("STAFF_FK6");
            });

            modelBuilder.HasSequence("ACCEPT_IN_FINANCETRNS_SEQ");

            modelBuilder.HasSequence("ACCEPT_IN_TRNS_SEQ");

            modelBuilder.HasSequence("ACCEPT_INSALEFORM_SEQ");

            modelBuilder.HasSequence("ACCLEVELS_SEQ");

            modelBuilder.HasSequence("ACCOUNTSTREE_SEQ");

            modelBuilder.HasSequence("AGRIAGE_SEQ");

            modelBuilder.HasSequence("AGRIDATA_SEQ");

            modelBuilder.HasSequence("AGRIFARM_SEQ");

            modelBuilder.HasSequence("AGRIPROCESS_SEQ");

            modelBuilder.HasSequence("ALTERINSTALMENTSETTING_SEQ");

            modelBuilder.HasSequence("ASSETS_SEQ");

            modelBuilder.HasSequence("ASSETSGROUP_SEQ");

            modelBuilder.HasSequence("ASSETSLEVELS_SEQ");

            modelBuilder.HasSequence("ASSETSTRANSCATIONS_SEQ");

            modelBuilder.HasSequence("ATTACHMENTFEATURES_SEQ");

            modelBuilder.HasSequence("ATTACHMENTSERVICES_SEQ");

            modelBuilder.HasSequence("ATTACHMENTTYPES_SEQ");

            modelBuilder.HasSequence("AUDITLOGNEW_SEQ");

            modelBuilder.HasSequence("BANKINGFACILITIES_SEQ");

            modelBuilder.HasSequence("BANKSYSTEMSSPEC_SEQ");

            modelBuilder.HasSequence("BARCODESEED_SEQ");

            modelBuilder.HasSequence("BOATPORT_SEQ");

            modelBuilder.HasSequence("BRANCHDIRECTORS_SEQ");

            modelBuilder.HasSequence("BRANCHES_SEQ");

            modelBuilder.HasSequence("BUSINESSTYPE_SPECS_SEQ");

            modelBuilder.HasSequence("CANCELLATIONORWAIVERTRNS_SEQ");

            modelBuilder.HasSequence("CHECKBOOK_SEQ");

            modelBuilder.HasSequence("CHECKBOOKDETAILS_SEQ");

            modelBuilder.HasSequence("CHECKRECIEVED_SEQ");

            modelBuilder.HasSequence("CHECKS_SEQ");

            modelBuilder.HasSequence("CMINSTITEMATTATCHFEATURES_SEQ");

            modelBuilder.HasSequence("CMINSTITEMATTATCHMENTS_SEQ");

            modelBuilder.HasSequence("CMINSTITEMATTATCHSERV_SEQ");

            modelBuilder.HasSequence("CMINSTITEMBUILDINGLAYER_SEQ");

            modelBuilder.HasSequence("CMINSTITEMFEATURES_SEQ");

            modelBuilder.HasSequence("CMINSTITEMLAYOUTDETAILS_SEQ");

            modelBuilder.HasSequence("CMINSTITEMLAYOUTLAYER_SEQ");

            modelBuilder.HasSequence("CMINSTITEMPROPERTIES_SEQ");

            modelBuilder.HasSequence("CMINSTITEMSERVICES_SEQ");

            modelBuilder.HasSequence("CMINSTITEMTEMPLETE_SEQ");

            modelBuilder.HasSequence("CMINSTITEMTEMPLETEDESIGN_SEQ");

            modelBuilder.HasSequence("CODECHANGE_SEC");

            modelBuilder.HasSequence("CODELINKPARTDETAIL_SEQ");

            modelBuilder.HasSequence("CODELINKSERVACCS_SEQ");

            modelBuilder.HasSequence("CODESLINK_SEQ");

            modelBuilder.HasSequence("CODESLINKDETAILS_SEQ");

            modelBuilder.HasSequence("CODESLINKITEMDETAILS_SEQ");

            modelBuilder.HasSequence("COMMITTEE_SEQ");

            modelBuilder.HasSequence("COMMITTEEDETAIL_SEQ");

            modelBuilder.HasSequence("COMMON_LAST_SEQ");

            modelBuilder.HasSequence("COMMON_TYPES_SEQ");

            modelBuilder.HasSequence("COMMON_TYPESDATA_SEQ");

            modelBuilder.HasSequence("COMPANYINFORMATION_SEQ");

            modelBuilder.HasSequence("COMPANYRESPONSABLE_SEQ");

            modelBuilder.HasSequence("COMPOSITEINSTITEM_SEQ");

            modelBuilder.HasSequence("CONDITIONSBOOKLET_SEQ");

            modelBuilder.HasSequence("CONVLEGALAFFAIR_SEQ");

            modelBuilder.HasSequence("COST_DISTRIBUTION_M_SEC");

            modelBuilder.HasSequence("COST_DISTRIBUTION_O_SEC");

            modelBuilder.HasSequence("COSTCALCULATIONSEQ");

            modelBuilder.HasSequence("CURRENCYDIFF_SEQ");

            modelBuilder.HasSequence("CURRENCYM_SEQ");

            modelBuilder.HasSequence("CURRENCYO_SEQ");

            modelBuilder.HasSequence("CUSTOMER_DIMENSIONSDETAILS_SEQ");

            modelBuilder.HasSequence("DB_UPDATE_SEQ");

            modelBuilder.HasSequence("DEPENDENCYTREEREPORT_SEQ");

            modelBuilder.HasSequence("DEPRECIATION_SEQ");

            modelBuilder.HasSequence("DEPRECIATIONCALCM_SEQ");

            modelBuilder.HasSequence("DEPRECIATIONCALCO_SEQ");

            modelBuilder.HasSequence("DIMENSIONLEVELS_SEQ");

            modelBuilder.HasSequence("DIMENSIONS_SEQ");

            modelBuilder.HasSequence("DIMENSIONSDETAILS_SEQ");

            modelBuilder.HasSequence("DISCOUNT_ITEM_M_SEQ");

            modelBuilder.HasSequence("DISCOUNT_LIST_CUSTOMER_SEQ");

            modelBuilder.HasSequence("DISCOUNT_LIST_TYPE_SEQ");

            modelBuilder.HasSequence("DOCUMENTSATTACHEDTYPES_SEQ");

            modelBuilder.HasSequence("ELMAH$ERROR_SEQ");

            modelBuilder.HasSequence("ESTIMATEDVALS_SEQ");

            modelBuilder.HasSequence("ESTIMATEDVALSDET_SEQ");

            modelBuilder.HasSequence("EVAL_PRICE_PROMO_COMM_SEQ");

            modelBuilder.HasSequence("EVALUAPRICEPROMATIONDETAIL_SEQ");

            modelBuilder.HasSequence("EVALUATION_PRICE_PROMATION_SEQ");

            modelBuilder.HasSequence("EXPTYPES_SEQ");

            modelBuilder.HasSequence("EXTRAS_SEQ");

            modelBuilder.HasSequence("FEATURETYPES_SEQ");

            modelBuilder.HasSequence("FINANCE_ANLS_CODES_FACTOR_SEQ");

            modelBuilder.HasSequence("FINANCE_ANLS_CODES_SEQ");

            modelBuilder.HasSequence("FINANCE_TRNS_ACCEPT_SEQ");

            modelBuilder.HasSequence("FINANCEAPP_SEQ");

            modelBuilder.HasSequence("FINANCEDEP_SEQ");

            modelBuilder.HasSequence("FINANCEDEPSPEC_SEQ");

            modelBuilder.HasSequence("FINANCEDEPSPECDETAIL_SEQ");

            modelBuilder.HasSequence("FINANCEDISTTYPE_SEQ");

            modelBuilder.HasSequence("FINANCEDISTTYPES_SEQ");

            modelBuilder.HasSequence("FINANCEINSTALMENTS_SEQ");

            modelBuilder.HasSequence("FINANCEINVDIST_SEQ");

            modelBuilder.HasSequence("FINANCEINVSPEC_SEQ");

            modelBuilder.HasSequence("FINANCEM_SEQ");

            modelBuilder.HasSequence("FINANCESPC_SEQ");

            modelBuilder.HasSequence("FINANCESPECDETAILS_SEQ");

            modelBuilder.HasSequence("FINANCESPECPROTECTION_SEQ");

            modelBuilder.HasSequence("FINANCETRNS_USER_ACCEPT_SEQ");

            modelBuilder.HasSequence("FINANCETYPE_SEQ");

            modelBuilder.HasSequence("FINANCIAL_SEQ");

            modelBuilder.HasSequence("FINANCIALCANCELLATION_SEQ");

            modelBuilder.HasSequence("FROMTODESC_SEQ");

            modelBuilder.HasSequence("GL_ACCOUNT_SEQ");

            modelBuilder.HasSequence("GL_ACCOUNT_SEQ1");

            modelBuilder.HasSequence("GL_ACCTYPE_SEQ");

            modelBuilder.HasSequence("GL_CURRENCY_HISTORY_SEQ");

            modelBuilder.HasSequence("GL_CURRENCY_SEQ");

            modelBuilder.HasSequence("GL_DBUD_SEQ");

            modelBuilder.HasSequence("GL_DOCTYPE_SEQ");

            modelBuilder.HasSequence("GL_DT_SEQ");

            modelBuilder.HasSequence("GL_DTA_SEQ");

            modelBuilder.HasSequence("GL_EB_SEQ");

            modelBuilder.HasSequence("GL_EQUATION_SEQ");

            modelBuilder.HasSequence("GL_FP_SEQ");

            modelBuilder.HasSequence("GL_FY_SEQ");

            modelBuilder.HasSequence("GL_LEVEL_SEQ");

            modelBuilder.HasSequence("GL_MT_SEQ");

            modelBuilder.HasSequence("GL_SDOC_SEQ");

            modelBuilder.HasSequence("GL_SETTINGS_SEQ");

            modelBuilder.HasSequence("GL_SUMMARY_SEQ");

            modelBuilder.HasSequence("GL_SUSPDET_SEQ");

            modelBuilder.HasSequence("GLINTEGRATORM_SEQ");

            modelBuilder.HasSequence("GLINTEGRATORO_SEQ");

            modelBuilder.HasSequence("GLINTERGRATIONSETTING_SEQ");

            modelBuilder.HasSequence("GROUP_BASIC_DATA_SEQ");

            modelBuilder.HasSequence("GROUPF_DETAILS_SEQ");

            modelBuilder.HasSequence("GROUPF_SEQ");

            modelBuilder.HasSequence("HAFZAM_SEQ");

            modelBuilder.HasSequence("HELP_CRITERIA_SEQ");

            modelBuilder.HasSequence("INST_ITEM_VIEW_SEQ");

            modelBuilder.HasSequence("INSTALMENTPARTS_SEQ");

            modelBuilder.HasSequence("INSTALMENTRULES_SEQ");

            modelBuilder.HasSequence("INSTALMENTS_M_SEQ");

            modelBuilder.HasSequence("INSTATTATCHSERVICES_SEQ");

            modelBuilder.HasSequence("INSTATTATCHSERVICESU_SEQ");

            modelBuilder.HasSequence("INSTCALCMETHOD_SEQ");

            modelBuilder.HasSequence("INSTITEM_SEQ");

            modelBuilder.HasSequence("INSTITEMATTATCHFEATURES_SEQ");

            modelBuilder.HasSequence("INSTITEMATTATCHFEATURESU_SEQ");

            modelBuilder.HasSequence("INSTITEMATTATCHMENTS_SEQ");

            modelBuilder.HasSequence("INSTITEMATTATCHMENTSU_SEQ");

            modelBuilder.HasSequence("INSTITEMCHECKS_SEQ");

            modelBuilder.HasSequence("INSTITEMCOMP_SEQ");

            modelBuilder.HasSequence("INSTITEMCOMPDETAILS_SEQ");

            modelBuilder.HasSequence("INSTITEMCOMPINSTPAY_SEQ");

            modelBuilder.HasSequence("INSTITEMDOCATTACHMENTS_SEQ");

            modelBuilder.HasSequence("INSTITEMFEATURES_SEQ");

            modelBuilder.HasSequence("INSTITEMFEATURESU_SEQ");

            modelBuilder.HasSequence("INSTITEMMAINTYPEATTACH_SEQ");

            modelBuilder.HasSequence("INSTITEMMAINTYPEFEATURES_SEQ");

            modelBuilder.HasSequence("INSTITEMMAINTYPES_SEQ");

            modelBuilder.HasSequence("INSTITEMMAINTYPESERVICES_SEQ");

            modelBuilder.HasSequence("INSTITEMPROPERTIES_SEQ");

            modelBuilder.HasSequence("INSTITEMSERVICES_SEQ");

            modelBuilder.HasSequence("INSTITEMSERVICESU_SEQ");

            modelBuilder.HasSequence("INSTITEMSINSTALMENTRULES_SEQ");

            modelBuilder.HasSequence("INSTITEMSPENALTYRULES_SEQ");

            modelBuilder.HasSequence("INSTITEMU_SEQ");

            modelBuilder.HasSequence("INSTPENALTYRULES_SEQ");

            modelBuilder.HasSequence("INSTPROGRAMS_SEQ");

            modelBuilder.HasSequence("INSTSYSTEMSSPEC_SEQ");

            modelBuilder.HasSequence("INSTTYPEPROPERTIES_SEQ");

            modelBuilder.HasSequence("INTEGRATORRELATION_SEQ");

            modelBuilder.HasSequence("INTTRADESPECS_SEQ");

            modelBuilder.HasSequence("IRRIGATIONEMP_SEQ");

            modelBuilder.HasSequence("ITEM_CHANGE_M_SEQ");

            modelBuilder.HasSequence("ITEM_CHANGE_PRICE_O_SEQ");

            modelBuilder.HasSequence("ITEM_DISCOUNT_O_SEQ");

            modelBuilder.HasSequence("ITEMCHANGEM_STORE_TRNS_SEQ");

            modelBuilder.HasSequence("JOURNALCODES_SEQ");

            modelBuilder.HasSequence("JOURNALCODESACCS_SEQ");

            modelBuilder.HasSequence("JOURNALENTRIESDETAILS_SEQ");

            modelBuilder.HasSequence("JOURNALENTRIESDIMENSION_SEQ");

            modelBuilder.HasSequence("JOURNALENTRIESMAIN_SEQ");

            modelBuilder.HasSequence("LG_DESCRIPTIONS_M_SEQ");

            modelBuilder.HasSequence("LG_DESCRIPTIONS_O_SEQ");

            modelBuilder.HasSequence("LG_FINANCE_SEQ");

            modelBuilder.HasSequence("LG_TRANSACTION_EDIT_SEQ");

            modelBuilder.HasSequence("LG_TRANSACTION_SEQ");

            modelBuilder.HasSequence("LG_TYPES_SEQ");

            modelBuilder.HasSequence("MAIN_CRITERIA_SEQ");

            modelBuilder.HasSequence("MULTIDISTSPEC_SEQ");

            modelBuilder.HasSequence("MULTYDIST_DIMENSIONS_SEQ");

            modelBuilder.HasSequence("MULTYDIST_SEQ");

            modelBuilder.HasSequence("PAYMENTTYPES_SEQ");

            modelBuilder.HasSequence("PERIOD_SEQ");

            modelBuilder.HasSequence("PERMISSOINS_SEQ");

            modelBuilder.HasSequence("POSTRANS_SEQ");

            modelBuilder.HasSequence("PRICE_LIST_CUSTOMER_O_SEQ");

            modelBuilder.HasSequence("PRICE_LIST_CUSTOMER_SEQ");

            modelBuilder.HasSequence("PRICE_LIST_MAX_QUANTITY_SEQ");

            modelBuilder.HasSequence("PRICE_LIST_TYPE_SEQ");

            modelBuilder.HasSequence("PRINTCHECKSCONTROLSNAME_SEQ");

            modelBuilder.HasSequence("PRINTCHECKSSETTING_SEQ");

            modelBuilder.HasSequence("PRINTCHECKSSETTINGDETAILS_SEQ");

            modelBuilder.HasSequence("PRODUCATIONFORMLA_SEQ");

            modelBuilder.HasSequence("PRODUCTFORMLADETAILS_SEQ");

            modelBuilder.HasSequence("PRODUCTSTAGES_SEQ");

            modelBuilder.HasSequence("RENTADDDEDUCREASONS_SEQ");

            modelBuilder.HasSequence("RENTFORM_FINANCE_SEQ");

            modelBuilder.HasSequence("RENTFORM_SEQ");

            modelBuilder.HasSequence("RENTFORMCOMPOSITEITEM_SEQ");

            modelBuilder.HasSequence("RENTFORMDOCATTACHMENTS_SEQ");

            modelBuilder.HasSequence("RENTFORMRENEW_SEQ");

            modelBuilder.HasSequence("RENTFORMRENEWDETAIL_SEQ");

            modelBuilder.HasSequence("RENTINSATLEMENTSADDDEDUC_SEQ");

            modelBuilder.HasSequence("RENTINSTALMENTSM_SEQ");

            modelBuilder.HasSequence("RENTINSTALMENTSO_SEQ");

            modelBuilder.HasSequence("RESCHEDULE_SEQ");

            modelBuilder.HasSequence("RESERVATIONITEMS_SEQ");

            modelBuilder.HasSequence("RESERVED_UNITS_SEQ");

            modelBuilder.HasSequence("ROLES_SEQ");

            modelBuilder.HasSequence("SALEADDDEDUCREASONS_SEQ");

            modelBuilder.HasSequence("SALEFORM_ACCEPT_SEQ");

            modelBuilder.HasSequence("SALEFORM_SEQ");

            modelBuilder.HasSequence("SALEFORMAPPLEVELS_SEQ");

            modelBuilder.HasSequence("SALEFORMAPPROVALS_SEQ");

            modelBuilder.HasSequence("SALEFORMDELIVERUNITS_SEQ");

            modelBuilder.HasSequence("SALEFORMDOCATTACHMENTS_SEQ");

            modelBuilder.HasSequence("SALEFORMINSTALMENTRULES_SEQ");

            modelBuilder.HasSequence("SALEFORMINSTALMENTSM_SEQ");

            modelBuilder.HasSequence("SALEFORMINSTITEMSERVICES_SEQ");

            modelBuilder.HasSequence("SALEFORMINSTPENALTYRULES_SEQ");

            modelBuilder.HasSequence("SALEFORMREPORTS_SEQ");

            modelBuilder.HasSequence("SALEINSATLEMENTSADDDEDUC_SEQ");

            modelBuilder.HasSequence("SALEINSTALMENTSO_SEQ");

            modelBuilder.HasSequence("SALERENTCOMPOSITEITEM_SEQ");

            modelBuilder.HasSequence("SALERENTINSTATTATCHFEATURE_SEQ");

            modelBuilder.HasSequence("SALERENTINSTATTATCHSERVICE_SEQ");

            modelBuilder.HasSequence("SALERENTINSTITEM_SEQ");

            modelBuilder.HasSequence("SALERENTINSTITEMATTATCH_SEQ");

            modelBuilder.HasSequence("SALERENTINSTITEMFEATURES_SEQ");

            modelBuilder.HasSequence("SALERENTINSTITEMPROPERTIES_SEQ");

            modelBuilder.HasSequence("SALERENTINSTITEMSERVICES_SEQ");

            modelBuilder.HasSequence("SEC_CONTROLS_SEQ");

            modelBuilder.HasSequence("SEC_PAGE_DATA_SEQ");

            modelBuilder.HasSequence("SEC_PAGES_CONTROLS_SEQ");

            modelBuilder.HasSequence("SEC_ROLES_ON_CONTROLS_SEQ");

            modelBuilder.HasSequence("SEC_ROLES_ON_PAGES_SEQ");

            modelBuilder.HasSequence("SEQ_BRACHNES");

            modelBuilder.HasSequence("SEQ_COMPANYINFO");

            modelBuilder.HasSequence("SEQ_ID");

            modelBuilder.HasSequence("SEQ_ID1");

            modelBuilder.HasSequence("SEQ_PROGPRIVILEGE");

            modelBuilder.HasSequence("SEQ_SECURITY");

            modelBuilder.HasSequence("SEQ_USERGROUP");

            modelBuilder.HasSequence("SEQ_USERSTRANS");

            modelBuilder.HasSequence("SERV_INTERGRATIONSET_SEQ");

            modelBuilder.HasSequence("SERVICES_BENEFITS_SEQ");

            modelBuilder.HasSequence("SERVICES_DEPOSIT_SEQ");

            modelBuilder.HasSequence("SERVICES_FINANCE_SEQ");

            modelBuilder.HasSequence("SERVICES_FINES_SEQ");

            modelBuilder.HasSequence("SERVICES_HOLD_SEQ");

            modelBuilder.HasSequence("SERVICES_INSTITEM_SEQ");

            modelBuilder.HasSequence("SERVICES_INSTITEM_SER_TYPE_SEQ");

            modelBuilder.HasSequence("SERVICES_METERS_READINGS_SEQ");

            modelBuilder.HasSequence("SERVICES_PAYMENT_REQUESTS_SEQ");

            modelBuilder.HasSequence("SERVICES_PAYMENT_REQUESTSM_SEQ");

            modelBuilder.HasSequence("SERVICES_PRICE_SEQ");

            modelBuilder.HasSequence("SERVICES_REQUESTSM_FINES_SEQ");

            modelBuilder.HasSequence("SERVICES_TYPE_SEQ");

            modelBuilder.HasSequence("SERVICETRNSTYPES_SEQ");

            modelBuilder.HasSequence("SERVICETYPES_SEQ");

            modelBuilder.HasSequence("SHIPPING_SEQ");

            modelBuilder.HasSequence("SHIPPING_SPEC_SEQ");

            modelBuilder.HasSequence("SHIPPINGCOTYPES_SEQ");

            modelBuilder.HasSequence("SLIDES_M_SEQ");

            modelBuilder.HasSequence("SLIDES_O_SEQ");

            modelBuilder.HasSequence("SLIDES_STAFF_SEQ");

            modelBuilder.HasSequence("STAFF_SEQ");

            modelBuilder.HasSequence("STAGE_COST_SEC");

            modelBuilder.HasSequence("STAGE_COSTACC_SEQ");

            modelBuilder.HasSequence("STAGES_SEQ");

            modelBuilder.HasSequence("STORE_ALLCODES_BEGIN_SEQ");

            modelBuilder.HasSequence("STORE_ALLCODES_SEQ");

            modelBuilder.HasSequence("STORE_ALLSUBCODES_SEQ");

            modelBuilder.HasSequence("STORE_CUST_DEPOSIT_SEQ");

            modelBuilder.HasSequence("STORE_DEP_SPECS_DETAILS_SEQ");

            modelBuilder.HasSequence("STORE_DEP_SPECS_SEQ");

            modelBuilder.HasSequence("STORE_INVENTORY_M_SEQ");

            modelBuilder.HasSequence("STORE_INVENTORY_O_SEQ");

            modelBuilder.HasSequence("STORE_ITEM_BRANCH_PRICES_SEQ");

            modelBuilder.HasSequence("STORE_ITEM_PRICE_SEQ");

            modelBuilder.HasSequence("STORE_ITEM_UNITS_SEQ");

            modelBuilder.HasSequence("STORE_ITEMFORM_UNITS_SEQ");

            modelBuilder.HasSequence("STORE_ITEMFORMS_SPECS_SEQ");

            modelBuilder.HasSequence("STORE_ITEMS_BAL_EXP_SEQ");

            modelBuilder.HasSequence("STORE_ITEMS_BAL_SEQ");

            modelBuilder.HasSequence("STORE_ITEMS_DOCATTACHMENTS_SEQ");

            modelBuilder.HasSequence("STORE_ITEMS_KIND_SEQ");

            modelBuilder.HasSequence("STORE_ITEMS_SEQ");

            modelBuilder.HasSequence("STORE_ITEMS_SPEC_SEQ");

            modelBuilder.HasSequence("STORE_ITEMSINGRED_SEQ");

            modelBuilder.HasSequence("STORE_SUB_CODE_SPEC_SEQ");

            modelBuilder.HasSequence("STORE_TRNS_ACCEPT_SEQ");

            modelBuilder.HasSequence("STORE_TRNS_CREAT_O_SEC");

            modelBuilder.HasSequence("STORE_TRNS_CREAT_SEQ");

            modelBuilder.HasSequence("STORE_TRNS_DEP_DETAILS_SEQ");

            modelBuilder.HasSequence("STORE_TRNS_DEP_SEQ");

            modelBuilder.HasSequence("STORE_TRNS_EXP_SEQ");

            modelBuilder.HasSequence("STORE_TRNS_KIND_DETAILS_SEQ");

            modelBuilder.HasSequence("STORE_TRNS_LC_DOCUMENTS_SEQ");

            modelBuilder.HasSequence("STORE_TRNS_LC_SEQ");

            modelBuilder.HasSequence("STORE_TRNS_M_SEQ");

            modelBuilder.HasSequence("STORE_TRNS_M_STAGE_SEC");

            modelBuilder.HasSequence("STORE_TRNS_O_SEQ");

            modelBuilder.HasSequence("STORE_TRNS_O_STAGE_SEC");

            modelBuilder.HasSequence("STORE_TRNS_PRICE_SEQ");

            modelBuilder.HasSequence("STORE_TRNSFROMTRNSSEQ");

            modelBuilder.HasSequence("STORE_TRNSO_DIMENDETAILS_SEQ");

            modelBuilder.HasSequence("STORE_TRNSO_DS_SEQ");

            modelBuilder.HasSequence("STORE_UNITS_SEQ");

            modelBuilder.HasSequence("STOREALLCODESATTACHMENTS_SEQ");

            modelBuilder.HasSequence("STOREDSTTYPES_SEQ");

            modelBuilder.HasSequence("STOREINVCREATION_SEQ");

            modelBuilder.HasSequence("STOREITEMSALLCODES_SEQ");

            modelBuilder.HasSequence("STOREMEXTRAS_SEQ");

            modelBuilder.HasSequence("STOREMINTTRADE_SEQ");

            modelBuilder.HasSequence("STORERECTRNSDEPDETTEMP_SEQ");

            modelBuilder.HasSequence("STORESPECAPP_SEQ");

            modelBuilder.HasSequence("STORETRNSEXTEXP_SEQ");

            modelBuilder.HasSequence("STORETRNSEXTRAS_SEQ");

            modelBuilder.HasSequence("STORETRNSMATTACHMENTS_SEQ");

            modelBuilder.HasSequence("STORETRNSMCOMMITTEE_SEQ");

            modelBuilder.HasSequence("STORETRNSMEXTEXP_SEQ");

            modelBuilder.HasSequence("STORETRNSMPAYSPECS_SEQ");

            modelBuilder.HasSequence("STORETRNSPRODUCATIONFORMLA_SEQ");

            modelBuilder.HasSequence("SUBCODES_SEQ");

            modelBuilder.HasSequence("TERMSOFINSTAINTEMSALE_SEQ");

            modelBuilder.HasSequence("TRNS_PRINT_SPEC_SEQ");

            modelBuilder.HasSequence("TRNS_PRINT_SPECDETAILS_SEQ");

            modelBuilder.HasSequence("USERAPPS_SEQ");

            modelBuilder.HasSequence("USERCREATEDREPORTS_SEQ");

            modelBuilder.HasSequence("USERCURRENCIES_SEQ");

            modelBuilder.HasSequence("USERINSTITEM_SEQ");

            modelBuilder.HasSequence("USERREPORTDATASOURCE_SEQ");

            modelBuilder.HasSequence("USERREPORTDATASOURCEO_SEQ");

            modelBuilder.HasSequence("USERREPORTSMENUE_SEQ");

            modelBuilder.HasSequence("USERS_SEQ");

            modelBuilder.HasSequence("USERS_STORE_ALLCODES_SEQ");

            modelBuilder.HasSequence("USERSREPORT_SEQ");

            modelBuilder.HasSequence("USERTRANSCTRLS_SEQ");

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
